#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, jets, wing1, wing2, nose, vertjet1, vertjet2, THrust1,
       THrust2, Thrust3, Thrust4, Lightning;

static-var  statechg_DesiredState, statechg_StateChanging, Static_Var_3, Static_Var_4;


RolltheDice()
{
	Static_Var_4 = Rand( 0, 14 );
	if( Static_Var_4 == 7 )
	{
		emit-sfx 2048 + 2 from Lightning;
		return (0);
	}
}

activatescr()
{
		//Static_Var_3 = 1;
		turn jets to x-axis <0.000000> now;
		turn jets to x-axis <89.637363> speed <61.516484>;
		turn wing1 to y-axis <0.000000> now;
		turn wing1 to y-axis <-90.956044> speed <62.423077>;
		turn wing2 to y-axis <0.000000> now;
		turn wing2 to y-axis <90.203297> speed <61.901099>;
		sleep 1457;
}

/*
Flamers()
{
	while( TRUE )
	{
		if( Static_Var_3 == 1 )
		{
			emit-sfx 1024 from THrust1;
			emit-sfx 1024 from THrust2;
			emit-sfx 1024 from Thrust3;
			emit-sfx 1024 from Thrust4;
		}
		sleep 1;
	}
}
*/

deactivatescr()
{
		turn jets to x-axis <89.637363> now;
		turn jets to x-axis <0.000000> speed <61.989011>;
		turn wing1 to y-axis <-90.956044> now;
		turn wing1 to y-axis <0.000000> speed <62.901099>;
		turn wing2 to y-axis <90.203297> now;
		turn wing2 to y-axis <0.000000> speed <62.379121>;
		//Static_Var_3 = 0;
		sleep 1446;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
	//start-script Flamers();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = base;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	start-script RolltheDice();
	sleep 1000;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode jets type BITMAPONLY | BITMAP2;
		explode nose type BITMAPONLY | BITMAP3;
		explode vertjet1 type BITMAPONLY | BITMAP4;
		explode vertjet2 type BITMAPONLY | BITMAP5;
		explode wing1 type BITMAPONLY | BITMAP1;
		explode wing2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode jets type SHATTER | BITMAP2;
		explode nose type FALL | BITMAP3;
		explode vertjet1 type FALL | BITMAP4;
		explode vertjet2 type FALL | BITMAP5;
		explode wing1 type FALL | BITMAP1;
		explode wing2 type FALL | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode jets type SHATTER | BITMAP2;
		explode nose type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode vertjet1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode vertjet2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode wing1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wing2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode jets type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode nose type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode vertjet1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode vertjet2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode wing1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wing2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
