
#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece base, door1, door2, plate, turret, post, nano, gun, spray, wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8;

static-var  Static_Var_1, Static_Var_2, unitviewer;

// Signal definitions
#define SIG_MOVE2			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from Door1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from Door2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	signal SIG_MOVE2;
	set-signal-mask SIG_MOVE2;
	while( TRUE )
	{
		if( Static_Var_1 == 2 OR Static_Var_1 == 1 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	return (0);
}

Demo()
{
	unitviewer = TRUE;
	return (0);
}

Create()
{
	Static_Var_2 = 0;
	hide turret;
	hide post;
	hide nano;
	hide gun;
	start-script SmokeUnit();
	move Plate to y-axis [-3.] now;
	unitviewer = FALSE;
	return (0);
}

TargetHeading(Func_Var_2)
{
	Static_Var_2 = 0 - Func_Var_2;
	return (0);
}

StartBuilding(Func_Var_2)
{
	signal 2;
	set-signal-mask 2;
	Static_Var_2 = Func_Var_2;
	if( TRUE )
	{
     	show turret;
	    show post;
	    show nano;
	    show gun;
    	turn door1 to z-axis <-71.> speed <90.>;
    	turn door2 to z-axis <71.> speed <90.>;
		wait-for-turn Door1 around z-axis;
    	move door1 to y-axis [-3.] speed [5.];
    	move door2 to y-axis [-3.] speed [5.];
		wait-for-move Door1 along y-axis;
		move Plate to y-axis [0.] speed [6.];
		wait-for-move Plate along y-axis;
	    turn post to x-axis <90.> speed <120.>;
    	turn nano to x-axis <-90.> speed <120.>;
		wait-for-turn nano around x-axis;
	}
	turn gun to y-axis Static_Var_2 speed <160.>;
	wait-for-turn gun around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

StopBuilding()
{
	signal 2;
	set-signal-mask 2;
	set INBUILDSTANCE to 0;
	sleep 2500;
	turn gun to y-axis <0.> speed <160.>;
	wait-for-turn gun around y-axis;
	if( TRUE )
	{
		turn post to x-axis <0.> speed <120.>;
    	turn nano to x-axis <0.> speed <120.>;
    	wait-for-turn post around x-axis;
	    wait-for-turn nano around x-axis;
  		move Plate to y-axis [-4.] speed [10.];
		wait-for-move Plate along y-axis;
    	move door1 to y-axis [0.] speed [5.];
	    move door2 to y-axis [0.] speed [5.];
	    wait-for-move door1 along y-axis;
	    turn door1 to z-axis <0.> speed <90.>;
	    turn door2 to z-axis <0.> speed <90.>;
	    wait-for-turn door1 around z-axis;
	    wait-for-turn door2 around z-axis;
    	hide turret;
    	hide post;
    	hide nano;
    	hide gun;
	}
	return (0);
}

AimPrimary(heading, pitch)
{
	if( unitviewer )
	{
		call-script StartBuilding(heading);
		sleep 2000;
		call-script StopBuilding();
		return (1);
	}
}

FirePrimary()
{
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = spray;
 	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode base type	BITMAPONLY | BITMAP1;
		explode door1 type	BITMAPONLY | BITMAP1;
		explode door2 type	BITMAPONLY | BITMAP1;
		explode plate type	BITMAPONLY | BITMAP1;
		explode turret type	BITMAPONLY | BITMAP1;
		explode post type	BITMAPONLY | BITMAP1;
		explode nano type	BITMAPONLY | BITMAP1;
		explode gun type	BITMAPONLY | BITMAP1;
		explode spray type	BITMAPONLY | BITMAP1;
		return(0);
		}
	if (severity <= 50)
		{
		corpsetype = 2;
		explode base type	SHATTER | BITMAP4;
		explode door1 type	SHATTER | BITMAP4;
		explode door2 type	SHATTER | BITMAP4;
		explode plate type	SHATTER | BITMAP4;
		explode turret type	SHATTER | BITMAP4;
		explode post type	SHATTER | BITMAP4;
		explode nano type	SHATTER | BITMAP4;
		explode gun type	SHATTER | BITMAP4;
		explode spray type	SHATTER | BITMAP4;
		return(0);
		}
	if (severity <= 99)
		{
		corpsetype = 3;
		explode base type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode plate type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode post type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nano type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gun type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode spray type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return(0);
		}
	corpsetype = 3;
	explode base type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode plate type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode post type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode nano type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gun type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode spray type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return(0);
	}