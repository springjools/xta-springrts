#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece	flare1a, flare1b, flare1c, flare1d, flare2a, flare2b, flare2c, flare2d, 
		m1, m2, m3, m4,
		v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, 
		base, turret1,
		turret2, wake1, wake2, barrel1a, barrel1b, barrel1c, barrel1d, barrel2a, barrel2b, barrel2c, barrel2d, 
		sleeves1, sleeves2, 
		w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24,
		mis1, mis2, launcher1, launcher2, aimfrom;

static-var  gun_1, gun_2, gun_3, aimback, wait, brb, wait2;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_MOVE			16


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare1d;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	hide flare2d;
	brb = 0;
	aimback = 0;
	wait=0;
	wait2=0;
	turn mis2 to y-axis <180> now;
	gun_1 = 0;
	gun_2 = 8;
	gun_3 = 12;
	start-script SmokeUnit();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 3 from w1;
		emit-sfx 3 from w2;
		emit-sfx 3 from w3;
		emit-sfx 3 from w4;
		emit-sfx 3 from w5;
		emit-sfx 3 from w6;
		emit-sfx 3 from w7;
		emit-sfx 3 from w8;
		emit-sfx 3 from w9;
		emit-sfx 3 from w10;
		emit-sfx 3 from w11;
		emit-sfx 3 from w12;
		emit-sfx 3 from w13;
		emit-sfx 3 from w14;
		emit-sfx 3 from w15;
		emit-sfx 3 from w16;
		emit-sfx 3 from w17;
		emit-sfx 3 from w18;
		emit-sfx 3 from w19;
		emit-sfx 3 from w20;
		emit-sfx 3 from w21;
		emit-sfx 3 from w22;
		emit-sfx 3 from w23;
		emit-sfx 3 from w24;
		emit-sfx 5 from w1;
		emit-sfx 5 from w2;
		emit-sfx 5 from w3;
		emit-sfx 5 from w4;
		emit-sfx 5 from w5;
		emit-sfx 5 from w6;
		emit-sfx 5 from w7;
		emit-sfx 5 from w8;
		emit-sfx 5 from w9;
		emit-sfx 5 from w10;
		emit-sfx 5 from w11;
		emit-sfx 5 from w12;
		emit-sfx 5 from w13;
		emit-sfx 5 from w14;
		emit-sfx 5 from w15;
		emit-sfx 5 from w16;
		emit-sfx 5 from w17;
		emit-sfx 5 from w18;
		emit-sfx 5 from w19;
		emit-sfx 5 from w20;
		emit-sfx 5 from w21;
		emit-sfx 5 from w22;
		emit-sfx 5 from w23;
		emit-sfx 5 from w24;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

//===================================1st==================================================================================================

RestorePrimary()
{
	sleep 10000;
	turn turret1 to y-axis <0> speed <25>;
	turn sleeves1 to x-axis <0> speed <17.5>;
	turn turret2 to y-axis <0> speed <25>;
	turn sleeves2 to x-axis <0> speed <17.5>;
}

RestoreTurret1()
{
	if(brb == 0)
	{
		brb = 1;
		sleep 10000;
	}
	turn turret1 to y-axis <0> speed <25>;
	turn sleeves1 to x-axis <0> speed <17.5>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if ( heading >= <110> AND heading <= <250> )
	{
		aimback=1;
		start-script RestoreTurret1();
		if (gun_1 <= 3)
		{
			gun_1 = 4;
		}
	}
	if (!( heading >= <110> AND heading <= <250> ))
	{
		aimback=0;
	}
	if ( gun_1 <= 3 )
	{
		turn turret1 to y-axis heading speed <50>;
		turn sleeves1 to x-axis <0.000000> - pitch speed <35>;

	}
	if ( gun_1 > 3 )
	{
		turn turret2 to y-axis heading speed <50>;
		turn sleeves2 to x-axis <0.000000> - pitch speed <35>;
	}
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeves1 around x-axis;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeves2 around x-axis;
	while(wait)
	{
		sleep 1;
	}
	Start-script RestorePrimary();
	return (1);
}

FirePrimary()
{
	wait=1;
	if( gun_1 == 0 )
	{
		move barrel1a to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1a along z-axis;
		move barrel1a to z-axis [0.000000] speed [3.000000];
		show flare1a;
		sleep 150;
		hide flare1a;
	}
	if( gun_1 == 1 )
	{
		move barrel1b to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1b along z-axis;
		move barrel1b to z-axis [0.000000] speed [3.000000];
		show flare1b;
		sleep 150;
		hide flare1b;
	}
	if( gun_1 == 2 )
	{
		move barrel1c to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1c along z-axis;
		move barrel1c to z-axis [0.000000] speed [3.000000];
		show flare1c;
		sleep 150;
		hide flare1c;
	}
	if( gun_1 == 3 )
	{
		move barrel1d to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1d along z-axis;
		move barrel1d to z-axis [0.000000] speed [3.000000];
		show flare1d;
		sleep 150;
		hide flare1d;
	}
	//=========================back turret============================================================================================================
	if( gun_1 == 4 )
	{
		move barrel2a to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2a along z-axis;
		move barrel2a to z-axis [0.000000] speed [3.000000];
		show flare2a;
		sleep 150;
		hide flare2a;
	}
	if( gun_1 == 5 )
	{
		move barrel2b to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2b along z-axis;
		move barrel2b to z-axis [0.000000] speed [3.000000];
		show flare2b;
		sleep 150;
		hide flare2b;
	}
	if( gun_1 == 6 )
	{
		move barrel2c to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2c along z-axis;
		move barrel2c to z-axis [0.000000] speed [3.000000];
		show flare2c;
		sleep 150;
		hide flare2c;
	}
	if( gun_1 == 7 )
	{
		move barrel2d to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2d along z-axis;
		move barrel2d to z-axis [0.000000] speed [3.000000];
		show flare2d;
		sleep 150;
		hide flare2d;
	}
	++gun_1;
	if( gun_1 == 8 )
	{
		if(aimback == 1)
		{
			gun_1 = 4;
			sleep 600;
		}
		if(aimback == 0)
		{
			gun_1 = 0;
		}
	}
	wait=0;
}

AimFromPrimary(piecenum)
{
	piecenum = aimfrom;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

//================================2nd===========================================================================================================================================================

RestoreTertiary()
{
	sleep 5000;
	turn mis1 to y-axis <0> speed <50>;
	turn launcher1 to x-axis <0> speed <35>;
	turn mis2 to y-axis <180> speed <50>;
	turn launcher2 to x-axis <0> speed <35>;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if ( gun_2 <= 9 )
	{
		turn mis1 to y-axis heading speed <200>;
		turn launcher1 to x-axis <0.000000> - pitch speed <140>;
		wait-for-turn mis1 around y-axis;
		wait-for-turn launcher1 around x-axis;
	}
	if ( gun_2 > 9 )
	{
		turn mis2 to y-axis heading speed <200>;
		turn launcher2 to x-axis <0.000000> - pitch speed <140>;
		wait-for-turn mis2 around y-axis;
		wait-for-turn launcher2 around x-axis;
	}
	Start-script RestoreTertiary();
	return (1);
}

FireTertiary()
{
	++gun_2;
	if (gun_2 == 12)
	{
		gun_2 = 8;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = gun_2;
}

QueryTertiary(piecenum)
{
	piecenum = gun_2;
}

//=======================================================3rd========================================================================================================================

AimSecondary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while(wait2 == 1)
	{
		sleep 10;
	}
	return (1);
}

FireSecondary()
{
	wait2=1;
	++gun_3;
	if (gun_3 == 22)
	{
		gun_3 = 12;
		sleep 2500;
	}
	wait2=0;
}

AimFromSecondary(piecenum)
{
	piecenum = gun_3;
}

QuerySecondary(piecenum)
{
	piecenum = gun_3;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1a type BITMAPONLY | BITMAP1;
		explode barrel1b type BITMAPONLY | BITMAP2;
		explode barrel1c type BITMAPONLY | BITMAP3;
		explode barrel2a type BITMAPONLY | BITMAP4;
		explode barrel2b type BITMAPONLY | BITMAP5;
		explode barrel2c type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare1a type BITMAPONLY | BITMAP3;
		explode flare1b type BITMAPONLY | BITMAP4;
		explode flare1c type BITMAPONLY | BITMAP5;
		explode flare2a type BITMAPONLY | BITMAP1;
		explode flare2b type BITMAPONLY | BITMAP2;
		explode flare2c type BITMAPONLY | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1b type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode barrel1c type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2a type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode barrel2b type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode barrel2c type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare1a type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode flare1b type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode flare1c type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode flare2a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode flare2b type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode flare2c type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type SHATTER | BITMAP5;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrel2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel2c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret1 type BITMAPONLY | BITMAP4;
	explode turret2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
