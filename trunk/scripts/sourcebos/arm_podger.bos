#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, door1, door2, plate, gun, tire1, tire2,
       tire3, tire4, post;

static-var  statechg_DesiredState, statechg_StateChanging, oldHeading,
			notBuilding, Static_Var_4;

#define SIG_MOVE	2
#define SIG_BUILD	4

SelfD()
{
	if( Static_Var_4 == 0 )
	{
		sleep 1;
		Static_Var_4 = 1;
		play-sound( "count1", 15 );
		emit-sfx UNIT_SFX1 from base;
		sleep 999;
		if( Static_Var_4 == 1 )
		{
			Static_Var_4 = 2;
			play-sound( "count2", 15 );
			emit-sfx UNIT_SFX2 from base;
			sleep 1000;
			if( Static_Var_4 == 2 )
			{
				Static_Var_4 = 3;
				play-sound( "count3", 15 );
				emit-sfx UNIT_SFX3 from base;
				sleep 1000;
				if( Static_Var_4 == 3 )
				{
					Static_Var_4 = 4;
					play-sound( "count4", 15 );
					emit-sfx UNIT_SFX4 from base;
					sleep 1000;
					if( Static_Var_4 == 4 )
					{
						Static_Var_4 = 5;
						play-sound( "count5", 15 );
						emit-sfx UNIT_SFX5 from base;
						sleep 1000;
						if( Static_Var_4 == 5 )
						{
							Static_Var_4 = 6;
							emit-sfx UNIT_SFX6 from base;
							play-sound( "count6", 35 );
							play-sound( "count6", 35 );
							sleep 100;
							emit-sfx DETO_W1 from base;
						}
					}
				}
			}
		}
	}
	if( Static_Var_4 > 0 AND Static_Var_4 < 5 )
	{
		Static_Var_4 = 0;
		sleep 100;
	}
	if( Static_Var_4 == 5 )
	{
		emit-sfx DETO_W2 from base;
		Static_Var_4 = 0;
		sleep 100;
	}
}

Build()
{
	set-signal-mask SIG_BUILD;
	while( TRUE )
	{
		emit-sfx UNIT_SFX7 from beam;
		sleep 100;
	}
}

activatescr()
{
	turn door1 to z-axis <-91.357143> speed <195.203297>;
	turn door2 to z-axis <90.115385> speed <192.571429>;
	sleep 80;

	move door1 to y-axis [-4.625000] speed [9.819534];
	move door2 to y-axis [-4.875000] speed [10.350311];
	sleep 80;

	move plate to y-axis [6.375000] speed [15.658157];
	sleep 80;

	set INBUILDSTANCE to 1;
}

deactivatescr()
{
	turn gun to y-axis <0.000000> speed <333.038462>;
	wait-for-turn gun around y-axis;

	move plate to y-axis [0.000000] speed [17.312195];
	sleep 122;

	move door1 to y-axis [0.000000] speed [10.806046];
	move door2 to y-axis [0.000000] speed [11.390182];
	sleep 122;

	turn door1 to z-axis <0.000000> speed <213.456044>;
	turn door2 to z-axis <0.000000> speed <210.571429>;
	sleep 122;

	set INBUILDSTANCE to 0;
}

Steering(heading, steer, currentSpeed)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while(1)
	{
		heading = get HEADING;
		steer = (heading - oldheading)*3;
		turn tire1 to y-axis steer speed <180>;	
		turn tire2 to y-axis steer speed <180>;	
		currentSpeed = <2.8> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin tire1 around x-axis speed currentSpeed;
		spin tire2 around x-axis speed currentSpeed;
		spin tire3 around x-axis speed currentSpeed;
		spin tire4 around x-axis speed currentSpeed;
		sleep 66;
		oldheading = heading;
	}
}

SmokeUnit(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		Func_Var_1 = get HEALTH;
		if( Func_Var_1 < 66 )
		{
			Func_Var_3 = 258;
			if( Rand( 1, 66 ) < Func_Var_1 )
			{
				Func_Var_3 = 257;
			}
			emit-sfx Func_Var_3 from base;
		}
		Func_Var_2 = Func_Var_1 * 50;
		if( Func_Var_2 < 200 )
		{
			Func_Var_2 = 200;
		}
		sleep Func_Var_2;
	}
	return;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	notBuilding = 1;
	oldheading = get HEADING;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn gun to y-axis heading speed <333.038462>;
	wait-for-turn gun around y-axis;
	start-script Build();
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

StartMoving()
{
	start-script Steering();
}

StopMoving()
{
	signal SIG_MOVE;
	stop-spin tire1 around x-axis;
	stop-spin tire2 around x-axis;
	stop-spin tire3 around x-axis;
	stop-spin tire4 around x-axis;
}

QueryNanoPiece(Func_Var_1)
{
	Func_Var_1 = 1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(Func_Var_1, Func_Var_2)
{
	if( Func_Var_1 <= 25 )
	{
		Func_Var_2 = 1;
		explode base type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode beam type BITMAPONLY | EXPTYPE_MEDIUMEXPLOSION;
		explode door1 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode door2 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
		explode gun type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
		explode plate type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode post type BITMAPONLY | EXPTYPE_MEDIUMEXPLOSION;
		explode tire1 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode tire2 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
		explode tire3 type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
		explode tire4 type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		return (0);
	}
	if( Func_Var_1 <= 50 )
	{
		Func_Var_2 = 2;
		explode base type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode beam type FALL | EXPTYPE_MEDIUMEXPLOSION;
		explode door1 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode door2 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
		explode gun type 1 | EXPTYPE_BLOODEXPLOSION;
		explode plate type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode post type FALL | EXPTYPE_MEDIUMEXPLOSION;
		explode tire1 type FALL | EXPTYPE_LARGEEXPLOSION;
		explode tire2 type FALL | EXPTYPE_XLARGEEXPLOSION;
		explode tire3 type FALL | EXPTYPE_BLOODEXPLOSION;
		explode tire4 type FALL | EXPTYPE_SMALLEXPLOSION;
		return (0);
	}
	if( Func_Var_1 <= 99 )
	{
		Func_Var_2 = 3;
		explode base type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode beam type FALL | 16 | 8 | 2 | EXPTYPE_MEDIUMEXPLOSION;
		explode door1 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode door2 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
		explode gun type 1 | EXPTYPE_BLOODEXPLOSION;
		explode plate type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode post type FALL | 16 | 8 | 2 | EXPTYPE_MEDIUMEXPLOSION;
		explode tire1 type FALL | 16 | 8 | 2 | EXPTYPE_LARGEEXPLOSION;
		explode tire2 type FALL | 16 | 8 | 2 | EXPTYPE_XLARGEEXPLOSION;
		explode tire3 type FALL | 16 | 8 | 2 | EXPTYPE_BLOODEXPLOSION;
		explode tire4 type FALL | 16 | 8 | 2 | EXPTYPE_SMALLEXPLOSION;
		return (0);
	}
	Func_Var_2 = 3;
	explode base type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
	explode beam type FALL | 16 | 8 | 2 | EXPTYPE_MEDIUMEXPLOSION;
	explode door1 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
	explode door2 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
	explode gun type 1 | 2 | EXPTYPE_BLOODEXPLOSION;
	explode plate type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
	explode post type FALL | 16 | 8 | 2 | EXPTYPE_MEDIUMEXPLOSION;
	explode tire1 type FALL | 16 | 8 | 2 | EXPTYPE_LARGEEXPLOSION;
	explode tire2 type FALL | 16 | 8 | 2 | EXPTYPE_XLARGEEXPLOSION;
	explode tire3 type FALL | 16 | 8 | 2 | EXPTYPE_BLOODEXPLOSION;
	explode tire4 type FALL | 16 | 8 | 2 | EXPTYPE_SMALLEXPLOSION;
}
