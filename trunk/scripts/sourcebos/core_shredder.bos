#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece flarer, flarel, emittera, emitterb, base, boxb, boxa, turret2, turreta,
	  turretb, wakel, waker, guns, guns2, groundplane, ignite1, ignite2, ignite3, ignite4;

static-var  gun_1, restore_delay;

// Signal definitions
#define SIG_AIM_3			2
#define SIG_AIM_2			4
#define SIG_AIM				8
#define SIG_MOVE			16

SetDirection(heading)
{
	var spd;
	spd = get ABS(heading);
	turn groundplane to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
}

RockOnWaves()
{
	while(1)
	{
		turn groundplane to x-axis <1.0> speed <1.5>;
		move groundplane to y-axis [0.0] speed [0.3];
		wait-for-turn groundplane around x-axis;
		turn groundplane to x-axis <-1.0> speed <1.5>;
		move groundplane to y-axis [-0.2] speed [0.3];
		wait-for-move groundplane along y-axis;
		move groundplane to y-axis [0.0] speed [0.3];
		wait-for-turn groundplane around x-axis;
		turn groundplane to x-axis <1.0> speed <1.5>;
		move groundplane to y-axis [-0.2] speed [0.3];
		wait-for-move groundplane along y-axis;
	}
}

FlameControl(Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_3 = get HEALTH;
		if( Func_Var_3 <= 80 )
		{
			emit-sfx UNIT_SFX2 from ignite1;
			if( Func_Var_3 <= 60 ){
				emit-sfx UNIT_SFX2 from ignite2;
				if( Func_Var_3 <= 40 ){
					emit-sfx UNIT_SFX2 from ignite3;
					if( Func_Var_3 <= 20 )	emit-sfx UNIT_SFX2 from ignite4;
				}
			}
			sleep 66;
		}
		else
		{
			sleep 333;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script FlameControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flarel;
	hide flarer;
	hide ignite1;
	hide ignite2;
	hide ignite3;
	hide ignite4;
	gun_1 = flarer;
	restore_delay = 3000;
	start-script SmokeUnit();
	start-script RockOnWaves();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
}

abaim()
{
	sleep 3000;
	signal SIG_AIM;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret2 to y-axis <0.000000> speed <75.000000>;
	turn turret2 to x-axis <0.000000> speed <75.000000>;
	turn turreta to y-axis <0.000000> speed <75.000000>;
	turn boxa to x-axis <0.000000> speed <75.000000>;
	turn turretb to y-axis <0.000000> speed <75.000000>;
	turn boxb to x-axis <0.000000> speed <75.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	while( TRUE )
	{
		emit-sfx 4 from wakel;
		emit-sfx 2 from waker;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if (waketime < 50) waketime = 50;
		sleep 15000/waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turreta to y-axis heading speed <255.000000>;
	turn boxa to x-axis <0.000000> - pitch speed <230.000000>;
	wait-for-turn turreta around y-axis;
	wait-for-turn boxa around x-axis;
	start-script abaim();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turretb to y-axis heading speed <255.000000>;
	turn boxb to x-axis <0.000000> - pitch speed <230.000000>;
	wait-for-turn turretb around y-axis;
	wait-for-turn boxb around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret2 to y-axis heading speed <755.000000>;
	turn turret2 to x-axis <0.000000> - pitch speed <730.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

TargetCleared(Func_Var_1)
{
	signal SIG_AIM;
}

FirePrimary()
{
	if( gun_1 )
	{
		emit-sfx UNIT_SFX1 from flarel;
		move guns2 to z-axis [-3.000000] speed [500.000000];
		sleep 150;
		wait-for-move guns2 along z-axis;
		move guns2 to z-axis [0.000000] speed [3.000000];
	}
	else
	{
		emit-sfx UNIT_SFX1 from flarer;
		move guns to z-axis [-3.000000] speed [500.000000];
		sleep 150;
		wait-for-move guns along z-axis;
		move guns to z-axis [0.000000] speed [3.000000];
	}
	gun_1 = !gun_1;
}

AimFromTertiary(piecenum)
{
	piecenum = base;
}

AimFromSecondary(piecenum)
{
	piecenum = turretb;
}

AimFromPrimary(piecenum)
{
	piecenum = turret2;
}

QueryTertiary(piecenum)
{
	piecenum = emittera;
}

QuerySecondary(piecenum)
{
	piecenum = emitterb;
}

QueryPrimary(piecenum)
{
	if( gun_1 )
	{
		piecenum = flarel;
	}
	else
	{
		piecenum = flarer;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode boxa type BITMAPONLY | BITMAP2;
		explode boxb type BITMAPONLY | BITMAP3;
		explode emittera type BITMAPONLY | BITMAP4;
		explode emitterb type BITMAPONLY | BITMAP5;
		explode flarel type BITMAPONLY | BITMAP1;
		explode flarer type BITMAPONLY | BITMAP2;
		explode guns type BITMAPONLY | BITMAP3;
		explode guns2 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode turreta type BITMAPONLY | BITMAP3;
		explode turretb type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode boxa type SHATTER | BITMAP2;
		explode boxb type BITMAPONLY | BITMAP3;
		explode emittera type FALL | BITMAP4;
		explode emitterb type FALL | BITMAP5;
		explode flarel type FALL | BITMAP1;
		explode flarer type FALL | BITMAP2;
		explode guns type BITMAPONLY | BITMAP3;
		explode guns2 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode turreta type FALL | BITMAP3;
		explode turretb type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode boxa type SHATTER | BITMAP2;
		explode boxb type BITMAPONLY | BITMAP3;
		explode emittera type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode emitterb type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode flarel type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode flarer type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode guns type BITMAPONLY | BITMAP3;
		explode guns2 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode turreta type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode turretb type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode boxa type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode boxb type BITMAPONLY | BITMAP3;
	explode emittera type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode emitterb type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode flarel type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode flarer type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode guns type BITMAPONLY | BITMAP3;
	explode guns2 type BITMAPONLY | BITMAP4;
	explode turret2 type BITMAPONLY | BITMAP2;
	explode turreta type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode turretb type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
}
