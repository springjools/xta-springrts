#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hinge1, hinge2, hinge3, hinge4, dish4, dish3, dish2,
       dish1, wheel, light, blight, ground;

static-var  statechg_DesiredState, statechg_StateChanging;

SetDirection(heading)
{
	var spd;
	spd = get ABS(heading);
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
}

RockOnWaves()
{
	while(1)
	{
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [0.0] speed [0.3];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <-1.0> speed <1.5>;
		move ground to y-axis [-0.2] speed [0.3];
		wait-for-move ground along y-axis;
		move ground to y-axis [0.0] speed [0.3];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [-0.2] speed [0.3];
		wait-for-move ground along y-axis;
	}
}

Standby()
{
	while( TRUE )
	{
		emit-sfx UNIT_SFX2 from blight;
		sleep 700;
	}
}

activatescr()
{
	turn hinge1 to x-axis <0.000000> now;
	turn hinge1 to x-axis <133.291209> speed <68.747253>;
	turn hinge2 to x-axis <0.000000> now;
	turn hinge2 to x-axis <-132.868132> speed <68.516484>;
	turn hinge3 to z-axis <0.000000> now;
	turn hinge3 to z-axis <130.703297> speed <67.401099>;
	turn hinge4 to z-axis <0.000000> now;
	turn hinge4 to z-axis <-130.269231> speed <67.181319>;
	turn dish4 to y-axis <0.000000> now;
	turn dish4 to y-axis <-180.467033> speed <93.071429>;
	turn dish3 to y-axis <0.000000> now;
	turn dish3 to y-axis <-172.247253> speed <88.835165>;
	turn dish2 to y-axis <0.000000> now;
	turn dish2 to y-axis <-182.203297> speed <93.967033>;
	turn dish1 to y-axis <0.000000> now;
	turn dish1 to y-axis <-178.736264> speed <92.181319>;
	sleep 500;
	set ARMORED to 0;
	sleep 1500;
}

deactivatescr()
{
	turn hinge1 to x-axis <133.291209> now;
	turn hinge1 to x-axis <0.000000> speed <68.780220>;
	turn hinge2 to x-axis <-132.868132> now;
	turn hinge2 to x-axis <0.000000> speed <68.549451>;
	turn hinge3 to z-axis <130.703297> now;
	turn hinge3 to z-axis <0.000000> speed <67.434066>;
	turn hinge4 to z-axis <-130.269231> now;
	turn hinge4 to z-axis <0.000000> speed <67.214286>;
	turn dish4 to y-axis <-180.467033> now;
	turn dish4 to y-axis <0.000000> speed <93.115385>;
	turn dish3 to y-axis <-172.247253> now;
	turn dish3 to y-axis <0.000000> speed <88.879121>;
	turn dish2 to y-axis <-182.203297> now;
	turn dish2 to y-axis <0.000000> speed <94.016484>;
	turn dish1 to y-axis <-178.736264> now;
	turn dish1 to y-axis <0.000000> speed <92.225275>;
	sleep 500;
	set ARMORED to 1;
	sleep 1500;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script Standby();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}
Go()
{
	dont-cache base;
	dont-cache dish1;
	dont-cache dish2;
	dont-cache dish3;
	dont-cache dish4;
	dont-cache hinge1;
	dont-cache hinge2;
	dont-cache hinge3;
	dont-cache hinge4;
	dont-cache wheel;
	call-script activatescr();
	set ARMORED to 0;
	move base to y-axis [0.000000] speed [5.000000];
	spin wheel around y-axis speed <60.005495>;
}

Stop()
{
	stop-spin wheel around y-axis;
	move base to y-axis [-14.000000] speed [5.000000];
	call-script deactivatescr();
	cache base;
	cache dish1;
	cache dish2;
	cache dish3;
	cache dish4;
	cache hinge1;
	cache hinge2;
	cache hinge3;
	cache hinge4;
	cache wheel;
}


RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade light;
	dont-cache light;
	dont-shade base;
	dont-shade dish1;
	dont-shade dish2;
	dont-shade dish3;
	dont-shade dish4;
	dont-shade hinge1;
	dont-shade hinge2;
	dont-shade hinge3;
	dont-shade hinge4;
	dont-shade wheel;
	set ARMORED to 0;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
	start-script RockOnWaves();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 2;
	set-signal-mask 2;
	set ACTIVATION to 0;
	set ARMORED to 1;
	sleep 8000;
	set ACTIVATION to 1;
	set ARMORED to 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode dish1 type BITMAPONLY | BITMAP2;
		explode dish2 type BITMAPONLY | BITMAP3;
		explode dish3 type BITMAPONLY | BITMAP4;
		explode dish4 type BITMAPONLY | BITMAP5;
		explode hinge1 type BITMAPONLY | BITMAP1;
		explode hinge2 type BITMAPONLY | BITMAP2;
		explode hinge3 type BITMAPONLY | BITMAP3;
		explode hinge4 type BITMAPONLY | BITMAP4;
		explode light type SHATTER | BITMAP5;
		explode wheel type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode dish1 type BITMAPONLY | BITMAP2;
		explode dish2 type BITMAPONLY | BITMAP3;
		explode dish3 type BITMAPONLY | BITMAP4;
		explode dish4 type BITMAPONLY | BITMAP5;
		explode hinge1 type BITMAPONLY | BITMAP1;
		explode hinge2 type BITMAPONLY | BITMAP2;
		explode hinge3 type BITMAPONLY | BITMAP3;
		explode hinge4 type BITMAPONLY | BITMAP4;
		explode light type SHATTER | BITMAP5;
		explode wheel type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode dish1 type BITMAPONLY | BITMAP2;
		explode dish2 type BITMAPONLY | BITMAP3;
		explode dish3 type BITMAPONLY | BITMAP4;
		explode dish4 type BITMAPONLY | BITMAP5;
		explode hinge1 type BITMAPONLY | BITMAP1;
		explode hinge2 type BITMAPONLY | BITMAP2;
		explode hinge3 type BITMAPONLY | BITMAP3;
		explode hinge4 type BITMAPONLY | BITMAP4;
		explode light type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode wheel type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode dish1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode dish2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode dish3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode dish4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode hinge1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode hinge2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hinge3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode hinge4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode light type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode wheel type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
