#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lmispoint, rmispoint, base, arm1, arm2, launcher, wake1, wake2,
       wake3, wake4, wake5, wake6, wake7, wake8;

static-var  Static_Var_1, gun_2, Static_Var_3, restore_delay, statechg_DesiredState,
            statechg_StateChanging, Static_Var_7, Static_Var_8, Static_Var_9, Static_Var_10;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4


ChangeWeapons()
{
	Static_Var_10 = 1;
	sleep 6000;
	Static_Var_10 = 0;
}

Activate()
{
	start-script ChangeWeapons();
	Static_Var_9 = 1;
}

Deactivate()
{
	start-script ChangeWeapons();
	Static_Var_9 = 0;
}

BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= [2.500000] )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) / 16;
		}
		turn base to z-axis Func_Var_3 speed <45.000000>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
}

WobbleUnit()
{
	while( TRUE )
	{
		if( Static_Var_8 )
		{
			move base to y-axis [4.500000] speed [2.500000];
		}
		else
		{
			move base to y-axis [2.000000] speed [2.500000];
		}
		Static_Var_8 = !Static_Var_8;
		sleep 750;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis <0.005495> * anglex speed <50.005495>;
	turn base to z-axis <0.005495> * anglez speed <50.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis <0.005495> * Func_Var_2 speed <105.016484>;
	turn base to x-axis <0.005495> * Func_Var_1 speed <105.016484>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

activatescr()
{
	move arm1 to z-axis [0.000000] now;
	move arm1 to z-axis [0.000000] speed [2.500000];
	move arm2 to y-axis [0.000000] now;
	move launcher to y-axis [0.000000] now;
	move lmispoint to z-axis [0.000000] now;
	move rmispoint to z-axis [0.000000] now;
	turn arm1 to x-axis <0.000000> now;
	turn arm1 to x-axis <23.000000> speed <49.000000>;
	turn arm2 to x-axis <0.000000> now;
	turn arm2 to x-axis <-75.000000> speed <159.000000>;
	sleep 468;

	move arm1 to z-axis [-2.500000] speed [2.500000];
	turn base to x-axis <-2.000000> speed <4.000000>;
	turn arm1 to x-axis <45.000000> speed <48.000000>;
	turn arm2 to x-axis <-135.000000> speed <130.000000>;
	sleep 469;

	move launcher to z-axis [7.500000] speed [47.500000];
	turn base to x-axis <-2.000000> speed <3.000000>;
	turn arm1 to x-axis <45.000000> speed <0.000000>;
	turn arm2 to x-axis <-142.000000> speed <51.000000>;
	sleep 149;

	move launcher to z-axis [10.000000] speed [20.000000];
	turn base to x-axis <-1.000000> speed <8.000000>;
	turn arm1 to x-axis <45.000000> speed <0.000000>;
	turn arm2 to x-axis <-135.000000> speed <63.000000>;
	sleep 120;

	turn base to x-axis <0.000000> speed <16.000000>;
	sleep 90;
}

deactivatescr()
{
	move arm1 to z-axis [-2.500000] now;
	move arm2 to y-axis [0.000000] now;
	move launcher to y-axis [0.000000] now;
	move launcher to z-axis [10.000000] now;
	move launcher to z-axis [0.000000] speed [32.500000];
	move lmispoint to z-axis [0.000000] now;
	move rmispoint to z-axis [0.000000] now;
	turn base to x-axis <0.000000> now;
	turn base to x-axis <-2.000000> speed <8.000000>;
	turn arm1 to x-axis <0.000000> now;
	turn arm2 to x-axis <0.000000> now;
	turn arm1 to y-axis <23.000000> speed <90.000000>;
	turn arm2 to y-axis <-75.000000> speed <90.000000>;
	sleep 292;

	move arm1 to z-axis [0.000000] speed [2.500000];
	turn base to x-axis <0.000000> speed <8.000000>;
	turn arm1 to x-axis <23.000000> speed <76.000000>;
	turn arm2 to x-axis <-75.000000> speed <207.000000>;
	sleep 293;

	move arm1 to z-axis [0.000000] speed [5.000000];
	turn base to x-axis <2.000000> speed <8.000000>;
	turn arm1 to x-axis <0.000000> speed <77.000000>;
	turn arm2 to x-axis <0.000000> speed <254.000000>;
	sleep 292;

	move base to y-axis [0.000000] speed [5.000000];
	turn base to x-axis <2.000000> speed <2.000000>;
	sleep 293;

	move base to y-axis [0.000000] speed [5.000000];
	turn base to x-axis <0.000000> speed <9.000000>;
	sleep 293;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script WobbleUnit();
	start-script BankClerck();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_7 = 1;
	gun_2 = lmispoint;
	Static_Var_1 = 0;
	restore_delay = 3000;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_3 <= 2 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
}

AimPrimary(heading, pitch)
{
	if( Static_Var_9 )
	{
		if( Static_Var_10 )
		{
			return (0);
		}
		start-script RequestState(0);
		signal SIG_AIM;
		set-signal-mask SIG_AIM;
		while( !Static_Var_1 )
		{
			sleep 200;
		}
		start-script RestoreAfterDelay();
		return (1);
	}
}

FirePrimary()
{
	move base to y-axis [-2.000000] speed [2500.000000];
	gun_2 = !gun_2;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = gun_2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimSecondary(heading, pitch)
{
	if( Static_Var_9 )
	{
		return (0);
	}
	if( Static_Var_10 )
	{
		return (0);
	}
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 200;
	}
	turn arm1 to y-axis heading speed <100.000000>;
	turn arm2 to x-axis <-45.027473> - pitch speed <60.000000>;
	wait-for-turn arm1 around y-axis;
	wait-for-turn arm2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	move base to y-axis [-2.000000] speed [2500.000000];
	gun_2 = !gun_2;
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

QuerySecondary(piecenum)
{
	piecenum = gun_2;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		Static_Var_7 = 1;
		if( Static_Var_3 <= 2 )
		{
			Static_Var_7 = 0;
			corpsetype = 1;
		}
		if( Static_Var_7 )
		{
			corpsetype = 2;
		}
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode lmispoint type BITMAPONLY | BITMAP3;
		explode rmispoint type BITMAPONLY | BITMAP3;
		explode launcher type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 3;
		explode arm1 type FALL | BITMAP1;
		explode arm2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode lmispoint type FALL | BITMAP3;
		explode rmispoint type FALL | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 4;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 4;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
