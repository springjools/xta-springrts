#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  Base, Body, NanoDoor1, NanoDoor2, Boom, Neck, NanoGun, NanoSpray,
       Wake1, Wake2;

static-var  notBuilding, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE		2
#define SIG_BUILD		4	


activatescr()
{
	turn NanoDoor1 to z-axis <-90.016484> speed <95.000000>;
	turn NanoDoor2 to z-axis <90.016484> speed <95.000000>;
	sleep 50;

	turn Boom to x-axis <39.005495> speed <42.000000>;
	turn Neck to x-axis <-39.005495> speed <42.000000>;
	sleep 50;
}

deactivatescr()
{
	turn Neck to y-axis <0.000000> speed <360.000000>;
	wait-for-turn Neck around y-axis;
	turn Boom to x-axis <0.000000> speed <62.000000>;
	turn Neck to x-axis <0.000000> speed <62.000000>;
	sleep 50;

	turn NanoDoor1 to z-axis <0.000000> speed <125.000000>;
	turn NanoDoor2 to z-axis <0.000000> speed <125.000000>;
	sleep 50;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn Neck to y-axis heading speed <320.000000>;
	wait-for-turn Neck around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx SFXTYPE_SUBBUBBLES from Wake1;
		emit-sfx SFXTYPE_SUBBUBBLES from Wake2;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

QueryNanoPiece(piecenum)
{
	piecenum = NanoSpray;
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = Base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode Base type BITMAPONLY | BITMAP1;
		explode Body type BITMAPONLY | BITMAP1;
		explode NanoDoor1 type BITMAPONLY | BITMAP1;
		explode NanoDoor2 type BITMAPONLY | BITMAP1;
		explode Boom type BITMAPONLY | BITMAP1;
		explode Neck type BITMAPONLY | BITMAP1;
		explode NanoGun type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode Base type BITMAPONLY | BITMAP1;
		explode Body type BITMAPONLY | BITMAP1;
		explode NanoDoor1 type BITMAPONLY | BITMAP1;
		explode NanoDoor2 type BITMAPONLY | BITMAP1;
		explode Boom type BITMAPONLY | BITMAP1;
		explode Neck type BITMAPONLY | BITMAP1;
		explode NanoGun type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode Base type SHATTER | BITMAP4;
		explode Body type SHATTER | BITMAP4;
		explode NanoDoor1 type SHATTER | BITMAP4;
		explode NanoDoor2 type SHATTER | BITMAP4;
		explode Boom type SHATTER | BITMAP4;
		explode Neck type SHATTER | BITMAP4;
		explode NanoGun type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode Base type SHATTER | BITMAP4;
	explode Body type SHATTER | BITMAP4;
	explode NanoDoor1 type SHATTER | BITMAP4;
	explode NanoDoor2 type SHATTER | BITMAP4;
	explode Boom type SHATTER | BITMAP4;
	explode Neck type SHATTER | BITMAP4;
	explode NanoGun type SHATTER | BITMAP4;
}
