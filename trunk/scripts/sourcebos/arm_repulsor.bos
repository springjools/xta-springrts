#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rocket1, rocket2, rocket3, turret, door1, door2, door3, ground,
       door4;

static-var  Static_Var_1, restore_delay, gun_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2

SetDirection(heading)
{
	var spd;
	spd = get ABS(heading);
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
}

RockOnWaves()
{
	while(1)
	{
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [0.0] speed [0.3];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <-1.0> speed <1.5>;
		move ground to y-axis [-0.2] speed [0.3];
		wait-for-move ground along y-axis;
		move ground to y-axis [0.0] speed [0.3];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [-0.2] speed [0.3];
		wait-for-move ground along y-axis;
	}
}

activatescr()
{
	turn door1 to z-axis <0.000000> now;
	turn door1 to z-axis <-129.626374> speed <73.318681>;
	turn door2 to z-axis <0.000000> now;
	turn door2 to z-axis <131.428571> speed <74.335165>;
	turn door3 to x-axis <0.000000> now;
	turn door3 to x-axis <-128.730769> speed <72.807692>;
	turn door4 to x-axis <0.000000> now;
	turn door4 to x-axis <129.626374> speed <73.318681>;
	sleep 1771;
}

deactivatescr()
{
	turn door1 to z-axis <-129.626374> now;
	turn door1 to z-axis <0.000000> speed <73.565934>;
	turn door2 to z-axis <131.428571> now;
	turn door2 to z-axis <0.000000> speed <74.587912>;
	turn door3 to x-axis <-128.730769> now;
	turn door3 to x-axis <0.000000> speed <73.054945>;
	turn door4 to x-axis <129.626374> now;
	turn door4 to x-axis <0.000000> speed <73.565934>;
	sleep 1776;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from door1;
			}
			else if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from door2;
			}
			else if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from door3;
			}
			else if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from door4;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	dont-cache rocket1;
	dont-cache rocket2;
	dont-cache rocket3;
	dont-cache turret;
	call-script activatescr();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	cache rocket1;
	cache rocket2;
	cache rocket3;
	cache turret;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( !statechg_DesiredState )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade rocket1;
	dont-shade rocket2;
	dont-shade rocket3;
	dont-shade turret;
	Static_Var_1 = 0;
	gun_1 = rocket1;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	start-script RockOnWaves();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	sleep 1500;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		hide rocket1;
		show rocket2;
		turn turret to y-axis <120.027473> speed <30.005495>;
		wait-for-turn turret around y-axis;
		show rocket3;
	}
	else if( gun_1 == 2 )
	{
		hide rocket2;
		show rocket3;
		turn turret to y-axis <240.054945> speed <30.005495>;
		wait-for-turn turret around y-axis;
	}
	else if( gun_1 == 3 )
	{
		hide rocket3;
		show rocket1;
		turn turret to y-axis <360.087912> speed <30.005495>;
		wait-for-turn turret around y-axis;
	}
	++gun_1;
	if( gun_1 >= 4 )
	{
		gun_1 = rocket1;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = rocket1;
	}
	else if( gun_1 == 2 )
	{
		piecenum = rocket2;
	}
	else if( gun_1 == 3 )
	{
		piecenum = rocket3;
	}
}

AimFromPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = rocket1;
	}
	else if( gun_1 == 2 )
	{
		piecenum = rocket2;
	}
	else if( gun_1 == 3 )
	{
		piecenum = rocket3;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode door3 type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		explode rocket1 type BITMAPONLY | BITMAP1;
		explode rocket2 type BITMAPONLY | BITMAP2;
		explode rocket3 type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode door3 type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		explode rocket1 type FALL | BITMAP1;
		explode rocket2 type FALL | BITMAP2;
		explode rocket3 type FALL | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode door3 type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rocket3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode door1 type BITMAPONLY | BITMAP2;
	explode door2 type BITMAPONLY | BITMAP3;
	explode door3 type BITMAPONLY | BITMAP4;
	explode door4 type BITMAPONLY | BITMAP5;
	explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rocket3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
