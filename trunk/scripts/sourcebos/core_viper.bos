#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret1, stand, door1, door2, door3, door4,
       aim, turret2, barrel;

static-var  Static_Var_1, restore_delay, openState, bAiming, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM			2
#define SIG_OPEN		16


activatescr()
{
	move stand to y-axis [-43.0] now;
	turn door1 to z-axis <-3.000000> now;
	turn door1 to z-axis <-180.000000> speed <827.692308>;
	turn door2 to z-axis <3.000000> now;
	turn door2 to z-axis <180.000000> speed <826.000000>;
	turn door3 to x-axis <-3.000000> now;
	turn door3 to x-axis <-180.000000> speed <827.692308>;
	turn door4 to x-axis <3.000000> now;
	turn door4 to x-axis <180.000000> speed <829.291209>;
	set ARMORED to 0;
	sleep 213;
	move stand to y-axis [33.000000] speed [190.500000];
	wait-for-move stand along y-axis;
	turn turret2 to x-axis <0.000000> speed <135.000000>;
	sleep 307;
}

deactivatescr()
{
	move stand to y-axis [33.000000] now;
	turn turret2 to x-axis <90.000000> speed <135.000000>;
	wait-for-turn turret2 around x-axis;
	move stand to y-axis [-43.0] speed [104.000000];
	turn door1 to z-axis <-180.000000> now;
	turn door2 to z-axis <180.000000> now;
	turn door3 to x-axis <-180.000000> now;
	turn door4 to x-axis <180.000000> now;
	sleep 263;
	set ARMORED to 1;
	turn door1 to z-axis <-3.000000> speed <309.291209>;
	turn door2 to z-axis <3.000000> speed <308.692308>;
	turn door3 to x-axis <-3.000000> speed <309.291209>;
	turn door4 to x-axis <3.000000> speed <309.890110>;
	sleep 270;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	set ARMORED to 1;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	set-signal-mask 0;
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep restore_delay;
	bAiming = 0;
	if (!openState)
	{
		turn turret1 to y-axis <0.000000> speed <200.000000>;
		turn turret2 to x-axis <0.000000> speed <200.000000>;
		wait-for-turn turret1 around y-axis;
		wait-for-turn turret2 around x-axis;
		if (openState) return;		
		set-signal-mask 0;
		start-script RequestState(1);
	}
}

OpenClose(state)
{
	signal SIG_OPEN;
	set-signal-mask SIG_OPEN;
	openState = state;
	if (state != Static_var_1)
	{
		if (state)
		{
			if (!bAiming) start-script RequestState(0);
		}
		else
		{
			if (bAiming) return;
			turn turret1 to y-axis <0.000000> speed <200.000000>;
			turn turret2 to x-axis <0.000000> speed <200.000000>;
			wait-for-turn turret1 around y-axis;
			wait-for-turn turret2 around x-axis;
			start-script RequestState(1);
		}
	}
}

Create()
{
	hide flare;
	Static_Var_1 = 0;
	bAiming = 0;
	restore_delay = 3000;
	move aim to y-axis [75.250000] now;
	move stand to y-axis [-40.0] now;
	move turret1 to y-axis [20.0] now;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
	call-script Stop();
	set ARMORED to 0;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret1 to y-axis heading speed <200.000000>;
	turn turret2 to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 from flare;
}

AimFromPrimary(piecenum)
{
	piecenum = aim;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		else
		{
			corpsetype = 2;
		}
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode door3 type BITMAPONLY | BITMAP5;
		explode door4 type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP2;
		explode stand type BITMAPONLY | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		else
		{
			corpsetype = 2;
		}
		explode barrel type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP4;
		explode door3 type FALL | BITMAP5;
		explode door4 type FALL | BITMAP1;
		explode flare type FALL | BITMAP2;
		explode stand type BITMAPONLY | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 4;
		}
		else
		{
			corpsetype = 3;
		}
		explode barrel type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode stand type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 4;
	explode barrel type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode stand type BITMAPONLY | BITMAP3;
	explode turret1 type BITMAPONLY | BITMAP4;
	explode turret2 type BITMAPONLY | BITMAP5;
}
