#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  weapon1, weapon2, base, wake1, wake2, lwing, rwing;

static-var  gun_1, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	turn lwing to y-axis <0.000000> now;
	turn lwing to y-axis <41.000000> speed <60.000000>;
	turn rwing to y-axis <0.000000> now;
	turn rwing to y-axis <-41.000000> speed <60.000000>;
	sleep 690;
}

deactivatescr()
{
	turn lwing to y-axis <41.000000> now;
	turn lwing to y-axis <0.000000> speed <42.000000>;
	turn rwing to y-axis <-41.000000> now;
	turn rwing to y-axis <0.000000> speed <42.000000>;
	sleep 990;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

moverate2()
{
	if( Rand( 1, 10 ) == 1 AND ( !Static_Var_3 ) )
	{
		Static_Var_3 = 1;
		turn base to z-axis <240.000000> speed <120.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.000000> speed <180.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.000000>;
		Static_Var_3 = 0;
	}
}

Create()
{
	gun_1 = weapon1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_2 == 3 )
		{
			emit-sfx 259 from wake1;
			emit-sfx 259 from wake2;
			emit-sfx 259 from weapon1;
			emit-sfx 259 from weapon2;
			emit-sfx 259 from lwing;
			emit-sfx 259 from rwing;
			emit-sfx 259 from base;
		}
		sleep 150;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

FirePrimary()
{
	gun_1 = !gun_1;
}

QueryPrimary(piecenum)
{
	if( gun_1 )
	{
		piecenum = weapon2;
	}
	else
	{
		piecenum = weapon1;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode weapon1 type BITMAPONLY | BITMAP3;
		explode weapon2 type BITMAPONLY | BITMAP4;
		explode lwing type BITMAPONLY | BITMAP5;
		explode rwing type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP2;
		explode wake2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode weapon1 type FALL | BITMAP3;
		explode weapon2 type FALL | BITMAP4;
		explode lwing type BITMAPONLY | BITMAP5;
		explode rwing type BITMAPONLY | BITMAP1;
		explode wake1 type FALL | BITMAP2;
		explode wake2 type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode weapon1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode weapon2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lwing type BITMAPONLY | BITMAP5;
		explode rwing type BITMAPONLY | BITMAP1;
		explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode wake2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode weapon1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode weapon2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode lwing type BITMAPONLY | BITMAP5;
	explode rwing type BITMAPONLY | BITMAP1;
	explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode wake2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
}

setsfxoccupy(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
}
