#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, barrel, rwheel, mwheel, fwheel;

static-var  restore_delay, oldheading;

// Signal definitions
#define SIG_AIM		2
#define SIG_MOVE 	4

Steering(heading, steer, currentSpeed)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while(1)
	{
		heading = get HEADING;
		steer = heading - oldheading;
		turn fwheel to y-axis steer*2 speed <180>;	
		turn mwheel to y-axis steer speed <180>;	
		currentSpeed = <5> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <125>) currentSpeed = <125>;
		spin rwheel around x-axis speed currentSpeed*2/3;
		spin mwheel around x-axis speed currentSpeed;
		spin fwheel around x-axis speed currentSpeed;
		sleep 66;
		oldheading = heading;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	restore_delay = 3000;
	oldheading = get HEADING;
	move fwheel to z-axis [1] now;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <90.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <240.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = barrel;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartMoving()
{
	start-script Steering();
}

StopMoving()
{
	signal SIG_MOVE;
	stop-spin rwheel around x-axis;
	stop-spin mwheel around x-axis;
	stop-spin fwheel around x-axis;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP2;
		explode rwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode mwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode mwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode mwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type SHATTER | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode mwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
