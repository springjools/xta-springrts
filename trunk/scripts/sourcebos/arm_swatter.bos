#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  GP, Base, Box, Flare1, Flare2, Flare3, Wake1, Wake2,
       Wake3, Wake4, Wake5, Wake6, Wake7, Wake8, exhaust;

static-var  gun_1, restore_delay, Static_Var_3, bAiming, Static_Var_5,
            Static_Var_6;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4


BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(Base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= [1.000000] )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 2;
		}
		turn Base to z-axis Func_Var_3 speed <45.000000>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
}

WobbleUnit()
{
	while( TRUE )
	{
		move Base to y-axis [0.800000] speed [1.000000];
		wait-for-move Base along y-axis;
		move Base to y-axis [1.800000] speed [1.000000];
		wait-for-move Base along y-axis;
	}
}

TurretManager()
{
	while( TRUE )
	{
		if( bAiming != Static_Var_3 )
		{
			if( bAiming )
			{
				Static_Var_3 = 2;
				move Box to y-axis [0.000000] now;
				move Box to y-axis [2.000000] speed [14.000000];
				move Box to z-axis [0.000000] now;
				move Box to z-axis [-1.000000] speed [5.000000];
				turn Base to x-axis <0.000000> now;
				turn Base to x-axis <-2.000000> speed <15.000000>;
				turn Box to x-axis <0.000000> now;
				turn Box to x-axis <23.000000> speed <174.000000>;
				sleep 135;
				move Box to y-axis [3.000000] speed [7.000000];
				turn Base to x-axis <0.000000> speed <15.000000>;
				turn Box to x-axis <0.000000> speed <171.000000>;
				sleep 137;
				move Box to y-axis [3.000000] speed [4.000000];
				move Box to z-axis [2.000000] speed [21.000000];
				sleep 144;
				Static_Var_3 = 1;
			}
			else
			{
				Static_Var_3 = 2;
				move Box to y-axis [3.000000] now;
				move Box to y-axis [3.000000] speed [3.000000];
				move Box to z-axis [2.000000] now;
				move Box to z-axis [-1.000000] speed [19.000000];
				turn Box to x-axis <0.000000> now;
				sleep 150;
				move Box to y-axis [2.000000] speed [6.000000];
				turn Base to x-axis <-2.000000> speed <14.000000>;
				turn Box to x-axis <24.000000> speed <157.000000>;
				sleep 150;
				move Box to y-axis [0.000000] speed [13.000000];
				move Box to z-axis [0.000000] speed [4.000000];
				turn Base to x-axis <0.000000> speed <14.000000>;
				turn Box to x-axis <0.000000> speed <156.000000>;
				sleep 151;
				Static_Var_3 = 0;
			}
		}
		sleep 200;
	}
}

RockUnit(anglex, anglez)
{
	turn Base to x-axis <0.010989> * anglex speed <50.005495>;
	turn Base to z-axis <0.010989> * anglez speed <50.005495>;
	wait-for-turn Base around z-axis;
	wait-for-turn Base around x-axis;
	turn Base to z-axis <0.000000> speed <20.000000>;
	turn Base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn Base to z-axis <0.010989> * Func_Var_2 speed <105.016484>;
	turn Base to x-axis <0.010989> * Func_Var_1 speed <105.016484>;
	wait-for-turn Base around z-axis;
	wait-for-turn Base around x-axis;
	turn Base to z-axis <0.000000> speed <30.005495>;
	turn Base to x-axis <0.000000> speed <30.005495>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script TurretManager();
	start-script WobbleUnit();
	start-script BankClerck();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_5 <= 2 )
		{
			emit-sfx 5 from Wake1;
			emit-sfx 5 from Wake2;
			emit-sfx 5 from Wake3;
			emit-sfx 5 from Wake4;
			emit-sfx 5 from Wake5;
			emit-sfx 5 from Wake6;
			emit-sfx 5 from Wake7;
			emit-sfx 5 from Wake8;
			emit-sfx 3 from Wake1;
			emit-sfx 3 from Wake2;
			emit-sfx 3 from Wake3;
			emit-sfx 3 from Wake4;
			emit-sfx 3 from Wake5;
			emit-sfx 3 from Wake6;
			emit-sfx 3 from Wake7;
			emit-sfx 3 from Wake8;
		}
		sleep 300;
	}
}

StopMoving(Func_Var_1)
{
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_5 = Func_Var_1;
}

Create()
{
	hide exhaust;
	restore_delay = 3000;
	gun_1 = 0;
	Static_Var_3 = 0;
	bAiming = FALSE;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn Box to y-axis <0.000000> speed <250.000000>;
	wait-for-turn Box around y-axis;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	while( Static_Var_3 != 1 )
	{
		sleep 200;
	}
	turn Box to y-axis heading speed <250.000000>;
	wait-for-turn Box around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx UNIT_SFX1 from exhaust;
	++gun_1;
	if( gun_1 == 3 ) gun_1 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = Box;
}

QueryPrimary(piecenum)
{
	piecenum = Flare1 + gun_1;
}

SweetSpot(piecenum)
{
	piecenum = Base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		if( Static_Var_5 <= 2 )
		{
			corpsetype = 1;
		}
		if( Static_Var_5 > 2 )
		{
			corpsetype = 2;
		}
		explode Base type BITMAPONLY | BITMAP1;
		explode Box type SHATTER | BITMAP2;
		explode Flare1 type FALL | BITMAP3;
		explode Flare1 type FALL | BITMAP4;
		explode Flare1 type FALL | BITMAP5;
		return;
	}
	if( severity <= 50 )
	{
		corpsetype = 3;
		explode Base type BITMAPONLY | BITMAP1;
		explode Box type SHATTER | BITMAP2;
		explode Flare1 type FALL | BITMAP3;
		explode Flare1 type FALL | BITMAP4;
		explode Flare1 type FALL | BITMAP5;
		return;
	}
	if( severity <= 99 )
	{
		corpsetype = 4;
		explode Base type BITMAPONLY | BITMAP1;
		explode Box type SHATTER | BITMAP2;
		explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return;
	}
	corpsetype = 4;
	explode Base type BITMAPONLY | BITMAP1;
	explode Box type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
