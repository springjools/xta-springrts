#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, platform, door1, door2, plate1,
       plate2, nano2, nano1, ground, ignite1, ignite2, ignite3, ignite4;

static-var  spray, statechg_DesiredState, statechg_StateChanging, building, floating;

// Signal definitions
#define SIG_ACTIVATE			2

SetDirection(heading)
{
	var spd;
	spd = get ABS(heading);
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
}

RockOnWaves()
{
	while(floating)
	{
		turn ground to x-axis <1.0> speed <1.0>;
		move ground to y-axis [0.2] speed [0.2];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <-1.0> speed <1.0>;
		move ground to y-axis [0.0] speed [0.2];
		wait-for-move ground along y-axis;
		move ground to y-axis [0.2] speed [0.2];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <1.0> speed <1.0>;
		move ground to y-axis [0.0] speed [0.2];
		wait-for-move ground along y-axis;
	}
}

Build()
{
	while( building )
	{
		emit-sfx UNIT_SFX1 from beam1;
		emit-sfx UNIT_SFX1 from beam2;
		sleep 100;
	}
}

activatescr()
{
	move base to y-axis [0.000000] now;
	move platform to y-axis [0.000000] now;
	move base to y-axis [4.65000] speed [5.369397];
	move platform to y-axis [7.650000] speed [15.369397];
	sleep 758;
	floating = 1;
	start-script RockOnWaves();
	set ARMORED to 0;

	turn door1 to z-axis <-90.016484> speed <231.412088>;
	turn door2 to z-axis <90.016484> speed <231.412088>;
	sleep 389;

	move door1 to y-axis [-7.400000] speed [19.023151];
	move door2 to y-axis [-7.300000] speed [18.766077];
	sleep 389;

	move plate1 to y-axis [10.000000] speed [25.641034];
	move plate2 to y-axis [10.000000] speed [25.641034];
	sleep 390;

	move nano2 to y-axis [5.600000] speed [14.285718];
	move nano1 to y-axis [5.599994] speed [14.285712];
	sleep 392;

	turn nano2 to z-axis <115.368132> speed <297.346154>;
	turn nano1 to z-axis <-115.368132> speed <297.346154>;
	sleep 815;
}

deactivatescr()
{
	move base to y-axis [4.650000] now;
	move platform to y-axis [8.650000] now;
	move plate1 to y-axis [10.000000] now;
	move door1 to y-axis [-7.400000] now;
	move plate2 to y-axis [10.000000] now;
	move door2 to y-axis [-7.300000] now;
	move nano2 to y-axis [5.600000] now;
	move nano1 to y-axis [5.599994] now;
	turn door1 to z-axis <-90.016484> now;
	turn door2 to z-axis <90.016484> now;
	turn nano2 to z-axis <115.368132> now;
	turn nano2 to z-axis <0.000000> speed <246.516484>;
	turn nano1 to z-axis <-115.368132> now;
	turn nano1 to z-axis <0.000000> speed <246.516484>;
	sleep 468;

	move nano2 to y-axis [0.000000] speed [11.889600];
	move nano1 to y-axis [0.000000] speed [11.889594];
	sleep 471;

	move plate1 to y-axis [0.000000] speed [21.231421];
	move plate2 to y-axis [0.000000] speed [21.231421];
	sleep 471;

	move door1 to y-axis [0.000000] speed [15.677979];
	move door2 to y-axis [0.000000] speed [15.466101];
	sleep 472;

	turn door1 to z-axis <0.000000> speed <189.912088>;
	turn door2 to z-axis <0.000000> speed <189.912088>;
	sleep 474;

	move base to y-axis [0.000000] speed [5.349146];
	move platform to y-axis [0.000000] speed [15.349146];
	floating = 0;
	set ARMORED to 1;
	sleep 806;
}

FlameControl(Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_3 = get HEALTH;
		if( (Func_Var_3 <= 80) AND floating)
		{
			emit-sfx UNIT_SFX2 from ignite1;
			if( Func_Var_3 <= 60 ){
				emit-sfx UNIT_SFX2 from ignite2;
				if( Func_Var_3 <= 40 ){
					emit-sfx UNIT_SFX2 from ignite3;
					if( Func_Var_3 <= 20 )	emit-sfx UNIT_SFX2 from ignite4;
				}
			}
			sleep 66;
		}
		else
		{
			sleep 333;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script FlameControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache pad;
	dont-cache plate1;
	dont-cache plate2;
	dont-cache platform;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache door1;
	cache door2;
	cache nano1;
	cache nano2;
	cache pad;
	cache plate1;
	cache plate2;
	cache platform;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	dont-shade plate1;
	dont-shade plate2;
	dont-shade platform;
	hide ignite1;
	hide ignite2;
	hide ignite3;
	hide ignite4;
	spray = base;
	set ARMORED to 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray )
	{
		piecenum = beam2;
	}
	else
	{
		piecenum = beam1;
	}
	spray = !spray;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.005495>;
	building = 1;
	start-script Build();
}

StopBuilding()
{
	stop-spin pad around y-axis;
	building = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode plate1 type BITMAPONLY | BITMAP4;
		explode plate2 type BITMAPONLY | BITMAP5;
		explode platform type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode plate1 type BITMAPONLY | BITMAP4;
		explode plate2 type BITMAPONLY | BITMAP5;
		explode platform type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode plate1 type BITMAPONLY | BITMAP4;
		explode plate2 type BITMAPONLY | BITMAP5;
		explode platform type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type BITMAPONLY | BITMAP2;
	explode beam2 type BITMAPONLY | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode nano1 type BITMAPONLY | BITMAP1;
	explode nano2 type BITMAPONLY | BITMAP2;
	explode pad type BITMAPONLY | BITMAP3;
	explode plate1 type BITMAPONLY | BITMAP4;
	explode plate2 type BITMAPONLY | BITMAP5;
	explode platform type BITMAPONLY | BITMAP1;
}
