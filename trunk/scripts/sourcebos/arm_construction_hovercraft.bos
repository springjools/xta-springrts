#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD		4	

piece  base, beam, nanogun, door1, door2, plate, post, wake1,
       wake2, wake3, wake4, wake5, wake6, wake7, wake8, turret;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, Static_Var_5,
            Static_Var_7, notBuilding;

// Signal definitions
#define SIG_MOVE			2


BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= [2.500000] )
		{
			Func_Var_3 = (0 - get XZ_ATAN(Func_Var_2 - Func_Var_1))/16 ;
		}
		turn base to z-axis Func_Var_3 speed <45.000000>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
}

WobbleUnit()
{
	while( TRUE )
	{
		if( Static_Var_7 )
		{
			move base to y-axis [4.500000] speed [2.500000];
		}
		else
		{
			move base to y-axis [2.000000] speed [2.500000];
		}
		Static_Var_7 = !Static_Var_7;
		sleep 750;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis <0.010989> * anglex speed <50.005495>;
	turn base to z-axis <0.010989> * anglez speed <50.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis <0.010989> * Func_Var_2 speed <105.016484>;
	turn base to x-axis <0.010989> * Func_Var_1 speed <105.016484>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

Build()
{
	set-signal-mask SIG_BUILD;
	while( TRUE )
	{
		emit-sfx UNIT_SFX1 from beam;
		sleep 100;
	}
}

activatescr()
{
	turn door1 to z-axis <0.000000> now;
	turn door1 to z-axis <-67.192308> speed <300.000000>;
	turn door2 to z-axis <0.000000> now;
	turn door2 to z-axis <67.192308> speed <300.000000>;
	sleep 225;

	move door1 to y-axis [-5.000000] speed [22.500000];
	move door2 to y-axis [-5.000000] speed [22.500000];
	move plate to y-axis [10.000000] speed [45.000000];
	sleep 210;

	turn post to x-axis <90.000000> speed <400.000000>;
	turn nanogun to x-axis <-90.000000> speed <400.000000>;
	sleep 150;

	set INBUILDSTANCE to 1;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.000000>;
	wait-for-turn turret around y-axis;

	move door1 to y-axis [-5.000000] now;
	move door2 to y-axis [-5.000000] now;
	move plate to y-axis [10.000000] now;
	turn door1 to z-axis <-90.016484> now;
	turn door2 to z-axis <90.016484> now;
	turn post to x-axis <90.016484> now;
	turn post to x-axis <0.000000> speed <600.000000>;
	turn nanogun to x-axis <-90.016484> now;
	turn nanogun to x-axis <0.000000> speed <600.000000>;
	sleep 150;

	move door1 to y-axis [0.000000] speed [30.000000];
	move door2 to y-axis [0.000000] speed [30.000000];
	move plate to y-axis [0.000000] speed [67.500000];
	sleep 150;

	turn door1 to z-axis <0.000000> speed <750.000000>;
	turn door2 to z-axis <0.000000> speed <750.000000>;
	sleep 150;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script WobbleUnit();
	start-script BankClerck();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 <= 2 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

/*
Go()
{
	call-script activatescr();
	turn turret to y-axis Static_Var_2 speed <160.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.000000>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
}
*/

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_5 = 1;
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn turret to y-axis heading speed <160.000000>;
	wait-for-turn turret around y-axis;
	start-script Build();
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		if( Static_Var_1 <= 2 )
		{
			Static_Var_5 = 0;
			corpsetype = 1;
		}
		if( Static_Var_5 )
		{
			corpsetype = 2;
		}
		explode post type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 3;
		explode post type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 4;
		explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 4;
	explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode nanogun type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode plate type BITMAPONLY | BITMAP2;
}
