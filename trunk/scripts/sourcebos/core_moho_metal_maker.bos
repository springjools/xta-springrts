#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flap2, flap3, flap4, flap1, topcap, glowingthing;

static-var  mmState;

#define OPERATING 1024


activatescr()
{
	turn flap3 to z-axis <-69.296703> speed <261.697802>;
	sleep 265;

	turn flap2 to x-axis <-4.895604> speed <18.296703>;
	turn flap4 to x-axis <-86.395604> speed <324.697802>;
	sleep 266;

	turn flap2 to z-axis <69.296703> speed <260.697802>;
	sleep 266;

	turn flap1 to x-axis <89.395604> speed <336.098901>;
	sleep 266;

	set ARMORED to 0;
	turn topcap to y-axis <45.000000> speed <169.197802>;
	sleep 266;

	move topcap to y-axis [-40.250000] speed [150.250000];
	sleep 267;

	turn topcap to z-axis <-180.000000> speed <676.895604>;
	sleep 266;

	move topcap to y-axis [-1.750000] speed [144.250000];
	sleep 266;
}

deactivatescr()
{
	move topcap to y-axis [-40.250000] speed [144.750000];
	sleep 265;

	turn topcap to z-axis <0.000000> speed <676.895604>;
	sleep 266;

	move topcap to y-axis [0.000000] speed [150.750000];
	sleep 266;

	turn topcap to y-axis <0.000000> speed <169.197802>;
	sleep 266;

	turn flap1 to x-axis <0.000000> speed <334.895604>;
	sleep 267;

	turn flap2 to z-axis <0.000000> speed <260.697802>;
	sleep 266;

	turn flap2 to x-axis <0.000000> speed <18.296703>;
	turn flap4 to x-axis <0.000000> speed <324.697802>;
	sleep 266;

	turn flap3 to z-axis <0.000000> speed <260.697802>;
	sleep 266;
	set ARMORED to 1;
}

ImAMetalMaker()
{
	mmState = -1;
	while( TRUE )
	{
		if ((get OPERATING) == 1)
		{
			if (mmState != 1) {
				call-script activatescr();
				mmState = 1;
			}
		}
		else
		{
			if (mmState != 0) {
				call-script deactivatescr();
				mmState = 0;
			}
		}
		sleep 1000;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script ImAMetalMaker();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	dont-shade glowingthing;
	dont-cache glowingthing;
	dont-shade base;
	dont-shade flap1;
	dont-shade flap2;
	dont-shade flap3;
	dont-shade flap4;
	dont-shade topcap;
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type BITMAPONLY | BITMAP2;
		explode flap1 type BITMAPONLY | BITMAP3;
		explode flap2 type BITMAPONLY | BITMAP4;
		explode flap3 type BITMAPONLY | BITMAP5;
		explode flap4 type BITMAPONLY | BITMAP1;
		explode topcap type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type SHATTER | BITMAP2;
		explode flap1 type FALL | BITMAP3;
		explode flap2 type FALL | BITMAP4;
		explode flap3 type FALL | BITMAP5;
		explode flap4 type FALL | BITMAP1;
		explode topcap type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type SHATTER | BITMAP2;
		explode flap1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flap2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flap3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flap4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode topcap type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode glowingthing type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode flap1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flap2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flap3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flap4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode topcap type BITMAPONLY | BITMAP2;
}
