#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, styrhytt, hytt, gaffel, wake1, wake2, Fire, ground;

// Signal definitions
#define SIG_MOVE			16

SetDirection(heading)
{
	var spd;
	spd = get ABS(heading);
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
}

RockOnWaves()
{
	while(1)
	{
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [0.0] speed [0.15];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <-1.0> speed <1.5>;
		move ground to y-axis [-0.1] speed [0.15];
		wait-for-move ground along y-axis;
		move ground to y-axis [0.0] speed [0.15];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [-0.1] speed [0.15];
		wait-for-move ground along y-axis;
	}
}

FlameControl(Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_3 = get HEALTH;
		if( Func_Var_3 <= 60 )
		{
			emit-sfx UNIT_SFX1 from styrhytt;
			if( Func_Var_3 <= 30 )	emit-sfx UNIT_SFX1 from hytt;
			sleep 66;
		}
		else
		{
			sleep 333;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script FlameControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	dont-shade gaffel;
	start-script SmokeUnit();
	start-script RockOnWaves();
}

Activate()
{
	spin gaffel around z-axis speed <100.000000>;
}

Deactivate()
{
	spin gaffel around z-axis speed <0.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if (waketime < 50) waketime = 50;
		sleep 20000/waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimFromPrimary(piecenum)
{
	piecenum = Fire;
}

QueryPrimary(piecenum)
{
	piecenum = Fire;
}

AimPrimary(heading, pitch)
{
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode gaffel type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode gaffel type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode gaffel type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode gaffel type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}