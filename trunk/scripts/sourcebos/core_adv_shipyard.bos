#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam1, beam2, blinks, gun1, gun2, explodpt1, explodpt2,
       explodpt3, explodpt4, blight1, blight2, ground;

static-var  spray, statechg_DesiredState, statechg_StateChanging, building;

// Signal definitions
#define SIG_ACTIVATE			2

SetDirection(heading)
{
	var spd;
	spd = get ABS(heading);
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
}

RockOnWaves()
{
	while(1)
	{
		turn ground to x-axis <1.0> speed <1.0>;
		move ground to y-axis [0.2] speed [0.2];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <-1.0> speed <1.0>;
		move ground to y-axis [0.0] speed [0.2];
		wait-for-move ground along y-axis;
		move ground to y-axis [0.2] speed [0.2];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <1.0> speed <1.0>;
		move ground to y-axis [0.0] speed [0.2];
		wait-for-move ground along y-axis;
	}
}

Standby()
{
	while( TRUE )
	{
		emit-sfx UNIT_SFX2 from blight1;
		emit-sfx UNIT_SFX2 from blight2;
		sleep 700;
	}
}

Build()
{
	while( building )
	{
		emit-sfx UNIT_SFX1 from beam1;
		emit-sfx UNIT_SFX1 from beam2;
		sleep 100;
	}
}

activatescr()
{
	turn gun1 to z-axis <0.000000> now;
	turn gun1 to z-axis <-89.747253> speed <60.071429>;
	turn gun2 to z-axis <0.000000> now;
	turn gun2 to z-axis <89.747253> speed <60.071429>;
	sleep 1502;
}

deactivatescr()
{
	turn gun1 to z-axis <-89.747253> now;
	turn gun1 to z-axis <0.000000> speed <60.357143>;
	turn gun2 to z-axis <89.747253> now;
	turn gun2 to z-axis <0.000000> speed <60.357143>;
	sleep 1498;
}

FlameControl(Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_3 = get HEALTH;
		if( Func_Var_3 <= 47 )
		{
			emit-sfx UNIT_SFX3 from explodpt1;
			if( Func_Var_3 <= 23 )	emit-sfx UNIT_SFX3 from explodpt2;
			sleep 66;
		}
		else
		{
			sleep 333;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script Standby();
	start-script FlameControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache gun1;
	dont-cache gun2;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache gun1;
	cache gun2;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( !statechg_DesiredState )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade blinks;
	dont-cache blinks;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade base;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
	start-script RockOnWaves();
}

QueryNanoPiece(piecenum)
{
	if( spray )
	{
		piecenum = beam2;
	}
	else
	{
		piecenum = beam1;
	}
	spray = !spray;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	building = 1;
	start-script Build();
}

StopBuilding()
{
	building = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = base;
}

SweetSpot(piecenum)
{
	piecenum = blinks;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode blinks type BITMAPONLY | BITMAP4;
		explode gun1 type BITMAPONLY | BITMAP5;
		explode gun2 type BITMAPONLY | BITMAP1;
		explode explodpt1 type BITMAPONLY | BITMAP1;
		explode explodpt2 type BITMAPONLY | BITMAP2;
		explode explodpt3 type BITMAPONLY | BITMAP3;
		explode explodpt4 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode beam1 type FALL | BITMAP2;
		explode beam2 type FALL | BITMAP3;
		explode blinks type SHATTER | BITMAP4;
		explode gun1 type FALL | BITMAP5;
		explode gun2 type SHATTER | BITMAP1;
		explode explodpt1 type FALL | BITMAP1;
		explode explodpt2 type FALL | BITMAP2;
		explode explodpt3 type FALL | BITMAP3;
		explode explodpt4 type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode blinks type SHATTER | BITMAP4;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gun2 type SHATTER | BITMAP1;
		explode explodpt1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode explodpt2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode explodpt3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode explodpt4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode blinks type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gun2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode explodpt1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode explodpt2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode explodpt3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode explodpt4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
