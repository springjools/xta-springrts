#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD		4	

piece  base, beam, door1, door2, plate, arm, nano, turret;

static-var  statechg_DesiredState, statechg_StateChanging, notBuilding;


Build()
{
	set-signal-mask SIG_BUILD;
	while( TRUE )
	{
		emit-sfx UNIT_SFX1 from beam;
		sleep 100;
	}
}

activatescr()
{
	turn door1 to z-axis <0.000000> now;
	turn door1 to z-axis <-70.659341> speed <540.000000>;
	turn door2 to z-axis <0.000000> now;
	turn door2 to z-axis <70.659341> speed <540.000000>;
	sleep 130;

	move door1 to y-axis [-5.875000] speed [45.000000];
	move door2 to y-axis [-5.625000] speed [45.000000];
	sleep 130;

	move plate to y-axis [11.125000] speed [82.500000];
	sleep 130;

	turn arm to x-axis <90.016484> speed <690.000000>;
	turn nano to x-axis <-66.159341> speed <510.000000>;
	sleep 130;
	
	set INBUILDSTANCE to 1;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;

	move plate to y-axis [11.125000] now;
	move door1 to y-axis [-5.875000] now;
	move door2 to y-axis [-5.625000] now;
	turn door1 to z-axis <-70.659341> now;
	turn door2 to z-axis <70.659341> now;
	turn arm to x-axis <90.016484> now;
	turn arm to x-axis <0.000000> speed <690.000000>;
	turn nano to x-axis <-66.159341> now;
	turn nano to x-axis <0.000000> speed <510.000000>;
	turn turret to y-axis <0.000000> speed <480.000000>;
	sleep 130;

	move plate to y-axis [0.000000] speed [85.000000];
	sleep 130;

	move door1 to y-axis [0.000000] speed [45.000000];
	move door2 to y-axis [0.000000] speed [45.000000];
	sleep 130;

	turn door1 to z-axis <0.000000> speed <540.000000>;
	turn door2 to z-axis <0.000000> speed <540.000000>;
	sleep 130;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*
Go()
{
	call-script activatescr();
	turn turret to y-axis Static_Var_1 speed <480.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <480.000000>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
}
*/

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn turret to y-axis heading speed <480.000000>;
	wait-for-turn turret around y-axis;
	start-script Build();
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode turret type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode turret type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode nano type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode plate type BITMAPONLY | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
