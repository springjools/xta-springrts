#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, arm, tower, wake1, wake2, wake3, wake4, wake5,
       wake6, wake7, wake8, rdoor, ldoor, boom1, boom2, boom3,
       boom4, magnet, link, boom5, boom6;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;

// Signal definitions
#define SIG_MOVE			2


BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= [2.500000] )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 20 / 10;
		}
		turn base to z-axis Func_Var_3 speed <45.000000>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
}

WobbleUnit()
{
	while( TRUE )
	{
		if( Static_Var_6 == 1 )
		{
			move base to y-axis [4.500000] speed [2.500000];
		}
		if( Static_Var_6 == 0 )
		{
			move base to y-axis [2.000000] speed [2.500000];
		}
		Static_Var_6 = !Static_Var_6;
		sleep 750;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis <0.010989> * anglex speed <50.005495>;
	turn base to z-axis <0.010989> * anglez speed <50.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis <0.010989> * Func_Var_2 speed <105.016484>;
	turn base to x-axis <0.010989> * Func_Var_1 speed <105.016484>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		sleep 500;
	}
	start-script WobbleUnit();
	start-script BankClerck();
	while( TRUE )
	{
		healthpercent = 4;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 2 OR Static_Var_1 == 1 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartDoorOpen()
{
	signal 4;
	set-signal-mask 4;
	turn rdoor to z-axis <-90.000000> speed <100.000000>;
	turn ldoor to z-axis <90.000000> speed <100.000000>;
	wait-for-turn rdoor around z-axis;
	wait-for-turn ldoor around z-axis;
	move rdoor to y-axis [-22.500000] speed [62.500000];
	move ldoor to y-axis [-22.500000] speed [62.500000];
	wait-for-move ldoor along y-axis;
	wait-for-move ldoor along y-axis;
	sleep 5000;
	move rdoor to y-axis [0.000000] speed [62.500000];
	move ldoor to y-axis [0.000000] speed [62.500000];
	wait-for-move rdoor along y-axis;
	wait-for-move ldoor along y-axis;
	turn rdoor to z-axis <0.000000> speed <100.000000>;
	turn ldoor to z-axis <0.000000> speed <100.000000>;
	wait-for-turn rdoor around z-axis;
	wait-for-turn ldoor around z-axis;
}

BoomCalc(posxz, posy)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(tower) - posxz;
	Func_Var_4 = posy - get PIECE_Y(tower) - [50.000000];
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	Static_Var_2 = (get HYPOT(Func_Var_5,Func_Var_4) - [50.000000]) / 6;
	Static_Var_3 = get XZ_ATAN(Func_Var_3);
	Static_Var_4 = get ATAN(Func_Var_4,Func_Var_5);
	Static_Var_5 = Static_Var_2 < [225.000000];
}

BoomExtend()
{
	start-script StartDoorOpen();
	turn magnet to x-axis Static_Var_4 speed <40.000000>;
	turn arm to x-axis <0.000000> - Static_Var_4 speed <40.000000>;
	turn tower to y-axis Static_Var_3 speed <120.000000>;
	wait-for-turn arm around x-axis;
	wait-for-turn magnet around x-axis;
	wait-for-turn tower around y-axis;
	move boom1 to z-axis Static_Var_2 speed [50.000000];
	move boom2 to z-axis Static_Var_2 speed [50.000000];
	move boom3 to z-axis Static_Var_2 speed [50.000000];
	move boom4 to z-axis Static_Var_2 speed [50.000000];
	move boom5 to z-axis Static_Var_2 speed [50.000000];
	move boom6 to z-axis Static_Var_2 speed [50.000000];
	wait-for-move boom1 along z-axis;
}

BoomReset()
{
	turn arm to x-axis <0.000000> speed <40.000000>;
	turn magnet to x-axis <0.000000> speed <40.000000>;
	wait-for-turn arm around x-axis;
	wait-for-turn magnet around x-axis;
	turn tower to y-axis <0.000000> speed <120.000000>;
	move boom1 to z-axis [0.000000] speed [50.000000];
	move boom2 to z-axis [0.000000] speed [50.000000];
	move boom3 to z-axis [0.000000] speed [50.000000];
	move boom4 to z-axis [0.000000] speed [50.000000];
	move boom5 to z-axis [0.000000] speed [50.000000];
	move boom6 to z-axis [0.000000] speed [50.000000];
}

BoomToPad()
{
	start-script StartDoorOpen();
	turn magnet to x-axis <0.000000> speed <40.000000>;
	turn arm to x-axis <0.000000> speed <40.000000>;
	turn tower to y-axis <0.000000> speed <120.000000>;
	wait-for-turn magnet around x-axis;
	wait-for-turn arm around x-axis;
	wait-for-turn tower around y-axis;
	move boom1 to z-axis [0.000000] speed [50.000000];
	move boom2 to z-axis [0.000000] speed [50.000000];
	move boom3 to z-axis [0.000000] speed [50.000000];
	move boom4 to z-axis [0.000000] speed [50.000000];
	move boom5 to z-axis [0.000000] speed [50.000000];
	move boom6 to z-axis [0.000000] speed [50.000000];
	wait-for-move boom1 along z-axis;
	turn magnet to x-axis <-30.000000> speed <40.000000>;
	turn arm to x-axis <30.000000> speed <40.000000>;
	wait-for-turn arm around x-axis;
}

TransportPickup(unitid)
{
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + get UNIT_HEIGHT(unitid));
	if( Static_Var_5 )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomToPad();
		attach-unit unitid to 0 - 1;
		call-script BoomReset();
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	call-script BoomCalc(position,get GROUND_HEIGHT(position) + get UNIT_HEIGHT(unitid));
	if( Static_Var_5 )
	{
		set BUSY to 1;
		call-script BoomToPad();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomExtend();
		drop-unit unitid;
		call-script BoomReset();
		set BUSY to 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode boom1 type BITMAPONLY | BITMAP1;
		explode boom2 type BITMAPONLY | BITMAP2;
		explode boom3 type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP3;
		explode rdoor type BITMAPONLY | BITMAP4;
		explode ldoor type BITMAPONLY | BITMAP5;
		explode link type BITMAPONLY | BITMAP1;
		explode arm type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode boom1 type BITMAPONLY | BITMAP1;
		explode boom2 type SHATTER | BITMAP2;
		explode boom3 type SHATTER | BITMAP4;
		explode base type BITMAPONLY | BITMAP3;
		explode rdoor type BITMAPONLY | BITMAP4;
		explode ldoor type BITMAPONLY | BITMAP5;
		explode link type FALL | BITMAP1;
		explode arm type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode boom1 type BITMAPONLY | BITMAP1;
		explode boom2 type SHATTER | BITMAP2;
		explode boom3 type SHATTER | BITMAP4;
		explode base type BITMAPONLY | BITMAP3;
		explode rdoor type BITMAPONLY | BITMAP4;
		explode ldoor type BITMAPONLY | BITMAP5;
		explode link type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode arm type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode boom1 type BITMAPONLY | BITMAP1;
	explode boom2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode boom3 type SHATTER | BITMAP4;
	explode base type BITMAPONLY | BITMAP3;
	explode rdoor type BITMAPONLY | BITMAP4;
	explode ldoor type BITMAPONLY | BITMAP5;
	explode link type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode arm type BITMAPONLY | BITMAP2;
}
