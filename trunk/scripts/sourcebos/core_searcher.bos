#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece flare1, flare2, base, turret, missile, sleeve, wake1, wake2,
	  barrel1, barrel2, gun, SHIT1, SHIT2, exhaust, ground, ignite1, ignite2;

static-var  gun_1, restore_delay, gun_3;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM3			8

SetDirection(heading)
{
	var spd;
	spd = get ABS(heading);
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
}

RockOnWaves()
{
	while(1)
	{
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [0.0] speed [0.15];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <-1.0> speed <1.5>;
		move ground to y-axis [-0.1] speed [0.15];
		wait-for-move ground along y-axis;
		move ground to y-axis [0.0] speed [0.15];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [-0.1] speed [0.15];
		wait-for-move ground along y-axis;
	}
}

FlameControl(Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_3 = get HEALTH;
		if( Func_Var_3 <= 60 )
		{
			emit-sfx UNIT_SFX2 from ignite1;
			if( Func_Var_3 <= 30 )	emit-sfx UNIT_SFX2 from ignite2;
			sleep 66;
		}
		else
		{
			sleep 333;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script FlameControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide SHIT1;
	hide SHIT2;
	hide exhaust;
	hide ignite1;
	hide ignite2;
	gun_1 = 0;
	gun_3 = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
	start-script RockOnWaves();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <150.000000>;
	turn sleeve to x-axis <0.000000> speed <150.000000>;
	turn missile to y-axis <0.000000> speed <150.000000>;
	turn gun to x-axis <0.000000> speed <100.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 4 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if (waketime < 50) waketime = 50;
		sleep 15000/waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <300.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <300.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 )
	{
		show flare2;
		move barrel2 to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.000000] speed [3.000000];
		sleep 150;
		hide flare2;
	}
	else
	{
		show flare1;
		move barrel1 to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [3.000000];
		sleep 150;
		hide flare1;
	}
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	turn missile to y-axis heading speed <250.000000>;
	turn gun to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn missile around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon3()
{
	emit-sfx UNIT_SFX1 from exhaust;
	/*
	if( Static_Var_3 )
	{
		emit-sfx UNIT_SFX1 from exhaust;
		sleep 150;
	}
	else
	{
		sleep 150;
	}
	*/
	gun_3 = !gun_3;
}

AimFromWeapon3(piecenum)
{
	piecenum = gun;
}

QueryWeapon3(piecenum)
{
	piecenum = SHIT1 + gun_3;
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
		explode wake1 type BITMAPONLY | BITMAP4;
		explode wake2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode turret type BITMAPONLY | BITMAP3;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
