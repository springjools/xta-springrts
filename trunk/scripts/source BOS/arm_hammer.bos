#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  pelvis, rfirept, lfirept, lcannon, rcannon, locase, lthigh, rthigh,
       torso, rleg, rfoot, lleg, lfoot, upcase2, canbase, ground;

static-var  gun_1, bMoving, bAiming, cantShoot, statechg_DesiredState, statechg_StateChanging,
            RackClosed, gun, restore_delay, moveSpeed, currentSpeed;

// Signal definitions
#define SIG_AIM				2


walk()
{
	if( bMoving )
	{
		move pelvis to y-axis [-1.250000] now;
		move lcannon to y-axis [0.000000] now;
		move lcannon to z-axis [0.000000] now;
		move rcannon to y-axis [0.000000] now;
		move rcannon to z-axis [0.000000] now;
		move locase to y-axis [0.000000] now;
		move rfirept to y-axis [-0.099930] now;
		move rfirept to z-axis [0.549957] now;
		move lfirept to y-axis [-0.099930] now;
		move lfirept to z-axis [0.549957] now;
		turn lthigh to x-axis <-62.945055> now;
		turn rthigh to x-axis <3.516484> now;
		turn torso to z-axis <-4.571429> now;
		turn rleg to x-axis <82.989011> now;
		turn rfoot to x-axis <-36.923077> now;
		turn lleg to x-axis <57.313187> now;
		turn lfoot to x-axis <5.269231> now;
		sleep 3500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.625000] now;
		turn lthigh to x-axis <-51.692308> now;
		turn rthigh to x-axis <-8.082418> now;
		turn torso to z-axis <0.000000> now;
		turn rleg to x-axis <105.846154> now;
		turn rfoot to x-axis <-27.071429> now;
		turn lleg to x-axis <45.357143> now;
		turn lfoot to x-axis <5.967033> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] now;
		turn lthigh to x-axis <-39.379121> now;
		turn rthigh to x-axis <-20.038462> now;
		turn rleg to x-axis <118.857143> now;
		turn lleg to x-axis <38.681319> now;
		turn lfoot to x-axis <1.049451> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		turn lthigh to x-axis <-29.181319> now;
		turn rthigh to x-axis <-30.236264> now;
		turn torso to z-axis <1.747253> now;
		turn rleg to x-axis <72.780220> now;
		turn rfoot to x-axis <-33.758242> now;
		turn lleg to x-axis <29.879121> now;
		turn lfoot to x-axis <-0.703297> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] now;
		turn lthigh to x-axis <-20.390110> now;
		turn rthigh to x-axis <-56.258242> now;
		turn torso to z-axis <7.736264> now;
		turn rleg to x-axis <58.368132> now;
		turn lleg to x-axis <41.137363> now;
		turn lfoot to x-axis <-21.093407> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.625000] now;
		turn lthigh to x-axis <-16.527473> now;
		turn rthigh to x-axis <-57.670330> now;
		turn torso to z-axis <9.846154> now;
		turn rleg to x-axis <-10.192308> now;
		turn lleg to x-axis <59.423077> now;
		turn lfoot to x-axis <-31.648352> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.000000] now;
		turn lthigh to x-axis <-4.571429> now;
		turn rthigh to x-axis <-65.401099> now;
		turn torso to z-axis <10.192308> now;
		turn rleg to x-axis <35.868132> now;
		turn lleg to x-axis <53.445055> now;
		turn lfoot to x-axis <-33.758242> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.250000] now;
		turn lthigh to x-axis <2.813187> now;
		turn rthigh to x-axis <-66.456044> now;
		turn torso to z-axis <7.027473> now;
		turn rleg to x-axis <43.247253> now;
		turn rfoot to x-axis <-7.736264> now;
		turn lleg to x-axis <57.313187> now;
		turn lfoot to x-axis <-29.538462> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.000000] now;
		turn lthigh to x-axis <5.269231> now;
		turn rthigh to x-axis <-61.538462> now;
		turn torso to z-axis <4.923077> now;
		turn rleg to x-axis <44.648352> now;
		turn rfoot to x-axis <16.879121> now;
		turn lleg to x-axis <78.412088> now;
		turn lfoot to x-axis <-34.802198> now;
		sleep 3500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.625000] now;
		turn lthigh to x-axis <-4.923077> now;
		turn rthigh to x-axis <-52.390110> now;
		turn torso to z-axis <0.000000> now;
		turn rleg to x-axis <43.247253> now;
		turn rfoot to x-axis <9.137363> now;
		turn lleg to x-axis <100.571429> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] now;
		turn lthigh to x-axis <-21.445055> now;
		turn rthigh to x-axis <-36.214286> now;
		turn torso to z-axis <0.000000> now;
		turn rfoot to x-axis <-7.027473> now;
		turn lleg to x-axis <103.736264> now;
		turn lfoot to x-axis <-52.747253> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		turn lthigh to x-axis <-32.692308> now;
		turn rthigh to x-axis <-21.802198> now;
		turn torso to z-axis <-8.082418> now;
		turn rleg to x-axis <38.681319> now;
		turn rfoot to x-axis <-13.357143> now;
		turn lleg to x-axis <84.747253> now;
		turn lfoot to x-axis <-45.357143> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] now;
		turn lthigh to x-axis <-68.923077> now;
		turn rthigh to x-axis <-10.901099> now;
		turn torso to z-axis <-10.192308> now;
		turn rleg to x-axis <37.626374> now;
		turn rfoot to x-axis <-21.445055> now;
		turn lleg to x-axis <79.115385> now;
		turn lfoot to x-axis <-37.978022> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.625000] now;
		turn lthigh to x-axis <-61.181319> now;
		turn rthigh to x-axis <3.516484> now;
		turn torso to z-axis <-8.780220> now;
		turn rleg to x-axis <26.368132> now;
		turn rfoot to x-axis <-22.857143> now;
		turn lleg to x-axis <9.846154> now;
		sleep 3000 / currentSpeed;
	}
	move pelvis to y-axis [-1.000000] now;
	turn lthigh to x-axis <-63.291209> now;
	turn rthigh to x-axis <17.225275> now;
	turn torso to z-axis <-7.027473> now;
	turn rleg to x-axis <29.181319> now;
	turn rfoot to x-axis <-21.093407> now;
	turn lleg to x-axis <28.835165> now;
	turn lfoot to x-axis <-1.401099> now;
	sleep 3000 / currentSpeed;
}

walklegs()
{
	if( bMoving )
	{
		move pelvis to y-axis [-1.250000] now;
		move lcannon to y-axis [0.000000] now;
		move lcannon to z-axis [0.000000] now;
		move rcannon to y-axis [0.000000] now;
		move rcannon to z-axis [0.000000] now;
		move locase to y-axis [0.000000] now;
		move rfirept to y-axis [-0.099930] now;
		move rfirept to z-axis [0.549957] now;
		move lfirept to y-axis [-0.099930] now;
		move lfirept to z-axis [0.549957] now;
		turn lthigh to x-axis <-62.945055> now;
		turn rthigh to x-axis <3.516484> now;
		turn rleg to x-axis <82.989011> now;
		turn rfoot to x-axis <-36.923077> now;
		turn lleg to x-axis <57.313187> now;
		turn lfoot to x-axis <5.269231> now;
		sleep 3500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.625000] now;
		turn lthigh to x-axis <-51.692308> now;
		turn rthigh to x-axis <-8.082418> now;
		turn rleg to x-axis <105.846154> now;
		turn rfoot to x-axis <-27.071429> now;
		turn lleg to x-axis <45.357143> now;
		turn lfoot to x-axis <5.967033> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] now;
		turn lthigh to x-axis <-39.379121> now;
		turn rthigh to x-axis <-20.038462> now;
		turn rleg to x-axis <118.857143> now;
		turn lleg to x-axis <38.681319> now;
		turn lfoot to x-axis <1.049451> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		turn lthigh to x-axis <-29.181319> now;
		turn rthigh to x-axis <-30.236264> now;
		turn rleg to x-axis <72.780220> now;
		turn rfoot to x-axis <-33.758242> now;
		turn lleg to x-axis <29.879121> now;
		turn lfoot to x-axis <-0.703297> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] now;
		turn lthigh to x-axis <-20.390110> now;
		turn rthigh to x-axis <-56.258242> now;
		turn rleg to x-axis <58.368132> now;
		turn lleg to x-axis <41.137363> now;
		turn lfoot to x-axis <-21.093407> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.625000] now;
		turn lthigh to x-axis <-16.527473> now;
		turn rthigh to x-axis <-57.670330> now;
		turn rleg to x-axis <-10.192308> now;
		turn lleg to x-axis <59.423077> now;
		turn lfoot to x-axis <-31.648352> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.000000] now;
		turn lthigh to x-axis <-4.571429> now;
		turn rthigh to x-axis <-65.401099> now;
		turn rleg to x-axis <35.868132> now;
		turn lleg to x-axis <53.445055> now;
		turn lfoot to x-axis <-33.758242> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.250000] now;
		turn lthigh to x-axis <2.813187> now;
		turn rthigh to x-axis <-66.456044> now;
		turn rleg to x-axis <43.247253> now;
		turn rfoot to x-axis <-7.736264> now;
		turn lleg to x-axis <57.313187> now;
		turn lfoot to x-axis <-29.538462> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.000000] now;
		turn lthigh to x-axis <5.269231> now;
		turn rthigh to x-axis <-61.538462> now;
		turn rleg to x-axis <44.648352> now;
		turn rfoot to x-axis <16.879121> now;
		turn lleg to x-axis <78.412088> now;
		turn lfoot to x-axis <-34.802198> now;
		sleep 3500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.625000] now;
		turn lthigh to x-axis <-4.923077> now;
		turn rthigh to x-axis <-52.390110> now;
		turn rleg to x-axis <43.247253> now;
		turn rfoot to x-axis <9.137363> now;
		turn lleg to x-axis <100.571429> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] now;
		turn lthigh to x-axis <-21.445055> now;
		turn rthigh to x-axis <-36.214286> now;
		turn rfoot to x-axis <-7.027473> now;
		turn lleg to x-axis <103.736264> now;
		turn lfoot to x-axis <-52.747253> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		turn lthigh to x-axis <-32.692308> now;
		turn rthigh to x-axis <-21.802198> now;
		turn rleg to x-axis <38.681319> now;
		turn rfoot to x-axis <-13.357143> now;
		turn lleg to x-axis <84.747253> now;
		turn lfoot to x-axis <-45.357143> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] now;
		turn lthigh to x-axis <-68.923077> now;
		turn rthigh to x-axis <-10.901099> now;
		turn rleg to x-axis <37.626374> now;
		turn rfoot to x-axis <-21.445055> now;
		turn lleg to x-axis <79.115385> now;
		turn lfoot to x-axis <-37.978022> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.625000] now;
		turn lthigh to x-axis <-61.181319> now;
		turn rthigh to x-axis <3.516484> now;
		turn rleg to x-axis <26.368132> now;
		turn rfoot to x-axis <-22.857143> now;
		turn lleg to x-axis <9.846154> now;
		sleep 3000 / currentSpeed;
	}
	move pelvis to y-axis [-1.000000] now;
	turn lthigh to x-axis <-63.291209> now;
	turn rthigh to x-axis <17.225275> now;
	turn rleg to x-axis <29.181319> now;
	turn rfoot to x-axis <-21.093407> now;
	turn lleg to x-axis <28.835165> now;
	turn lfoot to x-axis <-1.401099> now;
	sleep 3000 / currentSpeed;
}

open()
{
	move lcannon to y-axis [0.000000] now;
	move lcannon to z-axis [0.000000] now;
	move rcannon to y-axis [0.000000] now;
	move rcannon to z-axis [0.000000] now;
	move locase to y-axis [0.000000] now;
	move locase to z-axis [0.000000] now;
	move locase to z-axis [-1.874985] speed [2.382446];
	move rfirept to y-axis [-0.099930] now;
	move rfirept to z-axis [0.549957] now;
	move lfirept to y-axis [-0.099930] now;
	move lfirept to z-axis [0.549957] now;
	turn upcase2 to x-axis <0.000000> now;
	turn upcase2 to x-axis <-43.945055> speed <55.846154>;
	turn locase to x-axis <0.000000> now;
	turn locase to x-axis <61.538462> speed <78.192308>;
	sleep 787;

	RackClosed=0;
	move upcase2 to z-axis [-10.999985] speed [111.111084];
	turn upcase2 to x-axis <-47.115385> speed <31.967033>;
	sleep 99;

	turn upcase2 to x-axis <-122.016484> speed <687.159341>;
	sleep 109;

	turn upcase2 to x-axis <-45.714286> speed <451.516484>;
	sleep 169;

	turn upcase2 to x-axis <-19.692308> speed <377.126374>;
	sleep 69;

	turn upcase2 to x-axis <-47.115385> speed <1443.604396>;
	sleep 19;
}

close()
{
	RackClosed=1;
	move lcannon to y-axis [0.000000] now;
	move lcannon to z-axis [0.000000] now;
	move rcannon to y-axis [0.000000] now;
	move rcannon to z-axis [0.000000] now;
	move upcase2 to z-axis [-10.999985] now;
	move upcase2 to z-axis [2.375000] speed [29.266937];
	move locase to y-axis [0.000000] now;
	move locase to z-axis [-1.874985] now;
	move rfirept to y-axis [-0.099930] now;
	move rfirept to z-axis [0.549957] now;
	move lfirept to y-axis [-0.099930] now;
	move lfirept to z-axis [0.549957] now;
	turn upcase2 to x-axis <-47.115385> now;
	turn locase to x-axis <61.538462> now;
	sleep 457;

	move upcase2 to z-axis [4.250000] speed [17.523407];
	turn upcase2 to x-axis <-41.137363> speed <55.868132>;
	sleep 107;

	move upcase2 to z-axis [0.000000] speed [250.000427];
	move locase to z-axis [0.000000] speed [110.293777];
	turn upcase2 to x-axis <0.000000> speed <2420.159341>;
	turn locase to x-axis <0.000000> speed <3619.901099>;
	sleep 17;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				cantShoot = 1;
				call-script walklegs();
			}
			else
			{
				cantShoot = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		else
		{
			cantShoot = 0;
			if( justmoved )
			{
				move pelvis to y-axis [0.000000] speed [2.500000];
				turn rthigh to x-axis <0.000000> speed <200.038462>;
				turn rleg to x-axis <0.000000> speed <200.038462>;
				turn lthigh to x-axis <0.000000> speed <200.038462>;
				turn lleg to x-axis <0.000000> speed <200.038462>;
				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <90.016484>;
					turn canbase to x-axis <0.000000> speed <45.005495>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script close();
			currentstate = 1;
		}
		else
		{
			call-script open();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*100/moveSpeed;
		if (currentSpeed<20) currentSpeed=20;
		sleep 142;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script UnitSpeed();
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide rfirept;
	hide lfirept;
	turn rfirept to y-axis <180.000000> now;
	turn lfirept to y-axis <180.000000> now;
	bMoving = FALSE;
	bAiming = FALSE;
	cantShoot = 0;
	RackClosed = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	gun = 0;
	restore_delay = 3000;
	moveSpeed = get MAX_SPEED;
	currentSpeed = 100;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = pelvis;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn torso to y-axis <0.000000> speed <90.016484>;
	turn canbase to x-axis <0.000000> speed <45.005495>;
	set-signal-mask 0;
	start-script RequestState(1);
	wait-for-turn torso around y-axis;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	if (pitch >= 10012) return (0);
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	while( cantShoot OR RackClosed )
	{
		sleep 100;
	}
	turn torso to y-axis heading speed <160.000000>;
	turn canbase to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn canbase around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = canbase;
}

QueryPrimary(piecenum)
{
	if( gun )
	{
		piecenum = rfirept;
	}
	else
	{
		piecenum = lfirept;
	}
}

FirePrimary()
{
	if( gun)
	{
		emit-sfx UNIT_SFX1 from lfirept;
		move lcannon to z-axis [-5.000000] speed [62.500000];
		sleep 100;
		move lcannon to z-axis [0.000000] speed [1.875000];
	}
	else
	{
		emit-sfx UNIT_SFX1 from rfirept;
		move rcannon to z-axis [-5.000000] speed [62.500000];
		sleep 100;
		move rcannon to z-axis [0.000000] speed [1.875000];
	}
	gun = !gun;
}

AimWeapon2(heading, pitch)
{
	if (pitch < 10012) return (0);
	bAiming = TRUE;
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	while( cantShoot OR RackClosed )
	{
		sleep 100;
	}
	turn torso to y-axis heading speed <160.000000>;
	turn canbase to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn canbase around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	if( gun)
	{
		emit-sfx UNIT_SFX1 from lfirept;
		move lcannon to z-axis [-5.000000] speed [62.500000];
		sleep 100;
		move lcannon to z-axis [0.000000] speed [1.875000];
	}
	else
	{
		emit-sfx UNIT_SFX1 from rfirept;
		move rcannon to z-axis [-5.000000] speed [62.500000];
		sleep 100;
		move rcannon to z-axis [0.000000] speed [1.875000];
	}
	gun = !gun;
}

QueryWeapon2(piecenum)
{
	if( gun )
	{
		piecenum = lfirept;
	}
	else
	{
		piecenum = rfirept;
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = canbase;
}

Killed(severity, corpsetype)
{
	hide rfirept;
	hide lfirept;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode canbase type BITMAPONLY | BITMAP1;
		explode ground type FALL | BITMAP2;
		explode lcannon type SHATTER | BITMAP3;
		explode lfoot type FALL | BITMAP5;
		explode lleg type FALL | BITMAP1;
		explode locase type FALL | BITMAP2;
		explode lthigh type FALL | BITMAP3;
		explode pelvis type FALL | BITMAP4;
		explode rcannon type SHATTER | BITMAP5;
		explode rfoot type FALL | BITMAP2;
		explode rleg type FALL | BITMAP3;
		explode upcase2 type FALL | BITMAP4;
		explode rthigh type FALL | BITMAP5;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode canbase type BITMAPONLY | BITMAP1;
		explode ground type FALL | BITMAP2;
		explode lcannon type SHATTER | BITMAP3;
		explode lfoot type FALL | BITMAP5;
		explode lleg type FALL | BITMAP1;
		explode locase type FALL | BITMAP2;
		explode lthigh type FALL | BITMAP3;
		explode pelvis type FALL | BITMAP4;
		explode rcannon type SHATTER | BITMAP5;
		explode rfoot type FALL | BITMAP2;
		explode rleg type FALL | BITMAP3;
		explode upcase2 type FALL | BITMAP4;
		explode rthigh type FALL | BITMAP5;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode canbase type BITMAPONLY | BITMAP1;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lcannon type SHATTER | BITMAP3;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode locase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rcannon type SHATTER | BITMAP5;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode upcase2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode canbase type BITMAPONLY | BITMAP1;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lcannon type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode locase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rcannon type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode upcase2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode torso type BITMAPONLY | BITMAP1;
}
