#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, gun, door1, door2, door3, door4, stand,
       turret, barrel;

static-var  Static_Var_1, restore_delay, openState, bAiming, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM			2
#define SIG_OPEN		16


activatescr()
{
	move door1 to y-axis [0.000000] now;
	move door1 to y-axis [-8.500000] speed [21.356766];
	move door2 to y-axis [0.000000] now;
	move door2 to y-axis [-8.500000] speed [21.356766];
	move door3 to y-axis [0.000000] now;
	move door3 to y-axis [-8.500000] speed [21.356766];
	move door4 to y-axis [0.000000] now;
	move door4 to y-axis [-8.625000] speed [21.670837];
	move stand to y-axis [-13.375000] now;
	move turret to y-axis [-35.875000] now;
	move barrel to z-axis [-19.750000] now;
	turn door1 to x-axis <90.379121> now;
	turn door1 to x-axis <0.000000> speed <227.093407>;
	turn door2 to z-axis <-90.379121> now;
	turn door2 to z-axis <0.000000> speed <227.093407>;
	turn door3 to x-axis <-90.379121> now;
	turn door3 to x-axis <0.000000> speed <227.093407>;
	turn door4 to z-axis <90.379121> now;
	turn door4 to z-axis <0.000000> speed <227.093407>;
	turn stand to y-axis <-360.082418> now;
	turn gun to x-axis <-90.379121> now;
	sleep 398;

	move door1 to y-axis [-8.499985] speed [0.000000];
	move door2 to y-axis [-8.499985] speed [0.000000];
	move door3 to y-axis [-8.500000] speed [0.000000];
	move door4 to y-axis [-8.500000] speed [0.231888];
	move stand to y-axis [-3.750000] speed [17.857147];
	turn stand to y-axis <-180.280220> speed <333.582418>;
	sleep 539;

	move door1 to y-axis [-8.499985] speed [0.000000];
	move door2 to y-axis [-8.500000] speed [0.000000];
	move door3 to y-axis [-8.500000] speed [0.000000];
	move door4 to y-axis [-8.500000] speed [0.000000];
	move stand to y-axis [0.000000] speed [7.197678];
	turn stand to y-axis <0.000000> speed <346.038462>;
	sleep 521;

	move door1 to y-axis [-8.500000] speed [0.000000];
	move door2 to y-axis [-8.500000] speed [0.000000];
	move door3 to y-axis [-8.500000] speed [0.000000];
	move door4 to y-axis [-8.500000] speed [0.000000];
	move turret to y-axis [0.000000] speed [101.341812];
	sleep 354;

	move door1 to y-axis [-8.500000] speed [0.000000];
	move door2 to y-axis [-8.500000] speed [0.000000];
	move door3 to y-axis [-8.500000] speed [0.000000];
	move door4 to y-axis [-8.500000] speed [0.000000];
	turn gun to x-axis <0.000000> speed <253.181319>;
	sleep 357;

	move door1 to y-axis [-8.500000] speed [0.000000];
	move door2 to y-axis [-8.500000] speed [0.000000];
	move door3 to y-axis [-8.500000] speed [0.000000];
	move door4 to y-axis [-8.500000] speed [0.000000];
	move barrel to z-axis [0.000000] speed [56.107941];
	sleep 352;
}

deactivatescr()
{
	move door1 to y-axis [-8.500000] now;
	move door1 to y-axis [-8.500000] speed [0.000000];
	move door2 to y-axis [-8.500000] now;
	move door2 to y-axis [-8.500000] speed [0.000000];
	move door3 to y-axis [-8.500000] now;
	move door3 to y-axis [-8.500000] speed [0.000000];
	move door4 to y-axis [-8.500000] now;
	move door4 to y-axis [-8.500000] speed [0.000000];
	move barrel to z-axis [0.000000] now;
	move barrel to z-axis [-19.750000] speed [61.718750];
	sleep 320;

	move door1 to y-axis [-8.500000] speed [0.000000];
	move door2 to y-axis [-8.500000] speed [0.000000];
	move door3 to y-axis [-8.500000] speed [0.000000];
	move door4 to y-axis [-8.500000] speed [0.000000];
	turn gun to x-axis <-90.379121> speed <281.571429>;
	sleep 321;

	move door1 to y-axis [-8.499985] speed [0.000000];
	move door2 to y-axis [-8.500000] speed [0.000000];
	move door3 to y-axis [-8.500000] speed [0.000000];
	move door4 to y-axis [-8.500000] speed [0.000000];
	move turret to y-axis [-35.875000] speed [111.760132];
	sleep 321;

	move door1 to y-axis [-8.499985] speed [0.000000];
	move door2 to y-axis [-8.499985] speed [0.000000];
	move door3 to y-axis [-8.500000] speed [0.000000];
	move door4 to y-axis [-8.500000] speed [0.000000];
	move stand to y-axis [-3.750000] speed [7.530106];
	turn stand to y-axis <-180.280220> speed <362.016484>;
	sleep 498;

	move door1 to y-axis [0.000000] speed [16.699402];
	move door2 to y-axis [0.000000] speed [16.699402];
	move door3 to y-axis [0.000000] speed [16.699402];
	move door4 to y-axis [0.000000] speed [16.699402];
	move stand to y-axis [-13.375000] speed [18.909622];
	turn stand to y-axis <-360.082418> speed <353.236264>;
	sleep 509;

	turn door1 to x-axis <90.379121> speed <225.956044>;
	turn door2 to z-axis <-90.379121> speed <225.956044>;
	turn door3 to x-axis <-90.379121> speed <225.956044>;
	turn door4 to z-axis <90.379121> speed <225.956044>;
	sleep 400;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	set ARMORED to 1;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{

	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	bAiming = 0;
	if (!openState)
	{
		set-signal-mask 0;
		start-script RequestState(1);
	}
}

OpenClose(state)
{
	signal SIG_OPEN;
	set-signal-mask SIG_OPEN;
	openState = state;
	if (state != Static_var_1)
	{
		if (state)
		{
			if (!bAiming) start-script RequestState(0);
		}
		else
		{
			if (bAiming) return;
			start-script RequestState(1);
		}
	}
}

Create()
{
	hide flare;
	Static_Var_1 = 0;
	restore_delay = 3000;
	bAiming = 0;
	start-script SmokeUnit();
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	call-script Stop();
	set ARMORED to 0;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	bAiming = 1;
	turn turret to y-axis heading speed <100.016484>;
	turn gun to x-axis <0.000000> - pitch speed <50.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx UNIT_SFX1 from flare;
	move barrel to z-axis [-12.500000] speed [1250.000000];
	sleep 250;
	move barrel to z-axis [0.000000] speed [7.500000];
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 2;
		}
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP3;
		explode door3 type FALL | BITMAP3;
		explode door4 type FALL | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 2;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 3;
		}
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP3;
		explode door3 type FALL | BITMAP3;
		explode door4 type FALL | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 4;
		}
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 4;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode stand type BITMAPONLY | BITMAP5;
	explode turret type BITMAPONLY | BITMAP1;
}
