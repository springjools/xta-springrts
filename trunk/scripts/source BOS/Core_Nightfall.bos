#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, turret1, sleeve1, barrela, flarea, barrelb, flareb,
       turret2, sleeve2, barrelc, flarec, barreld, flared, wake1, wake2, ignite1, ignite2, ignite3, ignite4;

static-var  gun_1, gun_2, Static_Var_3, bAiming, Static_Var_5,
            Static_Var_6;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8

SetDirection(heading)
{
	var spd;
	spd = get ABS(heading);
	turn base to y-axis heading speed spd;
	turn hull to y-axis 0-heading speed spd;
}

RockOnWaves()
{
	while(1)
	{
		turn base to x-axis <1.0> speed <1.5>;
		move base to y-axis [-1.2] speed [0.3];
		wait-for-turn base around x-axis;
		turn base to x-axis <-1.0> speed <1.5>;
		move base to y-axis [-1.4] speed [0.3];
		wait-for-move base along y-axis;
		move base to y-axis [-1.2] speed [0.3];
		wait-for-turn base around x-axis;
		turn base to x-axis <1.0> speed <1.5>;
		move base to y-axis [-1.4] speed [0.3];
		wait-for-move base along y-axis;
	}
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_5 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_5 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_5 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_5 = Func_Var_1;
	}
	else
	{
		Static_Var_5 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

/*
ProjZPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -27300 OR Func_Var_2 > 27300 )
	{
		Static_Var_5 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 5460 )
	{
		Static_Var_5 = Func_Var_1 * ( 16380 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -5460 )
	{
		Static_Var_5 = Func_Var_1 * ( Func_Var_2 + 16380 ) / 10920;
	}
	else
	{
		Static_Var_5 = Func_Var_1;
	}
}
*/

RockZ(Func_Var_1, Func_Var_2)
{
	signal 16;
	set-signal-mask 16;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_6 = Static_Var_6 + Static_Var_5;
	Static_Var_5 = get ABS(Static_Var_6);
	while( Static_Var_5 > 91 )
	{
		turn hull to z-axis Static_Var_6 speed Static_Var_5 * <0.016484>;
		wait-for-turn hull around z-axis;
		Static_Var_6 = Static_Var_6 * -1 / 2;
		Static_Var_5 = get ABS(Static_Var_6);
	}
	turn hull to z-axis <0.000000> speed <1.500000>;
}

FlameControl(Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_3 = get HEALTH;
		if( Func_Var_3 <= 80 )
		{
			emit-sfx UNIT_SFX2 from ignite1;
			if( Func_Var_3 <= 60 ){
				emit-sfx UNIT_SFX2 from ignite2;
				if( Func_Var_3 <= 40 ){
					emit-sfx UNIT_SFX2 from ignite3;
					if( Func_Var_3 <= 20 )	emit-sfx UNIT_SFX2 from ignite4;
				}
			}
			sleep 66;
		}
		else
		{
			sleep 333;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script FlameControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flarea;
	hide flareb;
	hide flarec;
	hide flared;
	hide ignite1;
	hide ignite2;
	hide ignite3;
	hide ignite4;
	Static_Var_3 = 3000;
	gun_1 = hull;
	gun_2 = hull;
	Static_Var_6 = 0;
	move base to y-axis [-1.3] now;
	start-script SmokeUnit();
	start-script RockOnWaves();
}

RestoreAfterDelay()
{
	sleep Static_Var_3;
	turn turret1 to y-axis <0.000000> speed <52.500000>;
	turn sleeve1 to x-axis <0.000000> speed <30.000000>;
	turn turret2 to y-axis <0.000000> speed <52.500000>;
	turn sleeve2 to x-axis <0.000000> speed <30.000000>;
	wait-for-turn turret1 around x-axis;
	wait-for-turn sleeve1 around y-axis;
	wait-for-turn turret2 around x-axis;
	wait-for-turn sleeve2 around x-axis;
	set-signal-mask 0;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if (waketime < 50) waketime = 50;
		sleep 15000/waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <60.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <35.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	bAiming = heading;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <60.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <35.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	start-script RockZ(-5,bAiming);
	if( gun_1 == 0 )
	{
		move barrela to z-axis [-2.500000] speed [500.000000];
		emit-sfx 1024 + 0 from flarea;
		sleep 150;
		wait-for-move barrela along z-axis;
		move barrela to z-axis [0.000000] speed [10.000000];
		gun_1 = turret1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		move barrelb to z-axis [-2.500000] speed [500.000000];
		emit-sfx 1024 + 0 from flareb;
		sleep 150;
		wait-for-move barrelb along z-axis;
		move barrelb to z-axis [0.000000] speed [10.000000];
		gun_1 = hull;
		return (0);
	}
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		move barrelc to z-axis [-2.500000] speed [500.000000];
		emit-sfx 1024 + 0 from flarec;
		sleep 150;
		wait-for-move barrelc along z-axis;
		move barrelc to z-axis [0.000000] speed [10.000000];
		gun_2 = turret1;
		return (0);
	}
	if( gun_2 == 1 )
	{
		move barreld to z-axis [-2.500000] speed [500.000000];
		emit-sfx 1024 + 0 from flared;
		sleep 150;
		wait-for-move barreld along z-axis;
		move barreld to z-axis [0.000000] speed [10.000000];
		gun_2 = hull;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flarea;
	}
	if( gun_1 == 1 )
	{
		piecenum = flareb;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flarec;
	}
	if( gun_2 == 1 )
	{
		piecenum = flared;
	}
}

SweetSpot(piecenum)
{
	piecenum = hull;
}

Killed(severity, corpsetype)
{
	hide flarea;
	hide flareb;
	hide flarec;
	hide flared;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode barrela type BITMAPONLY | BITMAP2;
		explode turret2 type BITMAPONLY | BITMAP3;
		explode barrelb type BITMAPONLY | BITMAP4;
		explode hull type BITMAPONLY | BITMAP5;
		explode barrelc type BITMAPONLY | BITMAP1;
		explode barreld type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrela type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode barrelb type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode turret2 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode hull type BITMAPONLY | BITMAP5;
		explode barrelc type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barreld type FALL | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrelc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode hull type BITMAPONLY | BITMAP1;
	explode barreld type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
