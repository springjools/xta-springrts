#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 200

piece  base, body, top, leg1, leg2, leg3, leg4, leg5,
       leg6;

static-var  bMoving, justMoved, moveSpeed, currentSpeed;


walk2()
{
	if( bMoving )
	{
		turn leg1 to y-axis <43.796703> now;
		turn leg1 to y-axis <0.000000> speed <438>;
		turn leg1 to z-axis <0.598901> now;
		turn leg1 to z-axis <0.000000> speed <6>;
		turn leg2 to z-axis <0.000000> now;
		turn leg2 to z-axis <31.000000> speed <310.1978>;
		turn leg3 to y-axis <34.697802> now;
		turn leg3 to y-axis <34.098901> speed <6>;
		turn leg3 to z-axis <31.598901> now;
		turn leg3 to z-axis <0.598901> speed <310.1978>;
		turn leg4 to y-axis <-40.098901> now;
		turn leg4 to y-axis <-40.098901> speed <0>;
		turn leg4 to z-axis <-31.000000> now;
		turn leg4 to z-axis <-0.598901> speed <304.1978>;
		turn leg5 to y-axis <-37.098901> now;
		turn leg5 to y-axis <0.000000> speed <371>;
		turn leg5 to z-axis <0.000000> now;
		turn leg5 to z-axis <0.000000> speed <0>;
		turn leg6 to y-axis <0.000000> now;
		turn leg6 to y-axis <-30.395604> speed <304.1978>;
		turn leg6 to z-axis <-45.000000> now;
		sleep 5000/currentSpeed;
	}
	if( bMoving )
	{
		turn leg1 to z-axis <31.598901> speed <316.1978>;
		turn leg2 to y-axis <34.697802> speed <346.7912>;
		turn leg2 to z-axis <31.000000> speed <0>;
		turn leg3 to y-axis <0.000000> speed <340.5934>;
		turn leg3 to z-axis <0.000000> speed <6>;
		turn leg4 to y-axis <0.000000> speed <401.3956>;
		turn leg5 to z-axis <-31.000000> speed <310.1978>;
		turn leg6 to z-axis <2.395604> speed <474.3956>;
		sleep 5000/currentSpeed;
	}
	if( bMoving )
	{
		turn leg1 to y-axis <56.000000> speed <559.5934>;
		turn leg1 to z-axis <31.000000> speed <6>;
		turn leg2 to y-axis <34.697802> speed <0>;
		turn leg2 to z-axis <0.598901> speed <304.1978>;
		turn leg3 to z-axis <31.598901> speed <316.1978>;
		turn leg4 to y-axis <-0.598901> speed <6>;
		turn leg4 to z-axis <-31.000000> speed <304.1978>;
		turn leg5 to y-axis <-31.598901> speed <316.1978>;
		turn leg5 to z-axis <-31.000000> speed <0>;
		turn leg6 to y-axis <3.000000> speed <334.5934>;
		sleep 5000/currentSpeed;
	}
	turn leg1 to y-axis <43.796703> speed <121.5934>;
	turn leg1 to z-axis <0.598901> speed <304.1978>;
	turn leg2 to y-axis <0.000000> speed <346.7912>;
	turn leg2 to z-axis <0.000000> speed <6>;
	turn leg3 to y-axis <34.697802> speed <346.7912>;
	turn leg3 to z-axis <31.598901> speed <0>;
	turn leg4 to y-axis <-40.098901> speed <395.3956>;
	turn leg4 to z-axis <-31.000000> speed <0>;
	turn leg5 to y-axis <-37.098901> speed <54.79121>;
	turn leg5 to z-axis <0.000000> speed <310.1978>;
	turn leg6 to y-axis <0.000000> speed <30.3956>;
	turn leg6 to z-axis <-45.000000> speed <474.3956>;
	sleep 5000/currentSpeed;
}

stand()
{
	turn leg1 to y-axis <0.000000> speed <60.796703>;
	turn leg1 to z-axis <0.000000> speed <152.098901>;
	turn leg2 to y-axis <0.000000> speed <173.395604>;
	turn leg2 to z-axis <0.000000> speed <3.000000>;
	turn leg3 to y-axis <0.000000> speed <173.395604>;
	turn leg3 to z-axis <0.000000> speed <10.000000>;
	turn leg4 to y-axis <0.000000> speed <197.697802>;
	turn leg4 to z-axis <0.000000> speed <10.000000>;
	turn leg5 to y-axis <0.000000> speed <27.395604>;
	turn leg5 to z-axis <0.000000> speed <155.098901>;
	turn leg6 to y-axis <0.000000> speed <15.197802>;
	turn leg6 to z-axis <0.000000> speed <237.197802>;
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk2();
		}
		else
		{
			if(justMoved)
			{
				call-script stand();		
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
}

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*100/moveSpeed;
		if (currentSpeed<20) currentSpeed=20;
		sleep 142;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script UnitSpeed();
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	bMoving = FALSE;
	justMoved = FALSE;
	moveSpeed = get MAX_SPEED;
	currentSpeed = 100;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
	spin top around y-axis speed <200.000000>;
}

StopMoving()
{
	bMoving = FALSE;
	justMoved = TRUE;
	stop-spin top around y-axis;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP3;
		explode leg1 type BITMAPONLY | BITMAP1;
		explode leg2 type BITMAPONLY | BITMAP2;
		explode leg3 type BITMAPONLY | BITMAP3;
		explode leg4 type BITMAPONLY | BITMAP4;
		explode leg5 type BITMAPONLY | BITMAP5;
		explode leg6 type BITMAPONLY | BITMAP1;
		explode top type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP3;
		explode leg1 type FALL | BITMAP1;
		explode leg2 type FALL | BITMAP2;
		explode leg3 type FALL | BITMAP3;
		explode leg4 type FALL | BITMAP4;
		explode leg5 type FALL | BITMAP5;
		explode leg6 type FALL | BITMAP1;
		explode top type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP3;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode top type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP3;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode top type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}
