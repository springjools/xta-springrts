#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, leg1, leg2, leg3, leg4, leg5, leg6;

static-var  bMoving, justMoved;


HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

walk2()
{
	if( bMoving )
	{
		turn leg1 to y-axis <43.000000> now;
		turn leg1 to y-axis <0.000000> speed <872>;
		turn leg1 to z-axis <0.000000> now;
		turn leg1 to z-axis <0.000000> speed <12>;
		turn leg2 to z-axis <0.000000> now;
		turn leg2 to z-axis <29.005495> speed <620>;
		turn leg3 to y-axis <21.000000> now;
		turn leg3 to y-axis <12.000000> speed <48>;
		turn leg3 to x-axis <-25.005495> now;
		turn leg3 to x-axis <0.000000> speed <740>;
		turn leg4 to y-axis <-40.000000> now;
		turn leg4 to y-axis <-39.000000> speed <4>;
		turn leg4 to z-axis <-30.005495> now;
		turn leg4 to z-axis <0.000000> speed <608>;
		turn leg5 to y-axis <-39.000000> now;
		turn leg5 to y-axis <5.000000> speed <740>;
		turn leg5 to z-axis <0.000000> now;
		turn leg5 to z-axis <0.000000> speed <4>;
		turn leg6 to y-axis <0.000000> now;
		turn leg6 to y-axis <-52.010989> speed <320>;
		turn leg6 to x-axis <-30.005495> now;
		sleep 50;
	}
	if( bMoving )
	{	
		turn leg1 to z-axis <31.005495> speed <632>;
		turn leg2 to y-axis <13.000000> speed <792>;
		turn leg2 to z-axis <31.005495> speed <4>;
		turn leg3 to y-axis <0.000000> speed <984>;
		turn leg3 to x-axis <0.000000> speed <12>;
		turn leg4 to y-axis <0.000000> speed <800>;
		turn leg5 to z-axis <-31.005495> speed <620>;
		turn leg6 to x-axis <4.000000> speed <560>;
		sleep 50;
	}
	if( bMoving )
	{	
		turn leg1 to y-axis <55.010989> speed <1116>;
		turn leg1 to z-axis <31.005495> speed <12>;
		turn leg2 to y-axis <14.000000> speed <4>;
		turn leg2 to z-axis <0.000000> speed <608>;
		turn leg3 to x-axis <-25.005495> speed <740>;
		turn leg4 to y-axis <0.000000> speed <12>;
		turn leg4 to z-axis <-31.005495> speed <608>;
		turn leg5 to y-axis <-34.000000> speed <632>;
		turn leg5 to z-axis <-31.005495> speed <4>;
		turn leg6 to y-axis <12.000000> speed <532>;
		sleep 50;
	}
	turn leg1 to y-axis <43.000000> speed <240>;
	turn leg1 to z-axis <0.000000> speed <608>;
	turn leg2 to y-axis <0.000000> speed <800>;
	turn leg2 to z-axis <0.000000> speed <12>;
	turn leg3 to y-axis <21.000000> speed <976>;
	turn leg3 to x-axis <-25.005495> speed <0>;
	turn leg4 to y-axis <-40.000000> speed <788>;
	turn leg4 to z-axis <-31.005495> speed <0>;
	turn leg5 to y-axis <-39.000000> speed <108>;
	turn leg5 to z-axis <0.000000> speed <620>;
	turn leg6 to y-axis <0.000000> speed <28>;
	turn leg6 to x-axis <-30.005495> speed <640>;
	sleep 50;
}

stand()
{
	turn leg1 to z-axis <0.000000> speed <800>;
	turn leg1 to y-axis <-45.000000> speed <800>;
	turn leg1 to x-axis <0.000000> speed <800>;
	
	turn leg2 to z-axis <0.000000> speed <800>;
	turn leg2 to y-axis <0.000000> speed <800>;
	turn leg2 to x-axis <0.000000> speed <800>;
	
	turn leg3 to z-axis <0.000000> speed <800>;
	turn leg3 to y-axis <0.000000> speed <800>;
	turn leg3 to x-axis <0.000000> speed <800>;
	
	turn leg4 to z-axis <0.000000> speed <800>;
	turn leg4 to y-axis <0.000000> speed <800>;
	turn leg4 to x-axis <0.000000> speed <800>;
	
	turn leg5 to z-axis <0.000000> speed <800>;
	turn leg5 to y-axis <0.000000> speed <800>;
	turn leg5 to x-axis <0.000000> speed <800>;
	
	turn leg6 to z-axis <0.000000> speed <800>;
	turn leg6 to y-axis <-45.000000> speed <800>;
	turn leg6 to x-axis <0.000000> speed <800>;
}

MotionControl(Func_Var_1, Func_Var_2)
{
	Func_Var_2 = 1;
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			Func_Var_2 = 1;
			call-script walk2();
		}
		else
		{
			if (justMoved)
			{
				call-script stand();			
				justMoved = FALSE;
			}
			sleep 200;
			Func_Var_2 = 0;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	bMoving = FALSE;
	justMoved = FALSE;	
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
	justMoved = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode leg6 type BITMAPONLY | BITMAP1;
		explode leg1 type BITMAPONLY | BITMAP1;
		explode leg2 type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP3;
		explode leg3 type BITMAPONLY | BITMAP3;
		explode leg4 type BITMAPONLY | BITMAP4;
		explode leg5 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode leg1 type FALL | BITMAP1;
		explode leg6 type FALL | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode leg2 type FALL | BITMAP2;
		explode leg3 type FALL | BITMAP3;
		explode base type BITMAPONLY | BITMAP3;
		explode leg4 type FALL | BITMAP4;
		explode leg5 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type BITMAPONLY | BITMAP3;
	explode base type BITMAPONLY | BITMAP3;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}
