#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, bombs, turret, wing1, wing2, tail1,
       thrust, tail2, barrels, thrusta1, thrusta2;

static-var  Static_Var_1, gun_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging,
            Static_Var_6;

// Signal definitions
#define SIG_AIM_2			2


activatescr()
{
	turn wing1 to z-axis <0.000000> now;
	turn wing1 to z-axis <-90.000000> speed <75.000000>;
	turn wing2 to z-axis <0.000000> now;
	turn wing2 to z-axis <90.000000> speed <75.000000>;
	turn tail1 to z-axis <0.000000> now;
	turn tail1 to z-axis <-30.000000> speed <25.000000>;
	//Static_Var_6 = 1;
	turn tail2 to z-axis <0.000000> now;
	turn tail2 to z-axis <30.000000> speed <25.000000>;
	sleep 1190;
}

/*
Flamers()
{
	while( TRUE )
	{
		if( Static_Var_6 == 1 )
		{
			emit-sfx 1024 from thrust;
		}
		sleep 1;
	}
}
*/

deactivatescr()
{
	turn wing1 to z-axis <-90.000000> now;
	turn wing1 to z-axis <0.000000> speed <75.000000>;
	turn wing2 to z-axis <90.000000> now;
	turn wing2 to z-axis <0.000000> speed <75.000000>;
	turn tail1 to z-axis <-30.000000> now;
	turn tail1 to z-axis <0.000000> speed <25.000000>;
	//Static_Var_6 = 0;
	turn tail2 to z-axis <30.000000> now;
	turn tail2 to z-axis <0.000000> speed <25.000000>;
	sleep 1190;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare1;
	hide flare2;
	gun_2 = flare1;
	Static_Var_1 = 3000;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
	//start-script Flamers();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn barrels to x-axis <0.000000> speed <50.000000>;
}

QueryPrimary(piecenum)
{
	piecenum = bombs;
}

QuerySecondary(piecenum)
{
	piecenum = gun_2;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret to y-axis heading speed <390.000000>;
	Static_Var_3 = pitch;
	if( Static_Var_3 > 0 )
	{
		Static_Var_3 = 0;
	}
	turn barrels to x-axis <0.000000> - Static_Var_3 speed <350.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrels around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_2 )
	{
		show flare2;
		sleep 150;
		hide flare2;
	}
	else
	{
		show flare1;
		sleep 150;
		hide flare1;
	}
	gun_2 = !gun_2;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

QueryWeapon3(piecenum)
{
	piecenum = bombs;
}

AimWeapon3(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrels type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode bombs type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode tail1 type BITMAPONLY | BITMAP1;
		explode tail2 type BITMAPONLY | BITMAP2;
		explode thrusta1 type BITMAPONLY | BITMAP3;
		explode thrusta2 type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP1;
		explode wing1 type BITMAPONLY | BITMAP2;
		explode wing2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrels type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode bombs type FALL | BITMAP3;
		explode flare1 type FALL | BITMAP4;
		explode flare2 type FALL | BITMAP5;
		explode tail1 type FALL | BITMAP1;
		explode tail2 type FALL | BITMAP2;
		explode thrusta1 type FALL | BITMAP3;
		explode thrusta2 type FALL | BITMAP4;
		explode turret type FALL | BITMAP1;
		explode wing1 type SHATTER | BITMAP2;
		explode wing2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrels type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode bombs type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode tail1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode tail2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wing1 type SHATTER | BITMAP2;
		explode wing2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode barrels type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode bombs type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode tail1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode tail2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode wing2 type BITMAPONLY | BITMAP3;
}
