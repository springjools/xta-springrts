#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, arms, firepoint1, firepoint2, exhaust1, exhaust2,
       gun, tracks1, tracks2, tracks3, tracks4, wheels1, wheels2, wheels3,
       wheels4, wheels5, wheels6, wheels7, wheels8;

static-var  bMoving, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, RocketTypeSelect;


RestoreAfterDelay(Func_Var_1)
{
	sleep Func_Var_1;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn gun to x-axis <0.000000> speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	move arms to y-axis [0.000000] speed [12.500000];
	Static_Var_5 = 0;
}

DamageControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = get HEALTH;
		if( Func_Var_1 < 50 )
		{
			emit-sfx 257 from body;
			if( Func_Var_1 < 25 )
			{
				emit-sfx 258 from turret;
			}
		}
		sleep 1000;
	}
}

AnimationControl(Func_Var_1)
{
	Func_Var_1 = 0;
	while( TRUE )
	{
		if( bMoving OR Static_Var_2 )
		{
			if( Func_Var_1 == 0 )
			{
				show tracks1;
				hide tracks4;
				++Func_Var_1;
			}
			else if( Func_Var_1 == 1 )
			{
				show tracks2;
				hide tracks1;
				++Func_Var_1;
			}
			else if( Func_Var_1 == 2 )
			{
				show tracks3;
				hide tracks2;
				++Func_Var_1;
			}
			else if( Func_Var_1 == 3 )
			{
				show tracks4;
				hide tracks3;
				Func_Var_1 = 0;
				if( Static_Var_2 )
				{
					--Static_Var_2;
				}
			}
		}
		++Static_Var_3;
		sleep 50;
	}
}

StartMoving()
{
	bMoving = TRUE;
	Static_Var_3 = 0;
	spin wheels2 around x-axis speed <480.000000> accelerate <75.000000>;
	spin wheels3 around x-axis speed <480.000000> accelerate <75.000000>;
	spin wheels1 around x-axis speed <240.000000> accelerate <45.000000>;
	spin wheels4 around x-axis speed <240.000000> accelerate <45.000000>;
	spin wheels5 around x-axis speed <240.000000> accelerate <45.000000>;
	spin wheels6 around x-axis speed <240.000000> accelerate <45.000000>;
	spin wheels7 around x-axis speed <240.000000> accelerate <45.000000>;
	spin wheels8 around x-axis speed <240.000000> accelerate <45.000000>;
}

StopMoving()
{
	bMoving = FALSE;
	Static_Var_2 = Static_Var_3 * 5 / 100;
	stop-spin wheels2 around x-axis decelerate <200.000000>;
	stop-spin wheels3 around x-axis decelerate <200.000000>;
	stop-spin wheels1 around x-axis decelerate <120.000000>;
	stop-spin wheels4 around x-axis decelerate <120.000000>;
	stop-spin wheels5 around x-axis decelerate <120.000000>;
	stop-spin wheels6 around x-axis decelerate <120.000000>;
	stop-spin wheels7 around x-axis decelerate <120.000000>;
	stop-spin wheels8 around x-axis decelerate <120.000000>;
}

AimFromWeapon3(piecenum)
{
	piecenum = gun;
}

QueryWeapon3(piecenum)
{
	piecenum = firepoint1 + Static_Var_4;
}

AimWeapon3(heading, pitch)
{
	if(!RocketTypeSelect OR (get WEAPON_RELOADSTATE(4) > get GAME_FRAME)) return 0;
	signal 1;
	set-signal-mask 1;
	turn turret to y-axis heading speed <240.000000>;
	turn gun to x-axis <0.000000> - pitch speed <60.000000>;
	if( !Static_Var_5 )
	{
		move arms to y-axis [10.000000] speed [90.000000];
		wait-for-move arms along y-axis;
		Static_Var_5 = 1;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn gun around y-axis;
	start-script RestoreAfterDelay(3000);
	return (1);
}

Shot3()
{
	if( Static_Var_4 )
	{
		emit-sfx UNIT_SFX1 from exhaust2;
		sleep 250;
	}
	else
	{
		emit-sfx UNIT_SFX1 from exhaust1;
		sleep 250;
	}
	Static_Var_4 = !Static_Var_4;
}

AimFromWeapon4(piecenum)
{
	piecenum = gun;
}

QueryWeapon4(piecenum)
{
	piecenum = firepoint1 + Static_Var_4;
}

AimWeapon4(heading, pitch)
{
	if(RocketTypeSelect OR (get WEAPON_RELOADSTATE(3) > get GAME_FRAME)) return 0;
	signal 1;
	set-signal-mask 1;
	turn turret to y-axis heading speed <240.000000>;
	turn gun to x-axis <0.000000> - pitch speed <60.000000>;
	if( !Static_Var_5 )
	{
		move arms to y-axis [10.000000] speed [90.000000];
		wait-for-move arms along y-axis;
		Static_Var_5 = 1;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn gun around y-axis;
	start-script RestoreAfterDelay(3000);
	return (1);
}

Shot4()
{
	if( Static_Var_4 )
	{
		emit-sfx UNIT_SFX1 from exhaust2;
		sleep 250;
	}
	else
	{
		emit-sfx UNIT_SFX1 from exhaust1;
		sleep 250;
	}
	Static_Var_4 = !Static_Var_4;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | 10000001;
		explode turret type BITMAPONLY | 10000001;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode gun type FALL | SMOKE | FIRE | 10000001;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arms type SHATTER | SMOKE | FIRE | 10000001;
		return (0);
	}
	corpsetype = 3;
	explode arms type SHATTER | SMOKE | FIRE | 10000001;
}

RocketType(select)
{
	RocketTypeSelect = select;
}

Create()
{
	bMoving = FALSE;
	hide tracks1;
	hide tracks2;
	hide tracks3;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	RocketTypeSelect = 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script AnimationControl();
	start-script DamageControl();
}
