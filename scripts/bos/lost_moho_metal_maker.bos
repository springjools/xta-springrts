#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, engine, rotor, door1, door2, door3, lights,glow;

static-var  statechg_DesiredState, statechg_StateChanging, mmState, OPERATING;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	OPERATING = 1;
	dont-cache engine;
	dont-cache lights;
	dont-cache rotor;
	set ARMORED to 0;
	turn door3 to y-axis <180.000000> speed <300.000000>;
	wait-for-turn door3 around y-axis;
	move door3 to y-axis [-17.500000] speed [37.500000];
	wait-for-move door3 along y-axis;
	hide door3;
	turn door2 to y-axis <-180.000000> speed <300.000000>;
	wait-for-turn door2 around y-axis;
	move door2 to y-axis [-17.500000] speed [37.500000];
	wait-for-move door2 along y-axis;
	hide door2;
	turn door1 to y-axis <180.000000> speed <300.000000>;
	wait-for-turn door1 around y-axis;
	move door1 to y-axis [-17.500000] speed [37.500000];
	wait-for-move door1 along y-axis;
	hide door1;
	show engine;
	show rotor;
	move engine to y-axis [0.000000] speed [12.500000];
	wait-for-move engine along y-axis;
	mmState = 1;
	set ACTIVATION to 1;
	spin rotor around y-axis speed <60.000000>;
}

Stop()
{
	mmState = 0;
	set ACTIVATION to 0;
	OPERATING = 0;
	move engine to y-axis [-12.500000] speed [25.000000];
	stop-spin rotor around y-axis;
	move engine to y-axis [-12.500000] speed [25.000000];
	wait-for-move engine along y-axis;
	hide engine;
	hide rotor;
	show door1;
	move door1 to y-axis [0.000000] speed [37.500000];
	wait-for-move door1 along y-axis;
	turn door1 to y-axis <0.000000> speed <300.000000>;
	wait-for-turn door1 around y-axis;
	show door2;
	move door2 to y-axis [0.000000] speed [37.500000];
	wait-for-move door2 along y-axis;
	turn door2 to y-axis <0.000000> speed <300.000000>;
	wait-for-turn door2 around y-axis;
	show door3;
	move door3 to y-axis [0.000000] speed [37.500000];
	wait-for-move door3 along y-axis;
	turn door3 to y-axis <0.000000> speed <300.000000>;
	wait-for-turn door3 around y-axis;
	set ARMORED to 1;
	cache engine;
	cache rotor;
	cache lights;
}

MMStatus(State)
{
    OPERATING = State;
    //get PRINT(OPERATING);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = 1;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = 0;
}

Standby()
{
	while( TRUE )
	{
		if (mmState == 1)
		{
		emit-sfx 1025 from glow;
		}
		sleep 450;
	}
}

ImAMetalMaker()
{
	mmState = -1;
	while( TRUE )
	{
		if (OPERATING == 1)
		{
			if (mmState != 1) {
				call-script RequestState(0);
			}
		}
		else
		{
			if (mmState != 0) {
				call-script RequestState(1);
			}
		}
		sleep 1000;
	}
}

Create()
{
	move engine to y-axis [-12.500000] now;
	hide engine;
	hide rotor;
	dont-shade body;
	dont-shade engine;
	dont-shade lights;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	statechg_DesiredState = 0;
	start-script Go();
	start-script SmokeUnit();
	start-script Standby();
	start-script ImAMetalMaker();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode engine type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode engine type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode door3 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode rotor type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode engine type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode engine type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode door3 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode rotor type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
