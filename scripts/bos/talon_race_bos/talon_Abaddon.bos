#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, miniflare1, miniflare2, miniflare3, mis1, mis2, mis3, mis4, radar, turret, base, sleeves, barrel1, barrel2, barrel3, minigun1, minigun2, minigun3, minibar1, minibar2, minibar3, rocker1, rocker2, body;
		

static-var  restore_delay, gun_1, gun_2, gun_3, statechg_DesiredState, statechg_StateChanging, canfire, blood, x, z;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16
#define SIG_AIM_5			32
#define	SIG_R				64


InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

Go()
{
	spin radar around y-axis speed <100>;
}

Stop()
{
	stop-spin radar around y-axis;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}


Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
			emit-sfx smoketype from minigun1;
			emit-sfx smoketype from minigun2;
			emit-sfx smoketype from minigun3;
			emit-sfx smoketype from radar;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if ( get BUILD_PERCENT_LEFT )
	{
		return(0);
	}
	x=Func_Var_1;
	z=Func_Var_2;
	signal 32;
	set-signal-mask 32;
}

monitorhealth(healthpercent)
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 400;
	}
	while(1)
	{
		healthpercent = get HEALTH;
		if (healthpercent > 15)
		{
			if(canfire == 0)
			{
				canfire=1;
				show barrel1;
				show barrel2;
				show barrel3;
				show sleeves;
				show turret;
			}
		}
		sleep 500;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide miniflare1;
	hide miniflare2;
	hide miniflare3;
	x=0;
	z=0;
	blood = 0;
	canfire = 1;
	start-script monitorhealth();
	gun_1 = flare1;
	gun_2 = miniflare1;
	gun_3 = mis1;
	restore_delay = 3000;
	start-script SmokeUnit();
	call-script InitState();
	set ARMORED to 1;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	signal SIG_R;
	set-signal-mask SIG_R;
	sleep 2000;
	turn minigun1 to y-axis <0.000000> speed <75.005495>;
	turn minibar1 to x-axis <0.000000> speed <75.000000>;
	turn minigun2 to y-axis <0.000000> speed <75.005495>;
	turn minibar2 to x-axis <0.000000> speed <75.000000>;
	turn minigun3 to y-axis <0.000000> speed <75.005495>;
	turn minibar3 to x-axis <0.000000> speed <75.000000>;
	sleep 5000;
	turn turret to y-axis <0.000000> speed <35.005495>;
	turn sleeves to x-axis <0.000000> speed <15.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while (canfire == 0)
	{
		sleep 500;
	}
	turn turret to y-axis heading speed <50.005495>;
	turn rocker1 to y-axis heading speed <50.005495>;
	turn body to y-axis <0> - heading speed <50.005495>;
	turn sleeves to x-axis <0.000000> - pitch speed <25.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	//start-script RockUnit_();
	if( gun_1 == 0 )
	{
		emit-sfx UNIT_SFX1 from flare1;
		move barrel1 to z-axis [-3.00000] speed [500.000000];
		sleep 150;
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [3.000000];
	}
	if( gun_1 == 1 )
	{
		emit-sfx UNIT_SFX1 from flare2;
		move barrel2 to z-axis [-3.00000] speed [500.000000];
		sleep 150;
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.000000] speed [3.000000];
	}
	if( gun_1 == 2 )
	{
		emit-sfx UNIT_SFX1 from flare3;
		move barrel3 to z-axis [-3.00000] speed [500.000000];
		sleep 150;
		wait-for-move barrel3 along z-axis;
		move barrel3 to z-axis [0.000000] speed [3.000000];
	}
	++gun_1;
	if( gun_1 == 3 )
	{
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = gun_1;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn minigun1 to y-axis heading speed <200.016484>;
	turn minibar1 to x-axis <0.000000> - pitch speed <100.005495>;

	wait-for-turn minigun1 around y-axis;
	wait-for-turn minibar1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
		emit-sfx UNIT_SFX2 from miniflare1;
		sleep 100;
}

QuerySecondary(piecenum)
{
	piecenum = miniflare1;
}

AimFromSecondary(piecenum)
{
	piecenum = minigun1;
}

AimTertiary(heading, pitch)
{
	while (canfire == 0)
	{
		sleep 500;
	}
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

FireTertiary()
{
	++gun_3;
	if( gun_3 == 10 )
	{
		gun_3 = 6;
	}
}

QueryTertiary(piecenum)
{
	piecenum = gun_3;
}

AimFromTertiary(piecenum)
{
	piecenum = gun_3;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
		turn minigun2 to y-axis heading speed <200.016484>;
		turn minibar2 to x-axis <0.000000> - pitch speed <100.005495>;
		
	wait-for-turn minigun2 around y-axis;
	wait-for-turn minibar2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon4()
{
		emit-sfx UNIT_SFX2 from miniflare2;
		sleep 100;
}

QueryWeapon4(piecenum)
{
	piecenum = miniflare2;
}

AimFromWeapon4(piecenum)
{
	piecenum = minigun2;
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	turn minigun3 to y-axis heading speed <200.016484>;
	turn minibar3 to x-axis <0.000000> - pitch speed <100.005495>;
	wait-for-turn minigun3 around y-axis;
	wait-for-turn minibar3 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon5()
{
		emit-sfx UNIT_SFX2 from miniflare3;
		sleep 100;
}

QueryWeapon5(piecenum)
{
	piecenum = miniflare3;
}

AimFromWeapon5(piecenum)
{
	piecenum = minigun3;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode miniflare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode miniflare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode miniflare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode mis1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode mis2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode mis3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rocker1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rocker2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeves type SHATTER | BITMAP1;
		explode radar type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode miniflare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode miniflare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode miniflare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode mis1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode mis2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode mis3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rocker1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rocker2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeves type SHATTER | BITMAP1;
		explode radar type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode miniflare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode miniflare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode miniflare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode mis1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode mis2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode mis3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rocker1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rocker2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeves type SHATTER | BITMAP1;
		explode radar type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode miniflare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode miniflare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode miniflare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode mis1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode mis2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode mis3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rocker1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rocker2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeves type SHATTER | BITMAP1;
	explode radar type SHATTER | BITMAP1;
}
