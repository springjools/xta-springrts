#define TA			// This is a TA script
#define height 593536
#define carheight 3248581

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, pad, nanobar, nano1, nano2, point1, point2, tower, tower_naval1, tower_naval2, newno, newnoarm, pole;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging, depth, kbuild, ifcar, nanostate;

// Signal definitions
#define SIG_ACTIVATE			2

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

#include "sfxtype.h"
#include "exptype.h"

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

activatescr()
{
	signal 4;
	set-signal-mask 4;
	if( TRUE )
	{
		dont-cache nanobar;
		dont-cache nano1;
		dont-cache nano2;
		set ARMORED to 0;
	}
	if( TRUE )
	{
		turn nanobar to z-axis <90> speed <90>;
		move nanobar to x-axis [2.037482] speed [2.037482];
		move nano1 to y-axis [3] speed [3];
		move nano2 to y-axis [3] speed [3];
		wait-for-move nano1 along y-axis;
	}
	if( TRUE )
	{
		cache nanobar;
		cache nano1;
		cache nano2;
	}
}

deactivatescr()
{
	signal 4;
	set-signal-mask 4;
	if( TRUE )
	{
		dont-cache nanobar;
		dont-cache nano1;
		dont-cache nano2;
	}
	if( TRUE )
	{
		turn nanobar to z-axis <0> speed <90>;
		move nanobar to x-axis [0] speed [2.037482];
		move nano1 to y-axis [0] speed [3];
		move nano2 to y-axis [0] speed [3];
		wait-for-move nano1 along y-axis;
	}
	if( TRUE )
	{
		cache nanobar;
		cache nano1;
		cache nano2;
		set ARMORED to 1;
	}
}

bubble()
{
	emit-sfx 256 | 3 from nano1;
	sleep 200;
	emit-sfx 256 | 3 from nano2;
	sleep 200;
	emit-sfx 256 | 3 from point1;
	sleep 200;
	emit-sfx 256 | 3 from point2;
	sleep 200;
	emit-sfx 256 | 3 from tower_naval1;
	sleep 200;
	emit-sfx 256 | 3 from nanobar;
	sleep 200;
	emit-sfx 256 | 3 from body;
	sleep 200;
	emit-sfx 256 | 3 from pad;
	sleep 200;
	emit-sfx 256 | 3 from base;
	sleep 200;
	emit-sfx 256 | 3 from tower_naval2;
	sleep 200;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	if( depth )
	{
		{
			healthpercent = get HEALTH;
			if( healthpercent < 66 )
			{
				smoketype = 256 | 2;
				if( Rand( 1, 66 ) < healthpercent )
				{
					smoketype = 256 | 1;
				}
				emit-sfx smoketype from base;
			}
			sleeptime = healthpercent * 50;
			if( sleeptime < 200 )
			{
				sleeptime = 200;
			}
			sleep sleeptime;
		}
	}
	if( !depth )
	{
		healthpercent = get HEALTH;
		sleeptime = healthpercent*healthpercent;
		if( healthpercent < 66 )
		{
			emit-sfx 256 | 3 from base;
			sleep sleeptime;
			emit-sfx 256 | 3 from tower;
			if( Rand( 1, 66 ) > healthpercent )
			{
				start-script bubble();
				sleep sleeptime;
			}
		}
	}
	start-script smokeunit();
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

movenano(nano_ID)
{
	nanostate=1;
	var xz, z, x;
	var count;
	while(get UNIT_BUILD_PERCENT_LEFT(nano_ID))
	{
		xz=get PIECE_XZ(base) - get UNIT_XZ(nano_ID);
		SECURE_XZ
		turn newnoarm to y-axis get XZ_ATAN(get PIECE_XZ(base) - get UNIT_XZ(nano_ID)) now;
		move newno to z-axis get XZ_HYPOT(xz) now;
		move newno to y-axis ((get UNIT_Y(nano_ID)) - (get PIECE_Y(base))) now;
		sleep 1;
	}
	nanostate=0;
}


detectplane()
{
	var xz, x, z, unit_ID, distance;
	var max, min;
	max = get MAX_ID;
	min = get MIN_ID;
	while(kbuild)
	{
		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if (get UNIT_BUILD_PERCENT_LEFT(unit_ID))
			{
				if (get UNIT_IS_ON_THIS_COMP(unit_ID))
				{
					//if (get UNIT_HEIGHT(unit_ID) == height)
					//{
						if (get UNIT_XZ(unit_ID) == get PIECE_XZ(pad))
						{
							if (get UNIT_Y(unit_ID) == get PIECE_Y(pad))
							{
								drop-unit unit_ID;
								start-script movenano(unit_ID);
								sleep 2222;
								if (get UNIT_BUILD_PERCENT_LEFT(unit_ID))
								{
									attach-unit unit_ID to pad;
									if (get UNIT_XZ(unit_ID) != get PIECE_XZ(pad))
									{
										if (get UNIT_Y(unit_ID) != get PIECE_Y(pad))
										{
											move pole to y-axis [28] speed [10];
										}
									}
									if (get UNIT_XZ(unit_ID) == get PIECE_XZ(pad))
									{
										if (get UNIT_Y(unit_ID) == get PIECE_Y(pad))
										{
											move pole to y-axis [0] speed [10];
										}
									}
									while(get UNIT_BUILD_PERCENT_LEFT(unit_ID))
									{
										sleep 100;
									}
								}
							}
						}
					//}
				}
			}
		}
		sleep 1500;
	}
	move pole to y-axis [0] speed [10];
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	kbuild=1;
	if(ifcar)
	{
		sleep 1;
		if(get UNIT_IS_ON_THIS_COMP(get MY_ID))
		{
			start-script detectplane();
		}
	}
}

Stop()
{
	sleep 7500;
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	start-script deactivatescr();
	kbuild=0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

detectcar()
{
	sleep rand(500,5000);
	var myteam;
	var unit_ID;
	var max, min;
	max = get MAX_ID;
	min = get MIN_ID;
	myteam = get UNIT_TEAM(get MY_ID);
	while(1)
	{
		ifcar=0;
		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if (!(get UNIT_BUILD_PERCENT_LEFT(unit_ID)))
			{
				if (get UNIT_IS_ON_THIS_COMP(unit_ID))
				{
					if (get UNIT_HEIGHT(unit_ID) == carheight)
					{
						if (get UNIT_TEAM(unit_ID) == myteam)
						{
							ifcar=1;
							
						}
					}
				}
			}
		}
		sleep 2500;
	}
}

Create()
{
	ifcar=0;
	dont-cache pole;
	dont-shade base;
	dont-shade pad;
	dont-shade body;
	dont-shade nanobar;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade tower;
	dont-shade tower_naval1;
	dont-shade tower_naval2;
	Static_Var_1 = 1;
	nanostate=0;
	call-script InitState();
	start-script SmokeUnit();
	kbuild=0;
	depth = get PIECE_Y(base)/* - get GROUND_HEIGHT(get PIECE_XZ(base))*/;
	if(depth == 0)
	{
		hide tower;
	}
	if(depth > 0)
	{
		hide tower_naval1;
		hide tower_naval2;
	}
	move tower to y-axis [20] now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	if(get UNIT_IS_ON_THIS_COMP(get MY_ID))
	{
		start-script detectcar();
	}
}

QueryNanoPiece(piecenum)
{
	if(nanostate==0)
	{
		if( Static_Var_1 == 1 )
		{
			piecenum = point1;
		}
		if( Static_Var_1 == 2 )
		{
			piecenum = point2;
		}
		++Static_Var_1;
		if( Static_Var_1 == 3 )
		{
			Static_Var_1 = 1;
		}
	}
	if(nanostate == 1)
	{
		piecenum = newno;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	dont-cache pad;
	spin pad around y-axis speed <30.005495>;
}

StopBuilding()
{
	cache pad;
	stop-spin pad around y-axis;
	turn pad to y-axis <0> speed <30.005495>;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 + (!depth);
		explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode pad type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode nanobar type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode tower type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode tower_naval1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode tower_naval2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode nano2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode point1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode point2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode pad type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode nanobar type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode tower type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode nano2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode point1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode point2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode tower_naval1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode tower_naval2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode pad type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode nanobar type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode tower type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode nano2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode point1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode point2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode tower_naval1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode tower_naval2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
		explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode pad type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode nanobar type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode tower type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode nano2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode point1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode point2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode tower_naval1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode tower_naval2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
