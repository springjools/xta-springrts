#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rgunflare, lgunflare, rmispoint,
       lmispoint, head, torso, hips, mpack, rleg, rthigh, lthigh, lleg, luparm, ruparm, rarm,
       rfoot2, lfoot2, larm, rbarrel1, lbarrel1, body, rrotate, lrotate, torsoz, rrock, lrock, lfoot, rfoot, lrockpoint, rrockpoint;

static-var  gun_1, gun_3, gun_4, bMoving, bAiming,
            restore_delay, sleepy1, sleepy2/*, crazy, smokeyl, smokeyr*/;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			32
#define SIG_MOVE			16


walk()
{
	if( bmoving )
	{
		move hips to y-axis [1] speed [2];
		turn hips to z-axis <-5.> now;
		turn rthigh to z-axis <5.> now;
		turn lthigh to z-axis <5.> now;
		turn body to z-axis <6> speed <100>;
		
		turn lleg to x-axis <15.> speed <110>; 		turn lfoot to x-axis <-15.> speed <110>;
		move hips to y-axis [0] speed [2];
		
		turn lthigh to x-axis <20.> speed <60>;		turn lfoot2 to x-axis <-20.> speed <60>;
		turn rthigh to x-axis <-20.> speed <55>;		turn rfoot2 to x-axis <20.> speed <240>;
		turn rleg to x-axis <-15.> speed <115>;		turn rfoot to x-axis <15.> speed <115>;
		sleep 500;
		turn rleg to x-axis <15.> speed <105>;		turn rfoot to x-axis <-15.> speed <105>;
		
		move hips to y-axis [0] speed [2];
	
		sleep 200;
		
		move hips to y-axis [1] speed [2];
		turn hips to z-axis <5.> now;
		turn lthigh to z-axis <-5.> now;
		turn rthigh to z-axis <-5.> now;
		turn body to z-axis <-6> speed <100>;
	}
	while( bmoving )
	{
		if( bmoving )
		{
			turn rthigh to x-axis <30.> speed <55>;			turn rfoot2 to x-axis <-30.> speed <55>;
			turn lthigh to x-axis <-30.> speed <60>;			turn lfoot2 to x-axis <30.> speed <360>;
			turn lleg to x-axis <-20.> speed <110>;			turn lfoot to x-axis <20.> speed <110>;
			sleep 700;
			
			turn lleg to x-axis <20.> speed <110>;			turn lfoot to x-axis <-20.> speed <110>;
			
			
			move hips to y-axis [0] speed [2];

			sleep 400;
			
			move hips to y-axis [1] speed [2];
			turn hips to z-axis <-5.> now;
			turn rthigh to z-axis <5.> now;
			turn lthigh to z-axis <5.> now;
			
			
			turn body to z-axis <6> speed <100>;
		}
		if( bmoving )
		{

			turn lthigh to x-axis <30.> speed <60>;			turn lfoot2 to x-axis <-30.> speed <60>;
			turn rthigh to x-axis <-30.> speed <55>;			turn rfoot2 to x-axis <30.> speed <360>;
			turn rleg to x-axis <-20.> speed <115>;			turn rfoot to x-axis <20.> speed <115>;
			
			sleep 700;
			
			turn rleg to x-axis <20.> speed <105>;			turn rfoot to x-axis <-20.> speed <105>;
			
			move hips to y-axis [0] speed [2];

			sleep 400;
			
			move hips to y-axis [1] speed [2];
			turn hips to z-axis <5.> now;
			turn lthigh to z-axis <-5.> now;
			turn rthigh to z-axis <-5.> now;
			

			turn body to z-axis <-6> speed <100>;
		}
	}
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*smoker(a)
{
	while(smokeyr && a)
	{
		emit-sfx 256 | 1 from rrock;
		emit-sfx 256 | 2 from rrock;
		sleep 100;
	}
	while(smokeyl && !a)
	{
		emit-sfx 256 | 1 from lrock;
		emit-sfx 256 | 2 from lrock;
		sleep 100;
	}
}

crazy_mis(a)
{
	if(a)
	{
		move rrock to z-axis [150] speed [100];
		smokeyr = 1;
		start-script smoker(a);
		wait-for-move rrock along z-axis;
		smokeyr = 0;
		move rrock to z-axis 0 now;
	}
	if(!a)
	{
		move lrock to z-axis [150] speed [100];
		smokeyl = 1;
		start-script smoker(a);
		wait-for-move lrock along z-axis;
		smokeyl = 0;
		move lrock to z-axis 0 now;
	}
}

crazy_coord()
{
	var crazy_value;
	crazy_value = 0;
	while(crazy)
	{
		start-script crazy_mis(crazy_value);
		sleep 500;
		crazy_value = !crazy_value;
	}
}*/

Create()
{
	hide lgunflare;
	hide rgunflare;
	hide lrockpoint;
	hide rrockpoint;
	bMoving = FALSE;
	bAiming = FALSE;
	gun_1 = 0;
	gun_3 = 2;
	gun_4 = 0;
	sleepy1=0;
	sleepy2=0;
	restore_delay = 2000;
	//crazy=0;
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script walk();
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	turn lthigh to x-axis <0.> speed <100.>;
	turn rthigh to x-axis <0.> speed <100.>;
	turn lleg to x-axis <0.> speed <200.>;
	turn rleg to x-axis <0.> speed <200.>;
	
	turn lthigh to z-axis <0.> speed <100.>;
	turn rthigh to z-axis <0.> speed <100.>;
	turn lleg to z-axis <0.> speed <200.>;
	turn rleg to z-axis <0.> speed <200.>;
	
	move hips to y-axis [0.] speed [40.];
	turn hips to z-axis <0.> now;
	
	//turn rtoe to x-axis <-0.> speed <200.>;
	//turn rthumb to x-axis <0.> speed <200.>;
	//turn ltoe to x-axis <-0.> speed <200.>;
	//turn lthumb to x-axis <0.> speed <200.>;
	turn rfoot2 to x-axis <0.> speed <200.>;
	turn lfoot2 to x-axis <0.> speed <200.>;
	
	turn rfoot to x-axis <0.> speed <200.>;
	turn lfoot to x-axis <0.> speed <200.>;
	
	//turn rtoe to z-axis <-0.> speed <200.>;
	//turn rthumb to z-axis <0.> speed <200.>;
	//turn ltoe to z-axis <-0.> speed <200.>;
	//turn lthumb to z-axis <0.> speed <200.>;
	
	turn rfoot2 to z-axis <0.> speed <200.>;
	turn lfoot2 to z-axis <0.> speed <200.>;
	
	turn rfoot to z-axis <0.> speed <200.>;
	turn lfoot to z-axis <0.> speed <200.>;
	
	turn body to z-axis <0.> speed <200.>;
}

RestoreAfterDelay()
{
	sleep 1750;
	//crazy=0;
	sleep 2250;
	while (sleepy2 || sleepy1)
	{
		sleep 100;
	}
	turn torso to y-axis <0.000000> speed <90.016484>;
	turn luparm to x-axis <0.000000> speed <50.005495>;
	turn ruparm to x-axis <0.000000> speed <50.005495>;
	wait-for-turn torso around y-axis;
	wait-for-turn rarm around x-axis;
	wait-for-turn larm around x-axis;
	wait-for-turn head around y-axis;
	wait-for-turn head around x-axis;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn head to y-axis <360> speed <160.6484>;
	turn torso to y-axis heading speed <160.6484>;
	turn ruparm to x-axis <0.> - pitch speed <160>;
	turn luparm to x-axis <0.> - pitch speed <160>;
	wait-for-turn torso around y-axis;
	wait-for-turn rarm around x-axis;
	wait-for-turn larm around x-axis;
	/*if (!crazy)
	{
		crazy=1;
		start-script crazy_coord();
	}*/
	//start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	bAiming = TRUE;
	start-script RestoreAfterDelay();
	return (1);
}

flare(p)
{
	if ( p == 0 )
	{
		emit-sfx UNIT_SFX1 from rgunflare;
		sleep 200;
	}
	if ( p == 1 )
	{
		emit-sfx UNIT_SFX1 from lgunflare;
		sleep 200;
	}
}

rgun()
{
//	wait-for-turn rarm around z-axis;
	start-script flare(0);

	turn torsoz to y-axis <-10> now;
	turn rarm to y-axis <10> now;
	turn larm to y-axis <10> now;
	turn torsoz to y-axis <0> speed <15>;
	turn rarm to y-axis <0> speed <15>;
	turn larm to y-axis <0> speed <15>;
	turn head to y-axis <10> now;
	turn head to y-axis <0> speed <15>;
	move rbarrel1 to z-axis [-4.000000] now;
	move rbarrel1 to z-axis [0.000000] speed [7.500000];
	turn rrotate to z-axis <120.000000> speed <200.000000>;
	//wait-for-turn rrotate around z-axis;
	turn rrotate to z-axis <0.000000> now;
	//wait-for-turn rrotate around z-axis;
	gun_1= !gun_1;
}

lgun()
{
//	wait-for-turn rarm around z-axis;
	start-script flare(1);
	turn torsoz to y-axis <10> now;
	turn larm to y-axis <-10> now;
	turn rarm to y-axis <-10> now;
	turn torsoz to y-axis <0> speed <15>;
	turn larm to y-axis <0> speed <15>;
	turn rarm to y-axis <0> speed <15>;
	turn head to y-axis <-10> now;
	turn head to y-axis <0> speed <15>;
	move lbarrel1 to z-axis [-4.000000] now;
	move lbarrel1 to z-axis [0.000000] speed [7.500000];
	turn lrotate to z-axis <120.000000> speed <200.000000>;
	//wait-for-turn lrotate around z-axis;
	turn lrotate to z-axis <0.000000> now;
	//wait-for-turn lrotate around z-axis;
	gun_1= !gun_1;
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		start-script rgun();
		return(0);
	}
	if( gun_1 == 1 )
	{
		start-script lgun();
		return(0);
	}
}

FireTertiary()
{
	++gun_3;
	if( gun_3 == 4 )
	{
		gun_3 = 2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = head;
}

AimFromTertiary(piecenum)
{
	piecenum = head;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

QueryTertiary(piecenum)
{
	piecenum = gun_3;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

AimWeapon4(heading, pitch)
{
//	if( bAiming == 1 )
//	{
//		return (0);
//	}
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	//turn head to y-axis <360> speed <160.6484>;
	//turn torso to y-axis heading speed <160.6484>;
	//turn ruparm to x-axis <0.> - pitch speed <160>;
	//turn luparm to x-axis <0.> - pitch speed <160>;
	//wait-for-turn torso around y-axis;
	//wait-for-turn rarm around x-axis;
	//wait-for-turn larm around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon4(piecenum)
{
	piecenum = lrockpoint;
}

AimFromWeapon4(piecenum)
{
	piecenum = head;
}

FireWeapon4()
{
		emit-sfx UNIT_SFX2 from lrockpoint;
}

AimWeapon5(heading, pitch)
{
//	if( bAiming == 1 )
//	{
//		return (0);
//	}
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	//turn head to y-axis <360> speed <160.6484>;
	//turn torso to y-axis heading speed <160.6484>;
	//turn ruparm to x-axis <0.> - pitch speed <160>;
	//turn luparm to x-axis <0.> - pitch speed <160>;
	//wait-for-turn torso around y-axis;
	//wait-for-turn rarm around x-axis;
	//wait-for-turn larm around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon5(piecenum)
{
	piecenum = rrockpoint;
}

AimFromWeapon5(piecenum)
{
	piecenum = head;
}

FireWeapon5()
{
		emit-sfx UNIT_SFX2 from rrockpoint;
}

Killed(severity, corpsetype)
{
	hide lgunflare;
	hide rgunflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode head type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode hips type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lgunflare type BITMAPONLY | BITMAP1;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rgunflare type BITMAPONLY | BITMAP4;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode head type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode hips type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lgunflare type BITMAPONLY | BITMAP1;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rgunflare type BITMAPONLY | BITMAP4;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode torso type BITMAPONLY | BITMAP1;
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode head type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode hips type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lgunflare type BITMAPONLY | BITMAP1;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rgunflare type BITMAPONLY | BITMAP4;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode head type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode hips type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lgunflare type BITMAPONLY | BITMAP1;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rgunflare type BITMAPONLY | BITMAP4;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode torso type BITMAPONLY | BITMAP1;
}
