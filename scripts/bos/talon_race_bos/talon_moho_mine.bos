#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, drill, GP, circle1, circle2, spinner, smoker;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging, smoking;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Smoke()
{
	emit-sfx UNIT_SFX1 from smoker;
	sleep 10;
	emit-sfx UNIT_SFX1 from smoker;
	sleep 10;
	if(smoking)
	{
		start-script Smoke();
	}
}

Go()
{
	smoking=1;
//	spin circle1 around x-axis speed Static_Var_1 accelerate <1>;
//	spin circle2 around x-axis speed Static_Var_2 accelerate <-2>;
//	spin drill around x-axis speed Static_Var_1 accelerate <1>;
	start-script Smoke();
}

Stop()
{
	smoking=0;
//	stop-spin circle1 around x-axis decelerate <1>;
//	stop-spin circle2 around x-axis decelerate <-2>;
//	stop-spin drill around x-axis decelerate <1>;
//	wait-for-turn drill around y-axis;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	spin spinner around y-axis speed <5000>;
	dont-shade drill;
	dont-shade base;
	hide smoker;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	call-script InitState();
	//start-script SmokeUnit();
	dont-cache drill;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 30;
	Static_Var_2 = Func_Var_1 * -60;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode drill type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode circle1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode circle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gp type BITMAPONLY | BITMAP3;
		explode spinner type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode smoker type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode drill type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode circle1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode circle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gp type BITMAPONLY | BITMAP3;
		explode spinner type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode smoker type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode drill type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode circle1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode circle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gp type BITMAPONLY | BITMAP3;
		explode spinner type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode smoker type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode drill type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode circle1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode circle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode spinner type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode smoker type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gp type BITMAPONLY | BITMAP3;
}
