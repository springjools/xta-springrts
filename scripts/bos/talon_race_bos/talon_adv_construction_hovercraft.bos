#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, nanoturd, nanobase, nanoturn, door1, door2, nano1,
       nano2, nano3, lath1, lath2, lath3, w1, w2, w3,
       w4, w5, w6, w7, w8, w9, w10, w11,
       w12, wakes;

static-var  Static_Var_1, Static_Var_2, Static_Var_4, Static_Var_5;

// Signal definitions
#define SIG_MOVE			2

#define SMOKEPIECE1 base

#include "StateChg.h"

WobbleUnit()
{
	while( TRUE )
	{
		if( Static_Var_4 )
			move base to y-axis [2.250000] speed [2.50000];
		else
			move base to y-axis [-0.250000] speed [2.50000];
		Static_Var_4 = !Static_Var_4;
		sleep 750;
	}
}

HitByWeapon(anglex, anglez)
{
	signal 4;
	set-signal-mask 4;
	turn body to z-axis <0.010989> * anglez speed <105.016484>;
	turn body to x-axis <0.010989> * anglex speed <105.016484>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <30.005495>;
	turn body to x-axis <0.000000> speed <30.005495>;
}

BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= [1.000000] )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 80 / 40;
		}
		turn body to z-axis Func_Var_3 speed <60.000000>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
}

activatescr()
{
	if( TRUE )
	{
		turn door1 to y-axis <180.000000> speed <-180.000000>;
		turn door2 to y-axis <180.000000> speed <-180.000000>;
		wait-for-turn door1 around y-axis;
	}
	if( TRUE )
	{
		move nano1 to y-axis [6.000000] speed [6.000000];
		move nano2 to y-axis [8.000000] speed [8.000000];
		move nano3 to y-axis [10.000000] speed [10.000000];
		wait-for-move nano1 along y-axis;
	}
	if( TRUE )
	{
		spin nano1 around y-axis speed <360.000000>;
		spin nano2 around y-axis speed <90.000000>;
		spin nano3 around y-axis speed <180.000000>;
	}
	sleep 39;
}

deactivatescr()
{
	if( TRUE )
	{
		stop-spin nano1 around y-axis;
		stop-spin nano2 around y-axis;
		stop-spin nano3 around y-axis;
		turn nano1 to y-axis <0.000000> speed <360.000000>;
		turn nano2 to y-axis <0.000000> speed <360.000000>;
		turn nano3 to y-axis <0.000000> speed <360.000000>;
		wait-for-turn nano2 around y-axis;
		wait-for-turn nano1 around y-axis;
		wait-for-turn nano3 around y-axis;
	}
	if( TRUE )
	{
		move nano1 to y-axis [0.000000] speed [6.000000];
		move nano2 to y-axis [0.000000] speed [8.000000];
		move nano3 to y-axis [0.000000] speed [10.000000];
		wait-for-move nano1 along y-axis;
	}
	if( TRUE )
	{
		cache nano1;
		cache nano2;
		cache nano3;
		cache body;
		turn door1 to y-axis <0.000000> speed <-180.000000>;
		turn door2 to y-axis <0.000000> speed <-180.000000>;
		wait-for-turn door1 around y-axis;
	}
	sleep 27;
}
#include "SmokeUnit.h"

Go()
{
	call-script activatescr();
	turn nanoturd to y-axis Static_Var_2 speed <180.000000>;
	move nanobase to z-axis [25.000000] speed [15.000000];
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	move nanobase to z-axis [0.000000] speed [15.000000];
	turn nanoturd to y-axis <0.000000> now;
	call-script deactivatescr();
}
#define ACTIVATECMD			call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

StopMoving()
{
	signal SIG_MOVE;
}

waking()
{
	while( TRUE )
	{
		if( Static_Var_1 == 2 OR Static_Var_1 == 1 )
		{
			emit-sfx 3 from w1;
			emit-sfx 3 from w2;
			emit-sfx 3 from w3;
			emit-sfx 3 from w4;
			emit-sfx 3 from w5;
			emit-sfx 3 from w6;
			emit-sfx 3 from w7;
			emit-sfx 3 from w8;
			emit-sfx 3 from w9;
			emit-sfx 3 from w10;
			emit-sfx 3 from w11;
			emit-sfx 3 from w12;
			emit-sfx 5 from w1;
			emit-sfx 5 from w2;
			emit-sfx 5 from w3;
			emit-sfx 5 from w4;
			emit-sfx 5 from w5;
			emit-sfx 5 from w6;
			emit-sfx 5 from w7;
			emit-sfx 5 from w8;
			emit-sfx 5 from w9;
			emit-sfx 5 from w10;
			emit-sfx 5 from w11;
			emit-sfx 5 from w12;
		}
		sleep 325;
	}
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

Create()
{
	start-script waking();
	Static_Var_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
	start-script BankClerck();
	Static_Var_5 = 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1;
	}
	start-script WobbleUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_5 == 1 )
	{
		piecenum = lath1;
	}
	if( Static_Var_5 == 2 )
	{
		piecenum = lath2;
	}
	if( Static_Var_5 == 3 )
	{
		piecenum = lath3;
	}
	++Static_Var_5;
	if( Static_Var_5 == 4 )
	{
		Static_Var_5 = 1;
	}
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 + ( Static_Var_1 == 1 OR Static_Var_1 == 2 );
		explode lath1 type FALL | FIRE | SMOKE | BITMAP1;
		explode lath1 type FALL | FIRE | SMOKE | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode nano1 type FALL | BITMAP3;
		explode nano2 type FALL | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanoturd type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lath1 type FALL | FIRE | SMOKE | BITMAP1;
		explode lath1 type FALL | FIRE | SMOKE | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode nano1 type SHATTER | BITMAP3;
		explode nano2 type SHATTER | BITMAP3;
		explode nano3 type SHATTER | BITMAP3;
		explode door1 type FALL | BITMAP4;
		explode door2 type FALL | BITMAP5;
		explode nanoturd type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lath1 type FALL | FIRE | SMOKE | BITMAP1;
		explode lath1 type FALL | FIRE | SMOKE | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode nano1 type SHATTER | FIRE | SMOKE | BITMAP3;
		explode nano2 type SHATTER | FIRE | SMOKE | BITMAP3;
		explode nano3 type SHATTER | FIRE | SMOKE | BITMAP3;
		explode door1 type FALL | FIRE | SMOKE | BITMAP3;
		explode door2 type FALL | FIRE | SMOKE | BITMAP3;
		explode nanoturd type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode lath1 type FALL | FIRE | SMOKE | BITMAP1;
	explode lath1 type FALL | FIRE | SMOKE | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode nano1 type SHATTER | FIRE | SMOKE | BITMAP3;
	explode nano2 type SHATTER | FIRE | SMOKE | BITMAP3;
	explode nano3 type SHATTER | FIRE | SMOKE | BITMAP3;
	explode door1 type FALL | FIRE | SMOKE | BITMAP3;
	explode door2 type FALL | FIRE | SMOKE | BITMAP3;
	explode nanoturd type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type BITMAPONLY | BITMAP2;
}
