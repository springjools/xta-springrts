#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  crystal, base, body, Lblock1, Lblock2, Lblock3, Ublock1, Ublock2, Ublock3, Emitters, pipe1, pipe2, pipe3, glow,
	light, light2;


#include "sfxtype.h"
#include "exptype.h"

static-var shared;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 3;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 3;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

bubbles()
{
	while(1)
	{
		emit-sfx 256 | 3 from UBlock2;
		emit-sfx 256 | 3 from UBlock1;
		emit-sfx 256 | 3 from UBlock3;
		if(!shared)
		{
			sleep 250;
		}
		sleep 250;
	}
}
		

Create()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin crystal around y-axis speed <100>;
	start-script SmokeUnit();
	start-script bubbles();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode crystal type SHATTER | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode emitters type BITMAPONLY | BITMAP3;
		explode lblock1 type BITMAPONLY | BITMAP4;
		explode ublock1 type BITMAPONLY | BITMAP5;
		explode pipe1 type BITMAPONLY | BITMAP1;
		explode lblock2 type BITMAPONLY | BITMAP4;
		explode ublock2 type BITMAPONLY | BITMAP5;
		explode pipe2 type BITMAPONLY | BITMAP1;
		explode lblock2 type BITMAPONLY | BITMAP4;
		explode ublock2 type BITMAPONLY | BITMAP5;
		explode pipe2 type BITMAPONLY | BITMAP1;
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode crystal type SHATTER | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode emitters type BITMAPONLY | BITMAP3;
		explode lblock1 type BITMAPONLY | BITMAP4;
		explode ublock1 type BITMAPONLY | BITMAP5;
		explode pipe1 type BITMAPONLY | BITMAP1;
		explode lblock2 type BITMAPONLY | BITMAP4;
		explode ublock2 type BITMAPONLY | BITMAP5;
		explode pipe2 type BITMAPONLY | BITMAP1;
		explode lblock2 type BITMAPONLY | BITMAP4;
		explode ublock2 type BITMAPONLY | BITMAP5;
		explode pipe2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode crystal type SHATTER | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode emitters type BITMAPONLY | BITMAP3;
		explode lblock1 type BITMAPONLY | BITMAP4;
		explode ublock1 type BITMAPONLY | BITMAP5;
		explode pipe1 type BITMAPONLY | BITMAP1;
		explode lblock2 type BITMAPONLY | BITMAP4;
		explode ublock2 type BITMAPONLY | BITMAP5;
		explode pipe2 type BITMAPONLY | BITMAP1;
		explode lblock2 type BITMAPONLY | BITMAP4;
		explode ublock2 type BITMAPONLY | BITMAP5;
		explode pipe2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
		explode crystal type SHATTER | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode emitters type BITMAPONLY | BITMAP3;
		explode lblock1 type BITMAPONLY | BITMAP4;
		explode ublock1 type BITMAPONLY | BITMAP5;
		explode pipe1 type BITMAPONLY | BITMAP1;
		explode lblock2 type BITMAPONLY | BITMAP4;
		explode ublock2 type BITMAPONLY | BITMAP5;
		explode pipe2 type BITMAPONLY | BITMAP1;
		explode lblock2 type BITMAPONLY | BITMAP4;
		explode ublock2 type BITMAPONLY | BITMAP5;
		explode pipe2 type BITMAPONLY | BITMAP1;
}
