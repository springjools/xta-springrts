#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, gun, barrel1, barrel2, flare1, flare2,
	   leghl, foothl, leghr, foothr, legfr, footfr, legfl, footfl;

static-var  bmoving, restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Walk()
{
	while( TRUE )
	{
		if( bMoving )
		{
			turn leghr to x-axis <0> now;
			turn legfr to x-axis <0> now;
			turn leghl to x-axis <40> now;
			turn legfl to x-axis <0> now;
			turn foothr to x-axis <0> now;
			turn footfr to x-axis <0> now;
			turn foothl to x-axis <25> now;
			turn footfl to x-axis <0> now;
			turn leghr to x-axis <20> speed <300>;
			turn legfr to x-axis <-15> speed <225>;
			turn leghl to x-axis <20> speed <300>;
			turn legfl to x-axis <15> speed <225>;
			turn foothr to x-axis <-20> speed <300>;
			turn foothl to x-axis <15> speed <150>;
			turn footfl to x-axis <-15> speed <225>;
			wait-for-turn leghr around x-axis;
		}
		if( bMoving )
		{
			turn leghr to x-axis <40> speed <300>;
			turn legfr to x-axis <-20> speed <75>;
			turn leghl to x-axis <0> speed <300>;
			turn legfl to x-axis <30> speed <225>;
			turn foothr to x-axis <0> speed <300>;
			turn footfr to x-axis <10> speed <150>;
			turn foothl to x-axis <0> speed <225>;
			turn footfl to x-axis <0> speed <225>;
			wait-for-turn leghr around x-axis;
		}
		if( bMoving )
		{
			turn leghr to x-axis <50> speed <150>;
			turn legfr to x-axis <-15> speed <75>;
			turn leghl to x-axis <-20> speed <300>;
			turn legfl to x-axis <35> speed <75>;
			turn foothr to x-axis <15> speed <225>;
			turn footfr to x-axis <15> speed <75>;
			turn footfl to x-axis <10> speed <150>;
			wait-for-turn leghr around x-axis;
		}
		if( bMoving )
		{
			turn leghr to x-axis <40> speed <150>;
			turn legfr to x-axis <0> speed <225>;
			turn leghl to x-axis <-30> speed <150>;
			turn legfl to x-axis <30> speed <75>;
			turn foothr to x-axis <25> speed <150>;
			turn footfr to x-axis <0> speed <225>;
			turn foothl to x-axis <10> speed <150>;
			turn footfl to x-axis <15> speed <75>;
			wait-for-turn leghr around x-axis;
		}
		if( bMoving )
		{
			turn leghr to x-axis <20> speed <300>;
			turn legfr to x-axis <15> speed <225>;
			turn leghl to x-axis <-20> speed <150>;
			turn legfl to x-axis <15> speed <225>;
			turn foothr to x-axis <15> speed <150>;
			turn footfr to x-axis <-15> speed <225>;
			turn foothl to x-axis <20> speed <150>;
			turn footfl to x-axis <10> speed <75>;
			wait-for-turn leghr around x-axis;
		}
		if( bMoving )
		{
			turn leghr to x-axis <0> speed <300>;
			turn legfr to x-axis <30> speed <225>;
			turn leghl to x-axis <0> speed <300>;
			turn legfl to x-axis <0> speed <225>;
			turn foothr to x-axis <0> speed <225>;
			turn footfr to x-axis <0> speed <225>;
			turn foothl to x-axis <0> speed <300>;
			turn footfl to x-axis <0> speed <150>;
			wait-for-turn leghr around x-axis;
		}
		if( bMoving )
		{
			turn leghr to x-axis <-20> speed <300>;
			turn legfr to x-axis <35> speed <75>;
			turn leghl to x-axis <20> speed <300>;
			turn legfl to x-axis <-15> speed <225>;
			turn footfr to x-axis <10> speed <150>;
			turn foothl to x-axis <-20> speed <300>;
			wait-for-turn leghr around x-axis;
		}
		if( bMoving )
		{
			turn leghr to x-axis <-30> speed <150>;
			turn legfr to x-axis <30> speed <75>;
			turn leghl to x-axis <40> speed <300>;
			turn legfl to x-axis <-20> speed <75>;
			turn foothr to x-axis <10> speed <150>;
			turn footfr to x-axis <15> speed <75>;
			turn foothl to x-axis <0> speed <300>;
			turn footfl to x-axis <10> speed <150>;
			wait-for-turn leghr around x-axis;
		}
		if( bMoving )
		{
			turn leghr to x-axis <-20> speed <150>;
			turn legfr to x-axis <15> speed <225>;
			turn leghl to x-axis <50> speed <150>;
			turn legfl to x-axis <-15> speed <75>;
			turn foothr to x-axis <20> speed <150>;
			turn footfr to x-axis <10> speed <75>;
			turn foothl to x-axis <15> speed <225>;
			turn footfl to x-axis <15> speed <75>;
			wait-for-turn leghr around x-axis;
		}
		if( bMoving )
		{
			turn leghr to x-axis <0> speed <300>;
			turn legfr to x-axis <0> speed <225>;
			turn leghl to x-axis <40> speed <150>;
			turn legfl to x-axis <0> speed <225>;
			turn foothr to x-axis <0> speed <300>;
			turn footfr to x-axis <0> speed <150>;
			turn foothl to x-axis <25> speed <150>;
			turn footfl to x-axis <0> speed <225>;
			wait-for-turn leghr around x-axis;
		}
		if ( !bMoving )
		{
			turn leghr to x-axis <0> speed <400>;
			turn legfr to x-axis <0> speed <300>;
			turn leghl to x-axis <0> speed <400>;
			turn legfl to x-axis <0> speed <300>;
			turn foothr to x-axis <0> speed <400>;
			turn footfr to x-axis <0> speed <400>;
			turn foothl to x-axis <0> speed <400>;
			turn footfl to x-axis <0> speed <400>;
			wait-for-turn leghr around x-axis;
		}
	}
}

Create()
{
	hide flare1;
	dont-cache flare1;
	hide flare2;
	dont-cache flare2;
	bMoving = FALSE;
	gun_1 = 0;
	restore_delay = 3000;
	start-script Walk();
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep restore_delay;
	turn turret to y-axis <0> speed <90>;
	turn gun to x-axis <0> speed <55>;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

AimFromPrimary (piecenum)
{
	piecenum = turret;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <70>;
	turn gun to x-axis <0> - pitch speed <40>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
	emit-sfx UNIT_SFX1 from flare1;
		gun_1 = 1;
		move barrel1 to z-axis [-2] speed [200];
		move barrel1 to z-axis [0] speed [2.5];
		sleep 150;
		return (0);
	}
	if( gun_1 == 1 )
	{
	emit-sfx UNIT_SFX1 from flare2;
		move barrel2 to z-axis [-2] speed [200];
		sleep 150;
		move barrel2 to z-axis [0] speed [2.5];
		gun_1 = 0;
		return (0);
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP4;
		explode foothr type BITMAPONLY | BITMAP3;
		explode footfr type BITMAPONLY | BITMAP3;
		explode foothl type BITMAPONLY | BITMAP3;
		explode footfl type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode gun type BITMAPONLY | BITMAP3;
		explode barrel1 type FALL | BITMAP4;
		explode barrel2 type BITMAPONLY | BITMAP4;
		explode foothr type BITMAPONLY | BITMAP3;
		explode footfr type BITMAPONLY | BITMAP3;
		explode foothl type BITMAPONLY | BITMAP3;
		explode footfl type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | BITMAP1;
		explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode gun type FALL | BITMAP3;
		explode barrel1 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode barrel2 type FALL | BITMAP4;
		explode leghr type BITMAPONLY | BITMAP4;
		explode legfr type BITMAPONLY | BITMAP4;
		explode leghl type BITMAPONLY | BITMAP4;
		explode legfl type BITMAPONLY | BITMAP4;
		explode foothr type FALL | BITMAP3;
		explode footfr type FALL | BITMAP3;
		explode foothl type FALL | BITMAP3;
		explode footfl type FALL | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leghr type BITMAPONLY | BITMAP4;
	explode legfr type BITMAPONLY | BITMAP4;
	explode leghl type BITMAPONLY | BITMAP4;
	explode legfl type BITMAPONLY | BITMAP4;
	explode foothr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode footfr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode foothl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode footfl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}