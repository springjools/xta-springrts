#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, door, turret, nano1, nano2, nanobits, w1, w2,
       w3, w4, w5, w6, w7, w8, w9, w10,
       w11, w12, wakes;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, Static_Var_4;

// Signal definitions
#define SIG_MOVE			2


RockOnWaves()
{
	while(1)
	{
		turn base to x-axis <1.0> speed <1.5>;
		move base to y-axis [0.0] speed [0.15];
		wait-for-turn base around x-axis;
		turn base to x-axis <-1.0> speed <1.5>;
		move base to y-axis [-0.1] speed [0.15];
		wait-for-move base along y-axis;
		move base to y-axis [0.0] speed [0.15];
		wait-for-turn base around x-axis;
		turn base to x-axis <1.0> speed <1.5>;
		move base to y-axis [-0.1] speed [0.15];
		wait-for-move base along y-axis;
	}
}


activatescr()
{
	move door to y-axis [0.250000] now;
	move door to z-axis [-5.000000] speed [8.000000];
	wait-for-move door along z-axis;
	move turret to y-axis [2.000000] speed [8.000000];
	wait-for-move turret along y-axis;
	move nanobits to z-axis [1.500000] speed [8.000000];
	wait-for-move nanobits along z-axis;
	sleep 20;
}

deactivatescr()
{
	move nanobits to z-axis [0.000000] speed [8.000000];
	wait-for-move nanobits along z-axis;
	move turret to y-axis [0.000000] speed [8.000000];
	wait-for-move turret along y-axis;
	move door to z-axis [0.000000] speed [8.000000];
	wait-for-move door along z-axis;
	move door to y-axis [0.000000] now;
	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 3 from w1;
		emit-sfx 3 from w2;
		emit-sfx 3 from w3;
		emit-sfx 3 from w4;
		emit-sfx 3 from w5;
		emit-sfx 3 from w6;
		emit-sfx 3 from w7;
		emit-sfx 3 from w8;
		emit-sfx 3 from w9;
		emit-sfx 3 from w10;
		emit-sfx 3 from w11;
		emit-sfx 3 from w12;
		emit-sfx 5 from w1;
		emit-sfx 5 from w2;
		emit-sfx 5 from w3;
		emit-sfx 5 from w4;
		emit-sfx 5 from w5;
		emit-sfx 5 from w6;
		emit-sfx 5 from w7;
		emit-sfx 5 from w8;
		emit-sfx 5 from w9;
		emit-sfx 5 from w10;
		emit-sfx 5 from w11;
		emit-sfx 5 from w12;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

Go()
{
	call-script activatescr();
	turn turret to y-axis Static_Var_1 speed <160.038462>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.038462>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	Static_Var_4 = 1;
	start-script RockOnWaves();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_4 == 1 )
	{
		piecenum = nano1;
	}
	if( Static_Var_4 == 2 )
	{
		piecenum = nano2;
	}
	++Static_Var_4;
	if( Static_Var_4 == 3 )
	{
		Static_Var_4 = 1;
	}
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode door type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode nanobits type SHATTER | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode door type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode nanobits type SHATTER | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode door type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode nanobits type SHATTER | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode door type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode nanobits type SHATTER | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
