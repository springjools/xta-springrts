#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, top, cover, glow;

static-var  mmState, OPERATING;

Go()
{
	move top to y-axis [10] speed [5];
	OPERATING = 1;
	mmState = 1;
	set ACTIVATION to 1;
}

Stop()
{	
	move top to y-axis [0] speed [4];
	OPERATING = 0;
	mmState = 0;
	set ACTIVATION to 0;
}

Activate()
{
	call-script Go();
}

Deactivate()
{
	call-script Stop();
}

ImAMetalMaker()
{
	mmState = -1;
	while( TRUE )
	{
		if (OPERATING == 1)
		{
			if (mmState != 1) {
				call-script Go();
			}
		}
		else
		{
			if (mmState != 0) {
				call-script Stop();
			}
		}
		sleep 1000;
	}
}

Standby()
{
	while( TRUE )
	{
		if (mmState == 1)
		{
		emit-sfx 1025 from glow;
		sleep 200;
		emit-sfx 1025 from glow;
		sleep 200;
		emit-sfx 1026 from glow;
		}
		sleep 200;
	}
}

MMStatus(State)
{
    OPERATING = State;
    //get PRINT(OPERATING);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script ImAMetalMaker();
	start-script Standby();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*
Go()
{
	show sphereOn;
	hide sphereOff;
}

Stop()
{
	hide sphereOn;
	show sphereOff;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}
*/
Create()
{
	hide cover;
	hide glow;
	//statechg_DesiredState = TRUE;
	//statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

/*
Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode top type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAPNUKE;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode top type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAPNUKE;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode top type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAPNUKE;
		return (0);
	}
	corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode top type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAPNUKE;
}
