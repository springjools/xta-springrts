#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, ltower1, ltower2, rtower1, rtower2, rside, lside, ldoor,
       rdoor, pad, lpost, rpost, lnano, rnano, lbeam, rbeam;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2

RestoreAfterDelay()
{
	sleep 5000;
}

activatescr()
{
	if( TRUE )
	{
		dont-cache ltower1;
		dont-cache ltower2;
		dont-cache rtower1;
		dont-cache rtower2;
		set ARMORED to 0;
	}
	if( TRUE )
	{
		move ltower1 to z-axis [-7.600000] speed [4.000000];
		move rtower1 to z-axis [-7.600000] speed [4.000000];
		move ltower2 to z-axis [7.600000] speed [4.000000];
		move rtower2 to z-axis [7.600000] speed [4.000000];
		wait-for-move rtower1 along z-axis;
	}
	if( TRUE )
	{
		cache ltower1;
		cache ltower2;
		cache rtower1;
		cache rtower2;
	}
	if( TRUE )
	{
		dont-cache lside;
		dont-cache rside;
		dont-cache ldoor;
		dont-cache rdoor;
		dont-cache lpost;
		dont-cache rpost;
		dont-cache lnano;
		dont-cache rnano;
	}
	if( TRUE )
	{
		move lside to x-axis [9.500000] speed [4.000000];
		move rside to x-axis [-9.500000] speed [4.000000];
		wait-for-move lside along x-axis;
	}
	if( TRUE )
	{
		turn ldoor to z-axis <-90.000000> speed <100.000000>;
		turn rdoor to z-axis <90.000000> speed <100.000000>;
		wait-for-turn ldoor around z-axis;
	}
	if( TRUE )
	{
		turn lpost to x-axis <-90.000000> speed <100.000000>;
		turn rpost to x-axis <90.000000> speed <100.000000>;
		wait-for-turn lpost around x-axis;
	}
	if( TRUE )
	{
		turn lnano to y-axis <60.000000> speed <100.000000>;
		turn rnano to y-axis <60.000000> speed <100.000000>;
		wait-for-turn lnano around y-axis;
	}
	if( TRUE )
	{
		cache lside;
		cache rside;
		cache ldoor;
		cache rdoor;
		cache lpost;
		cache rpost;
		cache lnano;
		cache rnano;
	}
	if( TRUE )
	{
		sleep 300;
	}
}

deactivatescr()
{
	if( TRUE )
	{
		dont-cache lside;
		dont-cache rside;
		dont-cache ldoor;
		dont-cache rdoor;
		dont-cache lpost;
		dont-cache rpost;
		dont-cache lnano;
		dont-cache rnano;
	}
	if( TRUE )
	{
		turn lnano to y-axis <0.000000> speed <100.000000>;
		turn rnano to y-axis <0.000000> speed <100.000000>;
		wait-for-turn lnano around y-axis;
	}
	if( TRUE )
	{
		turn lpost to x-axis <0.000000> speed <100.000000>;
		turn rpost to x-axis <0.000000> speed <100.000000>;
		wait-for-turn lpost around x-axis;
	}
	if( TRUE )
	{
		turn ldoor to z-axis <0.000000> speed <100.000000>;
		turn rdoor to z-axis <0.000000> speed <100.000000>;
		wait-for-turn ldoor around z-axis;
	}
	if( TRUE )
	{
		move lside to x-axis [0.000000] speed [4.000000];
		move rside to x-axis [0.000000] speed [4.000000];
		wait-for-move lside along x-axis;
	}
	if( TRUE )
	{
		cache lside;
		cache rside;
		cache ldoor;
		cache rdoor;
		cache lpost;
		cache rpost;
		cache lnano;
		cache rnano;
	}
	if( TRUE )
	{
		dont-cache ltower1;
		dont-cache ltower2;
		dont-cache rtower1;
		dont-cache rtower2;
	}
	if( TRUE )
	{
		move ltower1 to z-axis [0.000000] speed [4.000000];
		move rtower1 to z-axis [0.000000] speed [4.000000];
		move ltower2 to z-axis [0.000000] speed [4.000000];
		move rtower2 to z-axis [0.000000] speed [4.000000];
		wait-for-move rtower1 along z-axis;
	}
	if( TRUE )
	{
		cache ltower1;
		cache ltower2;
		cache rtower1;
		cache rtower2;
	}
	if( TRUE )
	{
		set ARMORED to 1;
		sleep 300;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	sleep 3000;
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	start-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 1;
	call-script InitState();
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = lbeam;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = rbeam;
	}
	++Static_Var_1;
	if( Static_Var_1 == 3 )
	{
		Static_Var_1 = 1;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode pad type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode ldoor type SHATTER | BITMAP3;
		explode ldoor type SHATTER | BITMAP3;
		explode lpost type SHATTER | BITMAP4;
		explode rpost type SHATTER | BITMAP4;
		explode lnano type SHATTER | BITMAP1;
		explode rnano type FALL | BITMAP2;
		explode lside type SHATTER | BITMAP3;
		explode rside type SHATTER | BITMAP4;
		explode ltower1 type SHATTER | BITMAP1;
		explode ltower2 type SHATTER | BITMAP2;
		explode rtower1 type SHATTER | SMOKE | BITMAP3;
		explode rtower2 type SHATTER | SMOKE | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode pad type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode ldoor type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode ldoor type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode lpost type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode rpost type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode lnano type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode lside type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode rside type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode ltower1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode ltower2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode rtower1 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rtower2 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode pad type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode ldoor type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode ldoor type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode lpost type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode rpost type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lnano type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rnano type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lside type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode rside type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode ltower1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode ltower2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode rtower1 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rtower2 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	explode pad type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode ldoor type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode ldoor type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lpost type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode rpost type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode lnano type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rnano type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode lside type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode rside type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode ltower1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode ltower2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode rtower1 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rtower2 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP4;
}
