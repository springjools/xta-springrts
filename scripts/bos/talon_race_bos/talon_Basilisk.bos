#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare, body, base, turret, w1, w2, w3, w4,
       w5, w6, w7, w8, w9, w10, w11, w12,
       wakes, sleeve, box, barrel, depthcharge;

static-var  Static_Var_1, restore_delay, Static_Var_4;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4
#define SIG_MOVE			8


WobbleUnit()
{
	while( TRUE )
	{
		if( Static_Var_4 )
			move base to y-axis [2.250000] speed [2.50000];
		else
			move base to y-axis [-0.250000] speed [2.50000];
		Static_Var_4 = !Static_Var_4;
		sleep 750;
	}
}

BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= [1.000000] )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 80 / 40;
		}
		turn body to z-axis Func_Var_3 speed <30.000000>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script WobbleUnit();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	signal 16;
	set-signal-mask 16;
	turn body to x-axis 2*anglex speed <50.010989>;
	turn body to z-axis 2*anglez speed <50.010989>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <20.000000>;
	turn body to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 16;
	set-signal-mask 16;
	turn body to z-axis 2*Func_Var_2 speed <105.021978>;
	turn body to x-axis 2*Func_Var_1 speed <105.021978>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <30.005495>;
	turn body to x-axis <0.000000> speed <30.005495>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

StopMoving()
{
	signal SIG_MOVE;
}

waking()
{
	while( TRUE )
	{
		if( Static_Var_1 == 2 OR Static_Var_1 == 1 )
		{
		emit-sfx 3 from w1;
		emit-sfx 3 from w2;
		emit-sfx 3 from w3;
		emit-sfx 3 from w4;
		emit-sfx 3 from w5;
		emit-sfx 3 from w6;
		emit-sfx 3 from w7;
		emit-sfx 3 from w8;
		emit-sfx 3 from w9;
		emit-sfx 3 from w10;
		emit-sfx 3 from w11;
		emit-sfx 3 from w12;
		emit-sfx 5 from w1;
		emit-sfx 5 from w2;
		emit-sfx 5 from w3;
		emit-sfx 5 from w4;
		emit-sfx 5 from w5;
		emit-sfx 5 from w6;
		emit-sfx 5 from w7;
		emit-sfx 5 from w8;
		emit-sfx 5 from w9;
		emit-sfx 5 from w10;
		emit-sfx 5 from w11;
		emit-sfx 5 from w12;
		}
		sleep 325;
	}
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

Create()
{
	start-script waking();
	hide flare;
	dont-cache flare;
	restore_delay = 3000;
	start-script SmokeUnit();
	start-script BankClerck();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <90.016484>;
	turn sleeve to x-axis <0.000000> speed <50.005495>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <175.038462>;
	turn sleeve to x-axis <0.000000> - pitch speed <80.016484>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-2.900000] now;
	emit-sfx UNIT_SFX1 from flare;
	sleep 150;
	move barrel to z-axis [0.000000] speed [3.000000];
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromWeapon2(piecenum)
{
	piecenum = body;
}

QueryWeapon2(piecenum)
{
	piecenum = depthcharge;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn depthcharge to y-axis heading speed <375.038462>;
	turn depthcharge to x-axis <0.000000> - pitch speed <280.016484>;
	wait-for-turn depthcharge around y-axis;
	wait-for-turn depthcharge around x-axis;
	return (1);
}

Shot2()
{
	sleep 100;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1 + ( Static_Var_1 == 1 OR Static_Var_1 == 2 );
		explode barrel type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP4;
		explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode turret type SHATTER | BITMAP4;
		explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode turret type SHATTER | BITMAP4;
		explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode body type BITMAPONLY | BITMAP2;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
