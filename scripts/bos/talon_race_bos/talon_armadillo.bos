#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, v1, v2, v3, v4, body, hatchesA, hatchesB, flare, gun, barrel, aimpoint; //fronta, frontb, frontc, backa, backb, backc, rightAA, rightAB, rightAC, rightBA, rightBB, rightBC, leftAA, leftAB, leftAC, leftBA, leftBB, leftBC, rightAbase, rightBbase, leftAbase, leftBbase;

static-var  gun_1, bmoving, baiming, restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE 			16

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 8;
	set-signal-mask 8;
	turn base to z-axis Func_Var_2 speed <105.021978>;
	turn base to x-axis Func_Var_1 speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

/*deactivate()
{
	set ARMORED to 0;
	move rightAB to x-axis [3.165673] speed [5];
	move rightBB to x-axis [3.165673] speed [5];
	move leftAB to x-axis [-3.165673] speed [5];
	move leftBB to x-axis [-3.165673] speed [5];
	move frontb to z-axis [-6.331347] speed [5];
	move backb to z-axis [6.331347] speed [5];
	move fronta to z-axis [-6.331347] speed [5];
	move backa to z-axis [6.331347] speed [5];
	turn rightAbase to y-axis <90> speed <50>;
	turn rightBbase to y-axis <-90> speed <50>;
	turn leftAbase to y-axis <-90> speed <50>;
	turn leftBbase to y-axis <90> speed <50>;

	turn leftAA to z-axis <0> speed <50>;
	turn leftBA to z-axis <0> speed <50>;
	turn leftAC to z-axis <0> speed <50>;
	turn leftBC to z-axis <0> speed <50>;
	turn rightAA to z-axis <0> speed <50>;
	turn rightBA to z-axis <0> speed <50>;
	turn rightAC to z-axis <0> speed <50>;
	turn rightBC to z-axis <0> speed <50>;
	
	turn fronta to x-axis <0> speed <50>;
	turn backa to x-axis <0> speed <50>;
	turn frontc to x-axis <0> speed <50>;
	turn backc to x-axis <0> speed <50>;
}*/

/*activate()
{
	set ARMORED to 1;
	move rightAB to x-axis [0] speed [5];
	move rightBB to x-axis [0] speed [5];
	move leftAB to x-axis [0] speed [5];
	move leftBB to x-axis [0] speed [5];
	move frontb to z-axis [0] speed [5];
	move backb to z-axis [0] speed [5];
	move fronta to z-axis [0] speed [5];
	move backa to z-axis [0] speed [5];
	turn rightAbase to y-axis <30> speed <50>;
	turn rightBbase to y-axis <-30> speed <50>;
	turn leftAbase to y-axis <-30> speed <50>;
	turn leftBbase to y-axis <30> speed <50>;

	wait-for-move backb along z-axis;
	wait-for-turn leftAbase around y-axis;
	
	turn leftAA to z-axis <-20> now;
	turn leftAC to z-axis <20> now;
	
	sleep 10;
	turn leftBA to z-axis <-20> now;
	turn leftBC to z-axis <20> now;
	
	sleep 10;
	turn rightAA to z-axis <20> now;
	turn rightAC to z-axis <-20> now;
	
	sleep 10;
	turn rightBA to z-axis <20> now;
	turn rightBC to z-axis <-20> now;
	
	sleep 10;
	turn fronta to x-axis <10> now;
	turn backa to x-axis <-10> now;
	turn frontc to x-axis <-10> now;
	turn backc to x-axis <10> now;
}*/

/*RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.010989>;
	turn base to z-axis anglez speed <50.010989>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}*/

Create()
{
	gun_1 = 1;
	dont-cache flare;
	hide flare;
	start-script SmokeUnit();
	restore_delay = 3000;

	bMoving = FALSE;
/*	move rightAB to x-axis [3.165673] now;
	move rightBB to x-axis [3.165673] now;
	move leftAB to x-axis [-3.165673] now;
	move leftBB to x-axis [-3.165673] now;
	move frontb to z-axis [-6.331347] now;
	move backb to z-axis [6.331347] now;
	move fronta to z-axis [-6.331347] now;
	move backa to z-axis [6.331347] now;
	turn rightAbase to y-axis <90> now;
	turn rightBbase to y-axis <-90> now;
	turn leftAbase to y-axis <-90> now;
	turn leftBbase to y-axis <90> now;*/

	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1;
	}
}



RestorePrimary(Func_Var_1)
{
	/*if(bmoving)
	{
		sleep 300;
	}*/
	//if(!bmoving)
	//{
		sleep restore_delay;
	//}
	turn hatchesA to z-axis <0> speed <50>;
	turn hatchesB to z-axis <0> speed <50>;
}
RestoreTertiary(Func_Var_1)
{
	/*if(bmoving)
	{
		sleep 500;
	}*/
	//if(!bmoving)
	//{
		sleep restore_delay;
	//}
	turn body to y-axis <0> speed <25>;
	turn gun to x-axis <0> speed <25>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	/*while( bMoving )
	{
		sleep 300;
	}
	start-script activate();*/
	turn hatchesA to z-axis <90> speed <100>;
	turn hatchesB to z-axis <-90> speed <100>;
	wait-for-turn hatchesA around z-axis;
	start-script RestorePrimary();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if (gun_1 == 5)
	{
		gun_1 = 1;
	}
}

QueryPrimary(piecenum)
{
	if (gun_1 == 1)
	{
		piecenum = v1;
	}
	if (gun_1 == 2)
	{
		piecenum = v2;
	}
	if (gun_1 == 3)
	{
		piecenum = v3;
	}
	if (gun_1 == 4)
	{
		piecenum = v4;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = aimpoint;
}


AimTertiary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	/*if( bMoving )
	{
		sleep 300;
	}*/
	//start-script activate();
	turn body to y-axis heading speed <50>;
	turn gun to x-axis <0.000000> - pitch speed <200>;
	wait-for-turn body around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreTertiary();
	return(1);
}

rock()
{
	turn body to x-axis <-2> speed <75>;
	wait-for-turn base around x-axis;
	turn body to x-axis <1.5> speed <50>;
	wait-for-turn base around x-axis;
	turn body to x-axis <-1> speed <75>;
	wait-for-turn base around x-axis;
	turn body to x-axis <0.5> speed <50>;
	wait-for-turn base around x-axis;
	turn body to x-axis <0> speed <25>;
}

FireTertiary()
{
	emit-sfx UNIT_SFX1 from flare;
	start-script rock();
	move barrel to z-axis [-5.00000] now;
	sleep 150;
	move barrel to z-axis [0.000000] speed [10];
}

QueryTertiary(piecenum)
{
	piecenum = flare;
}

AimFromTertiary(piecenum)
{
	piecenum = aimpoint;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

/*StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	start-script deactivate();
	start-script restoreprimary();
	start-script restoreTertiary();
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
}*/

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode v1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode v2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode v3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode v4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode v1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode v2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode v3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode v4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode v1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode v2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode v3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode v4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode v1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode v2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode v3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode v4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
