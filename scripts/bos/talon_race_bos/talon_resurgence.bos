#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, fp1, fp2, fp3;

// Signal definitions
#define SIG_AIM1				2
#define SIG_AIM2				4
#define SIG_AIM3				8

SetDirection(heading)
{
	var spd;
	spd = get ABS(heading);
	turn body to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
}

RockOnWaves()
{
	while(1)
	{
		turn body to x-axis <1.0> speed <1.5>;
		move body to y-axis [0.0] speed [0.15];
		wait-for-turn body around x-axis;
		turn body to x-axis <-1.0> speed <1.5>;
		move body to y-axis [-0.1] speed [0.15];
		wait-for-move body along y-axis;
		move body to y-axis [0.0] speed [0.15];
		wait-for-turn body around x-axis;
		turn body to x-axis <1.0> speed <1.5>;
		move body to y-axis [-0.1] speed [0.15];
		wait-for-move body along y-axis;
	}
}


Create()
{
	hide fp1;
	hide fp2;
	hide fp3;
	start-script RockOnWaves();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	turn fp1 to y-axis heading speed <300.071429>;
	turn fp1 to x-axis <0.000000> - pitch speed <200.038462>;
	wait-for-turn fp1 around y-axis;
	wait-for-turn fp1 around x-axis;
	return (1);
}

FirePrimary()
{
	//emit-sfx UNIT_SFX1 from fp;
}

AimFromPrimary(piecenum)
{
	piecenum = fp1;
}

QueryPrimary(piecenum)
{
	piecenum = fp1;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn fp2 to y-axis heading speed <300.071429>;
	turn fp2 to x-axis <0.000000> - pitch speed <200.038462>;
	wait-for-turn fp2 around y-axis;
	wait-for-turn fp2 around x-axis;
	return (1);
}

FireWeapon2()
{
	//emit-sfx UNIT_SFX1 from fp;
}

AimFromWeapon2(piecenum)
{
	piecenum = fp2;
}

QueryWeapon2(piecenum)
{
	piecenum = fp2;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	turn fp3 to y-axis heading speed <300.071429>;
	turn fp3 to x-axis <0.000000> - pitch speed <200.038462>;
	wait-for-turn fp3 around y-axis;
	wait-for-turn fp3 around x-axis;
	return (1);
}

FireWeapon3()
{
	//emit-sfx UNIT_SFX1 from fp;
}

AimFromWeapon3(piecenum)
{
	piecenum = fp3;
}

QueryWeapon3(piecenum)
{
	piecenum = fp3;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		return (0);
	}
	if( severity <= 50 )
	{
		return (0);
	}
	if( severity <= 99 )
	{
		return (0);
	}
}
