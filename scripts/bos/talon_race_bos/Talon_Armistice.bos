#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, missile, pylon1, pylon2, pylon3, pylon4, aimpoint;

static-var  Static_Var_1, Static_Var_2, gun_1;

// Signal definitions
#define SIG_AIM				2

#define SMOKEPIECE1 pylon1
#define SMOKEPIECE2 pylon2
#define SMOKEPIECE3 pylon3
#define SMOKEPIECE4 pylon4

#include "StateChg.h"

activatescr()
{
	if( TRUE )
	{
	turn pylon1 to z-axis <30> speed <40>;
	turn pylon2 to x-axis <-30> speed <40>;
	turn pylon3 to z-axis <-30> speed <40>;
	turn pylon4 to x-axis <30> speed <40>;
	sleep 1768;
	}
	sleep 3;
}

deactivatescr()
{
	if( TRUE )
	{
	turn pylon1 to z-axis <0> speed <15>;
	turn pylon2 to x-axis <0> speed <15>;
	turn pylon3 to z-axis <0> speed <15>;
	turn pylon4 to x-axis <0> speed <15>;
		sleep 1762;
	}
	sleep 14;
}
#include "SmokeUnit.h"

go()
{
	call-script activatescr();
	Static_Var_1 = 1;
}

stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
}
#define ACTIVATECMD			call-script go();
#define DEACTIVATECMD		call-script stop();
#include "StateChg.h"

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 25000;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if( !Static_Var_1 )
	{
		sleep 500;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	hide missile;
	move missile to y-axis [0] now;
}

QueryPrimary(piecenum)
{
		piecenum = aimpoint;
}

AimFromPrimary(piecenum)
{
		piecenum = aimpoint;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP1;
		explode missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pylon1 type BITMAPONLY | BITMAP1;
		explode pylon2 type BITMAPONLY | BITMAP3;
		explode pylon3 type BITMAPONLY | BITMAP1;
		explode pylon4 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type BITMAPONLY | BITMAP1;
		explode missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pylon1 type BITMAPONLY | BITMAP1;
		explode pylon2 type BITMAPONLY | BITMAP3;
		explode pylon3 type BITMAPONLY | BITMAP1;
		explode pylon4 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type BITMAPONLY | BITMAP1;
		explode missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pylon1 type BITMAPONLY | BITMAP1;
		explode pylon2 type BITMAPONLY | BITMAP3;
		explode pylon3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode pylon4 type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type BITMAPONLY | BITMAP1;
	explode missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pylon1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode pylon2 type BITMAPONLY | BITMAP3;
	explode pylon3 type BITMAPONLY | BITMAP1;
	explode pylon4 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
