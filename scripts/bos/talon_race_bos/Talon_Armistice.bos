#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, missile, pylon1, pylon2, pylon3, pylon4, cover;
static-var dontshoot;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
	dont-shade base;
	dont-cache cover;
	dont-shade body;
	dont-shade pylon1;
	dont-shade pylon2;
	dont-shade pylon3;
	dont-shade pylon4;
	dont-shade missile;
	dontshoot=0;
	hide cover;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	show cover;
}

QueryPrimary(piecenum)
{
	piecenum = missile;
}

restore()
{
	sleep 3000;
	turn pylon1 to z-axis <0> speed <15>;
	turn pylon2 to x-axis <0> speed <15>;
	turn pylon3 to z-axis <0> speed <15>;
	turn pylon4 to x-axis <0> speed <15>;
	wait-for-turn pylon4 around x-axis;
	set ARMORED to 1;
}

reload()
{
	turn pylon1 to z-axis <0> speed <15>;
	turn pylon2 to x-axis <0> speed <15>;
	turn pylon3 to z-axis <0> speed <15>;
	turn pylon4 to x-axis <0> speed <15>;
	wait-for-turn pylon4 around x-axis;
	set ARMORED to 1;
	show missile;
	move missile to y-axis [32] speed [32];
	wait-for-move missile along y-axis;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
//	while (dontshoot)
//	{
//		sleep 100;
//	}
	dont-cache pylon1;
	dont-cache pylon2;
	dont-cache pylon3;
	dont-cache pylon4;
	call-script reload();
	set ARMORED to 0;
	turn pylon1 to z-axis <30> speed <40>;
	turn pylon2 to x-axis <-30> speed <40>;
	turn pylon3 to z-axis <-30> speed <40>;
	turn pylon4 to x-axis <15> speed <40>;
	wait-for-turn pylon4 around x-axis;
	turn pylon4 to x-axis <30> speed <40>;
	start-script restore();
	return (1);
}

FirePrimary()
{
//	dontshoot=1;
	hide missile;
	move missile to y-axis [0] now;
//	sleep 1000;
	call-script reload();
//	dontshoot=0;
}

AimFromPrimary(piecenum)
{
	piecenum = missile;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP1;
		explode missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pylon1 type BITMAPONLY | BITMAP1;
		explode pylon2 type BITMAPONLY | BITMAP3;
		explode pylon3 type BITMAPONLY | BITMAP1;
		explode pylon4 type BITMAPONLY | BITMAP3;
		explode cover type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type BITMAPONLY | BITMAP1;
		explode missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pylon1 type BITMAPONLY | BITMAP1;
		explode pylon2 type BITMAPONLY | BITMAP3;
		explode pylon3 type BITMAPONLY | BITMAP1;
		explode pylon4 type BITMAPONLY | BITMAP3;
		explode cover type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type BITMAPONLY | BITMAP1;
		explode missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pylon1 type BITMAPONLY | BITMAP1;
		explode pylon2 type BITMAPONLY | BITMAP3;
		explode pylon3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode pylon4 type BITMAPONLY | BITMAP3;
		explode cover type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type BITMAPONLY | BITMAP1;
	explode missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pylon1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode pylon2 type BITMAPONLY | BITMAP3;
	explode pylon3 type BITMAPONLY | BITMAP1;
	explode pylon4 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode cover type BITMAPONLY | BITMAP1;
}
