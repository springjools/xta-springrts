#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare, f1, turret, base, sleeves, barrel, stats, cat, l_turret, l_flare, l_turn, mover;

static-var  restore_delay, aimings, bmoving;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4
#define SIG_AIM_2			8
#define SIG_R				16

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	move f1 to y-axis 0 now;
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
	move f1 to y-axis -536870912 now;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare;
	dont-cache flare;
	spin l_turret around y-axis speed <200>;
	spin l_turn around y-axis speed <2000>;
	aimings = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
	set ARMORED to 1;
	start-script stopmoving();
	move l_turret to y-axis [128] now;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	signal SIG_R;
	set-signal-mask SIG_R;
	sleep 20000;
	turn turret to y-axis <0.000000> speed <35.005495>;
	turn sleeves to x-axis <0.000000> speed <15.000000>;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret to y-axis heading speed <50.005495>;
	turn sleeves to x-axis <0.000000> - pitch speed <25.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	emit-sfx UNIT_SFX1 from flare;
	move barrel to z-axis [-4.400000] now;
	sleep 50;
	move barrel to z-axis [0.000000] speed [3.000000];
}

FirePrimary()
{
	emit-sfx UNIT_SFX1 from l_flare;
}

QueryTertiary(piecenum)
{
	piecenum = flare;
}

AimFromTertiary(piecenum)
{
	piecenum = flare;
}

smoke()
{
	while (aimings == 1)
	{
		emit-sfx 256 | 1 from l_flare;
		emit-sfx 256 | 2 from l_flare;
		sleep 10;
		if( Rand( 1, 15 ) == 1 )
		{
			explode l_flare type BITMAPONLY | BITMAP5;
		}
	}
}

end()
{
	sleep 10000;
	aimings = 0;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	aimings = 1;
//	start-script smoke();
	sleep (Rand( 1, 250 ));
	start-script end();
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = l_flare;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

SweetSpot(piecenum)
{
	piecenum = base;
}


AimSecondary(heading, pitch)
{
	return (1);
}

rotational()
{
	while(1)
	{
		move f1 to x-axis [32] now;
		sleep 150;
		move f1 to z-axis [-23] now;
		sleep 150;
		move f1 to x-axis [0] now;
		sleep 150;
		move f1 to z-axis [0] now;
		sleep 150;
	}
}

FireSecondary()
{
	emit-sfx UNIT_SFX2 from f1;
	start-script rotational();
}

QuerySecondary(piecenum)
{
	piecenum = f1;
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode stats type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode sleeves type SHATTER | BITMAP1;
		explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode stats type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode sleeves type SHATTER | BITMAP1;
		explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode stats type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode sleeves type SHATTER | BITMAP1;
		explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode barrel type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP3;
	explode stats type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode sleeves type SHATTER | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
