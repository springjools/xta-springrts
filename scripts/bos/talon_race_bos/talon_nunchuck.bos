#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, body, base, turret, sleeves, barrel1, barrel2, shell,
       aimer;

static-var  Static_Var_1, restore_delay, gun_1, bMoving, bAiming, salvo;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn body to x-axis anglex speed <50.005495>;
	turn body to z-axis anglez speed <50.005495>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <20.000000>;
	turn body to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 8;
	set-signal-mask 8;
	turn body to z-axis Func_Var_2 speed <105.016484>;
	turn body to x-axis Func_Var_1 speed <105.016484>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <30.005495>;
	turn body to x-axis <0.000000> speed <30.005495>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	bAiming = TRUE;
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

Create()
{
	hide flare1;
	hide flare2;
	restore_delay = 100;
	start-script SmokeUnit();
	gun_1 = flare1;
	salvo = 0;
	bMoving = FALSE;
	turn turret to x-axis <45.000000> now;
	turn sleeves to x-axis <-45.000000> now;
	bAiming = TRUE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1;
	}
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	while( !bMoving )
	{
		sleep restore_delay;
	}
	bAiming = TRUE;
	turn aimer to y-axis <0.000000> speed <45.016484>;
	turn sleeves to x-axis <0.000000> speed <45.005495>;
	wait-for-turn aimer around y-axis;
	wait-for-turn sleeves around x-axis;
	turn turret to x-axis <-45.000000> speed <85.000000>;
	turn sleeves to x-axis <45.000000> speed <85.000000>;
	wait-for-turn turret around x-axis;
	wait-for-turn sleeves around x-axis;
	gun_1 = 0;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
//	while( bMoving )
//	{
//		sleep restore_delay;
//	}
	if( bAiming == 1 )
	{
		turn turret to x-axis <0.000000> speed <85.000000>;
		turn sleeves to x-axis <0.000000> speed <85.000000>;
		wait-for-turn turret around x-axis;
		wait-for-turn sleeves around x-axis;
		bAiming = FALSE;
	}
	turn aimer to y-axis heading speed <60.038462>;
	turn sleeves to x-axis <0.000000> - pitch speed <60.016484>;
	wait-for-turn aimer around y-axis;
	wait-for-turn sleeves around x-axis;
	while( salvo == 1 )
	{
		sleep 10;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == flare1 )
	{
		emit-sfx 1024 from flare1;
		move barrel1 to z-axis [-3.600000] now;
		sleep 200;
		move barrel1 to z-axis [0.000000] speed [2.000000];
		gun_1 = flare2;
		sleep 200;
		emit-sfx 1024 from flare2;
		move barrel2 to z-axis [-3.600000] now;
		sleep 200;
		move barrel2 to z-axis [0.000000] speed [2.000000];
		sleep 200;
		gun_1 = flare1;
		return (0);
		}

}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP4;
		explode sleeves type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | BITMAP1;
		explode barrel2 type FALL | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode turret type SHATTER | BITMAP4;
		explode sleeves type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode turret type SHATTER | BITMAP4;
		explode sleeves type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode body type BITMAPONLY | BITMAP2;
	explode sleeves type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
