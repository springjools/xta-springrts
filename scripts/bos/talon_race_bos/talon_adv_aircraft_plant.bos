#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, towers, doors, lights, post1, post2, nano1, nano2, tower1, tower2, spray1, spray2, radar;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2

RestoreAfterDelay()
{
	sleep 5000;
}

activatescr()
{
//	signal 4;
//	set-signal-mask 4;
	if( TRUE )
	{
		dont-cache doors;
		dont-cache lights;
		dont-cache nano1;
		dont-cache nano2;
		dont-cache post1;
		dont-cache post2;
		set ARMORED to 0;
	}
	if( TRUE )
	{
		move doors to z-axis [-2.469971] speed [4];
		wait-for-move doors along z-axis;
	}
	if( TRUE )
	{
		move post1 to y-axis [10] speed [4];
		move post2 to y-axis [10] speed [4];
		wait-for-move post1 along y-axis;
	}
	if( TRUE )
	{
		turn nano1 to x-axis <90> speed <100>;
		turn nano2 to x-axis <90> speed <100>;
		wait-for-turn nano1 around x-axis;
	}
	if( TRUE )
	{
		cache doors;
		cache nano1;
		cache nano2;
		cache post1;
		cache post2;
	}
}

deactivatescr()
{
	signal 4;
	set-signal-mask 4;
	if( TRUE )
	{
		dont-cache doors;
		dont-cache lights;
		dont-cache nano1;
		dont-cache nano2;
		dont-cache post1;
		dont-cache post2;
		sleep 300;
	}
	if( TRUE )
	{
		turn nano1 to x-axis <0> speed <100>;
		turn nano2 to x-axis <0> speed <100>;
		wait-for-turn nano1 around z-axis;
	}
	if( TRUE )
	{
		move post1 to y-axis [0] speed [4];
		move post2 to y-axis [0] speed [4];
		wait-for-move post1 along y-axis;
	}
	if( TRUE )
	{
		move doors to z-axis [0] speed [4];
		wait-for-move doors along z-axis;
	}
	if( TRUE )
	{
		cache doors;
		cache lights;
		cache nano1;
		cache nano2;
		cache post1;
		cache post2;
		set ARMORED to 1;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	//sleep 3000;
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	start-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 1;
	call-script InitState();
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin radar around y-axis speed <100>;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = spray1;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = spray2;
	}
	++Static_Var_1;
	if( Static_Var_1 == 3 )
	{
		Static_Var_1 = 1;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	dont-cache pad;
	spin pad around y-axis speed <30.005495>;
}

StopBuilding()
{
	cache pad;
	stop-spin pad around y-axis;
	turn pad to y-axis <0> speed <30.005495>;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode pad type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode doors type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode towers type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode post1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode post2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode nano2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode tower1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode tower2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode spray1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode spray2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode pad type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode doors type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode towers type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode post1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode post2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode nano2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode tower1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode tower2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode spray1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode spray2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode pad type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode doors type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode towers type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode post1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode post2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode nano2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode tower1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode tower2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode spray1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode spray2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode pad type FALL | EXPLODE_ON_HIT | BITMAP2;
	explode doors type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode towers type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode post1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode post2 type FALL | EXPLODE_ON_HIT | BITMAP2;
	explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode nano2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode tower1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode tower2 type FALL | EXPLODE_ON_HIT | BITMAP2;
	explode spray1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode spray2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
}
