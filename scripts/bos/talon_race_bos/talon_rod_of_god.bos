//
// ThunderStorm Turret!
//
// Script and weapon by zwzsg on a model by Bidigam
//
#define TA
#include "exptype.h"
#include "sfxtype.h"


piece base, body, rocket, aimer, target, cloud_shoulder, cloud_arm, cloud_hand, lightning, towerthing, spinner, smoker1, smoker2, glow;

static-var  gun_1, restore_delay, Static_Var_3;


// Signal definitions
#define SIG_AIM				2

#include "StateChg.h"

activatescr()
{
	if( TRUE )
	{
		sleep 1000;
	}
	sleep 300;
}

deactivatescr()
{
	if( TRUE )
	{
		sleep 1000;
	}
	sleep 110;
}

Go()
{
	call-script activatescr();
	gun_1 = body;
}

Stop()
{
	gun_1 = base;
	sleep 10000;
	call-script deactivatescr();
}

fum()
{
	while( Static_Var_3 == 1 )
	{
		emit-sfx 256 | 1 from smoker1;
		emit-sfx 256 | 1 from smoker2;
		sleep 250;
	}
}
Launchsequence()
{
	start-script fum();
	Static_Var_3 = 1;
	sleep 500;
	move rocket to y-axis [1000.000000] speed [150.000000];
	sleep 10000;
	hide rocket;
	Static_Var_3 = 0;
}
#define ACTIVATECMD			call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"

Create()
{
	move aimer to y-axis [5000.000000] now;
	gun_1 = base;
	Static_Var_3 = 1;
	//turn body to y-axis <20.000000> now;
	restore_delay = 3000;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	call-script Launchsequence();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !gun_1 )
	{
		sleep 1000;
		start-script RequestState(0);
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = aimer;
}

FirePrimary()
{
	gun_1 = base;
	sleep 50;
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = aimer;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
