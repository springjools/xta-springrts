#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1a, flare1b, flare1c, flare2a, flare2b, flare2c, barrel1a, barrel1b,
       barrel1c, barrel2a, barrel2b, barrel2c, base, body, turret1, sleeve1,
       turret2, sleeve2, w1, w2, w3, w4, w5, w6,
       w7, w8, w9, w10, w11, w12, w13, w14,
       w15, w16, w17, w18, w19, w20, w21, w22,
       w23, w24, wakes, boob;

static-var  tur1barl, tur2barl, gun_1, gun_2,  restore_delay, Static_Var_3, Static_Var_4, Static_Var_6, Static_Var_7, Static_Var_8;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 16;
	set-signal-mask 16;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	Static_Var_7 = get ABS(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn base to z-axis Static_Var_8 speed Static_Var_7 * <0.016484>;
		wait-for-turn base around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		Static_Var_7 = get ABS(Static_Var_8);
	}
	turn base to z-axis <0.000000> speed <1.5>;
}

RockUnit(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn body to x-axis anglex speed <50.005495>;
	turn body to z-axis anglez speed <50.005495>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <20.000000>;
	turn body to x-axis <0.000000> speed <20.000000>;
}

WobbleUnit()
{
	while( TRUE )
	{
		if( Static_Var_4 )
			move base to y-axis [1.250000] speed [2.50000];
		else
			move base to y-axis [-1.250000] speed [2.50000];
		Static_Var_4 = !Static_Var_4;
		sleep 750;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 8;
	set-signal-mask 8;
	turn body to z-axis <0.010989> * Func_Var_2 speed <105.016484>;
	turn body to x-axis <0.010989> * Func_Var_1 speed <105.016484>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <30.005495>;
	turn body to x-axis <0.000000> speed <30.005495>;
}

BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= [1.000000] )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 40 / 20;
		}
		turn body to z-axis Func_Var_3 speed <20.000000>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script WobbleUnit();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

wakes2()
{
	while( TRUE )
	{
		if( Static_Var_3 == 2 OR Static_Var_3 == 1 )
		{
			emit-sfx 3 from w1;
			emit-sfx 3 from w2;
			emit-sfx 3 from w3;
			emit-sfx 3 from w4;
			emit-sfx 3 from w5;
			emit-sfx 3 from w6;
			emit-sfx 3 from w7;
			emit-sfx 3 from w8;
			emit-sfx 3 from w9;
			emit-sfx 3 from w10;
			emit-sfx 3 from w11;
			emit-sfx 3 from w12;
			emit-sfx 3 from w13;
			emit-sfx 3 from w14;
			emit-sfx 3 from w15;
			emit-sfx 3 from w16;
			emit-sfx 3 from w17;
			emit-sfx 3 from w18;
			emit-sfx 3 from w19;
			emit-sfx 3 from w20;
			emit-sfx 3 from w21;
			emit-sfx 3 from w22;
			emit-sfx 3 from w23;
			emit-sfx 3 from w24;
			emit-sfx 5 from w1;
			emit-sfx 5 from w2;
			emit-sfx 5 from w3;
			emit-sfx 5 from w4;
			emit-sfx 5 from w5;
			emit-sfx 5 from w6;
			emit-sfx 5 from w7;
			emit-sfx 5 from w8;
			emit-sfx 5 from w9;
			emit-sfx 5 from w10;
			emit-sfx 5 from w11;
			emit-sfx 5 from w12;
			emit-sfx 5 from w13;
			emit-sfx 5 from w14;
			emit-sfx 5 from w15;
			emit-sfx 5 from w16;
			emit-sfx 5 from w17;
			emit-sfx 5 from w18;
			emit-sfx 5 from w19;
			emit-sfx 5 from w20;
			emit-sfx 5 from w21;
			emit-sfx 5 from w22;
			emit-sfx 5 from w23;
			emit-sfx 5 from w24;
		}
		sleep 325;
	}
}

Create()
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	start-script wakes2();
	gun_1 = 0;
	gun_2 = 0;
	tur1barl = 0;
	tur2barl = 3;
	turn turret2 to y-axis <180.000000> now;
	start-script BankClerck();
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn sleeve2 to x-axis <0.000000> speed <120.005495>;
	turn turret2 to y-axis <180.000000> speed <30.000000>;
	turn sleeve1 to x-axis <0.000000> speed <120.005495>;
	turn turret1 to y-axis <0.000000> speed <30.000000>;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <120.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <120.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	Static_Var_6 = heading;
	return (1);
}

FirePrimary()
{
	start-script RockZ(-5,Static_Var_6);
	if( tur1barl == 0 )
	{
		emit-sfx UNIT_SFX1 from flare1a;
		move barrel1a to z-axis [-2.500000] now;
		sleep 150;
		move barrel1a to z-axis [0.000000] speed [1.000000];
		sleep 150;
		tur1barl = 1;
	}
	else if( tur1barl == 1 )
	{
		emit-sfx UNIT_SFX1 from flare1b;
		move barrel1b to z-axis [-2.500000] now;
		sleep 150;
		move barrel1b to z-axis [0.000000] speed [1.000000];
		sleep 150;
		tur1barl = 2;
	}
	else if( tur1barl == 2 )
	{
		emit-sfx UNIT_SFX1 from flare1c;
		move barrel1c to z-axis [-2.500000] now;
		sleep 150;
		move barrel1c to z-axis [0.000000] speed [1.000000];
		sleep 150;
		tur1barl = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QueryPrimary(piecenum)
{
	piecenum = tur1barl;
}

//Next Weaponnnn


AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <120.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <120.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay();
	Static_Var_6 = heading;
	return (1);
}

FireWeapon2()
{
	start-script RockZ(-5,Static_Var_6);
	if( tur2barl == 3 )
	{
		emit-sfx UNIT_SFX1 from flare2a;
		move barrel2a to z-axis [-2.500000] now;
		sleep 150;
		move barrel2a to z-axis [0.000000] speed [1.000000];
		sleep 150;
		tur2barl = 4;
	}
	else if( tur2barl == 4 )
	{
		emit-sfx UNIT_SFX1 from flare2b;
		move barrel2b to z-axis [-2.500000] now;
		sleep 150;
		move barrel2b to z-axis [0.000000] speed [1.000000];
		sleep 150;
		tur2barl = 5;
	}
	else if( tur2barl == 5 )
	{
		emit-sfx UNIT_SFX1 from flare2c;
		move barrel2c to z-axis [-2.500000] now;
		sleep 150;
		move barrel2c to z-axis [0.000000] speed [1.000000];
		sleep 150;
		tur2barl = 3;
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = turret2;
}

QueryWeapon2(piecenum)
{
	piecenum = tur2barl;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP3;
		explode sleeve2 type BITMAPONLY | BITMAP5;
		explode turret2 type BITMAPONLY | BITMAP1;
		explode sleeve1 type BITMAPONLY | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w13 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w14 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w15 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w16 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w17 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w18 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w19 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w20 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w21 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w22 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w23 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w24 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP3;
		explode sleeve2 type BITMAPONLY | BITMAP5;
		explode turret2 type BITMAPONLY | BITMAP1;
		explode sleeve1 type BITMAPONLY | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w13 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w14 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w15 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w16 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w17 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w18 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w19 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w20 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w21 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w22 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w23 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w24 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP3;
		explode sleeve2 type BITMAPONLY | BITMAP5;
		explode turret2 type BITMAPONLY | BITMAP1;
		explode sleeve1 type BITMAPONLY | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w13 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w14 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w15 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w16 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w17 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w18 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w19 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w20 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w21 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w22 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w23 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w24 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP3;
	explode body type BITMAPONLY | BITMAP3;
	explode sleeve2 type BITMAPONLY | BITMAP5;
	explode turret2 type BITMAPONLY | BITMAP1;
	explode sleeve1 type BITMAPONLY | BITMAP5;
	explode turret1 type BITMAPONLY | BITMAP1;
	explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w13 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w14 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w15 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w16 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w17 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w18 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w19 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w20 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w21 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w22 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w23 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w24 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
