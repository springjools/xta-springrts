#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, flare4, flare5, barrel1, barrel2, barrel3, barrel4, barrel5, base, body, bigturret, bigsleeve, lilturret, lilsleeve, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, wakes, depthpoint;

static-var  tur1barl, tur2barl, gun_1, restore_delay, Static_Var_6, Static_Var_7, Static_Var_8;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_MOVE			16


RockOnWaves()
{
	while(1)
	{
		turn base to x-axis <1.0> speed <1.5>;
		move base to y-axis [0.0] speed [0.15];
		wait-for-turn base around x-axis;
		turn base to x-axis <-1.0> speed <1.5>;
		move base to y-axis [-0.1] speed [0.15];
		wait-for-move base along y-axis;
		move base to y-axis [0.0] speed [0.15];
		wait-for-turn base around x-axis;
		turn base to x-axis <1.0> speed <1.5>;
		move base to y-axis [-0.1] speed [0.15];
		wait-for-move base along y-axis;
	}
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 16;
	set-signal-mask 16;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	Static_Var_7 = get ABS(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn base to z-axis Static_Var_8 speed Static_Var_7 * <0.016484>;
		wait-for-turn base around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		Static_Var_7 = get ABS(Static_Var_8);
	}
	turn base to z-axis <0.000000> speed <1.5>;
}

RockUnit(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn body to x-axis anglex speed <50.005495>;
	turn body to z-axis anglez speed <50.005495>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <20.000000>;
	turn body to x-axis <0.000000> speed <20.000000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	gun_1 = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
	start-script RockOnWaves();
	tur1barl = 0;
	tur2barl = 3;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn lilsleeve to x-axis <0.000000> speed <35.005495>;
	turn lilturret to y-axis <0.000000> speed <15.000000>;
	turn bigsleeve to x-axis <0.000000> speed <35.005495>;
	turn bigturret to y-axis <0.000000> speed <15.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 3 from w1;
		emit-sfx 3 from w2;
		emit-sfx 3 from w3;
		emit-sfx 3 from w4;
		emit-sfx 3 from w5;
		emit-sfx 3 from w6;
		emit-sfx 3 from w7;
		emit-sfx 3 from w8;
		emit-sfx 3 from w9;
		emit-sfx 3 from w10;
		emit-sfx 3 from w11;
		emit-sfx 3 from w12;
		emit-sfx 5 from w1;
		emit-sfx 5 from w2;
		emit-sfx 5 from w3;
		emit-sfx 5 from w4;
		emit-sfx 5 from w5;
		emit-sfx 5 from w6;
		emit-sfx 5 from w7;
		emit-sfx 5 from w8;
		emit-sfx 5 from w9;
		emit-sfx 5 from w10;
		emit-sfx 5 from w11;
		emit-sfx 5 from w12;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn bigturret to y-axis heading speed <60.000000>;
	turn bigsleeve to x-axis <0.000000> - pitch speed <60.000000>;
	wait-for-turn bigturret around y-axis;
	wait-for-turn bigsleeve around x-axis;
	start-script RestoreAfterDelay();
	Static_Var_6 = heading;
	return (1);
}

FirePrimary()
{
	start-script RockZ(-5,Static_Var_6);
	if( tur1barl == 0 )
	{
		emit-sfx UNIT_SFX1 from flare1;
		move barrel1 to z-axis [-2.500000] now;
		sleep 150;
		move barrel1 to z-axis [0.000000] speed [1.000000];
		sleep 150;
		tur1barl = 1;
	}
	else if( tur1barl == 1 )
	{
		emit-sfx UNIT_SFX1 from flare2;
		move barrel2 to z-axis [-2.500000] now;
		sleep 150;
		move barrel2 to z-axis [0.000000] speed [1.000000];
		sleep 150;
		tur1barl = 2;
	}
	else if( tur1barl == 2 )
	{
		emit-sfx UNIT_SFX1 from flare3;
		move barrel3 to z-axis [-2.500000] now;
		sleep 150;
		move barrel3 to z-axis [0.000000] speed [1.000000];
		sleep 150;
		tur1barl = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = bigturret;
}

QueryPrimary(piecenum)
{
	piecenum = tur1barl;
}

//Next Weaponnnn


AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn lilturret to y-axis heading speed <120.000000>;
	turn lilsleeve to x-axis <0.000000> - pitch speed <120.000000>;
	wait-for-turn lilturret around y-axis;
	wait-for-turn lilsleeve around x-axis;
	start-script RestoreAfterDelay();
	Static_Var_6 = heading;
	return (1);
}

FireWeapon2()
{
	start-script RockZ(-5,Static_Var_6);
	if( tur2barl == 3 )
	{
		emit-sfx UNIT_SFX2 from flare4;
		move barrel4 to z-axis [-2.500000] now;
		sleep 150;
		move barrel4 to z-axis [0.000000] speed [1.000000];
		sleep 150;
		tur2barl = 4;
	}
	else if( tur2barl == 4 )
	{
		emit-sfx UNIT_SFX2 from flare5;
		move barrel5 to z-axis [-2.500000] now;
		sleep 150;
		move barrel5 to z-axis [0.000000] speed [1.000000];
		sleep 150;
		tur2barl = 3;
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = lilturret;
}

QueryWeapon2(piecenum)
{
	piecenum = tur2barl;
}

abaim()
{
	sleep 1000;
	signal SIG_AIM_3;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	start-script abaim();
	return (1);
}

QueryTertiary(piecenum)
{
	piecenum = depthpoint;
}

AimFromTertiary(piecenum)
{
	piecenum = depthpoint;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode flare3 type BITMAPONLY | BITMAP5;
		explode flare4 type BITMAPONLY | BITMAP4;
		explode flare5 type BITMAPONLY | BITMAP5;
		explode lilsleeve type BITMAPONLY | BITMAP5;
		explode lilturret type BITMAPONLY | BITMAP1;
		explode bigsleeve type BITMAPONLY | BITMAP5;
		explode bigturret type BITMAPONLY | BITMAP1;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode flare3 type BITMAPONLY | BITMAP5;
		explode flare4 type BITMAPONLY | BITMAP4;
		explode flare5 type BITMAPONLY | BITMAP5;
		explode lilsleeve type BITMAPONLY | BITMAP5;
		explode lilturret type BITMAPONLY | BITMAP1;
		explode bigsleeve type BITMAPONLY | BITMAP5;
		explode bigturret type BITMAPONLY | BITMAP1;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode flare3 type BITMAPONLY | BITMAP5;
		explode flare4 type BITMAPONLY | BITMAP4;
		explode flare5 type BITMAPONLY | BITMAP5;
		explode lilsleeve type BITMAPONLY | BITMAP5;
		explode lilturret type BITMAPONLY | BITMAP1;
		explode bigsleeve type BITMAPONLY | BITMAP5;
		explode bigturret type BITMAPONLY | BITMAP1;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode flare3 type BITMAPONLY | BITMAP5;
		explode flare4 type BITMAPONLY | BITMAP4;
		explode flare5 type BITMAPONLY | BITMAP5;
		explode lilsleeve type BITMAPONLY | BITMAP5;
		explode lilturret type BITMAPONLY | BITMAP1;
		explode bigsleeve type BITMAPONLY | BITMAP5;
		explode bigturret type BITMAPONLY | BITMAP1;
	explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
