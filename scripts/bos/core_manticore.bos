#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  ground, pelvis, lleg, rleg, turret, gunbase, rmiss, rmiss_fire,
       lmiss, lmiss_fire, flak, flak_fire, fire1, fire2, fire3, fire4,
       fire5, fire6;

static-var  bMoving, Static_Var_2;

#define SMOKEPIECE1 turret


walk()
{
	while( bMoving )
	{
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move lleg to z-axis [2.000000] now;
			move rleg to y-axis [0.000000] now;
			move rleg to z-axis [-2.000000] now;
			turn pelvis to x-axis <6.000000> now;
			turn lleg to x-axis <-6.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-1.000000] now;
			move lleg to y-axis [1.000000] now;
			move rleg to y-axis [1.000000] now;
			turn pelvis to x-axis <5.000000> now;
			turn lleg to x-axis <-5.000000> now;
			turn rleg to x-axis <1.000000> now;
			sleep 30;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [0.000000] now;
			turn pelvis to x-axis <2.000000> now;
			turn lleg to x-axis <-2.000000> now;
			turn rleg to x-axis <3.000000> now;
			sleep 20;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [0.000000] now;
			turn pelvis to x-axis <1.000000> now;
			turn lleg to x-axis <-1.000000> now;
			turn rleg to x-axis <3.000000> now;
			sleep 10;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [1.000000] now;
			move rleg to z-axis [-2.000000] now;
			turn pelvis to x-axis <0.000000> now;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( bMoving )
		{
			move lleg to z-axis [1.000000] now;
			move rleg to z-axis [0.000000] now;
			sleep 60;
		}
		if( bMoving )
		{
			move lleg to y-axis [0.000000] now;
			move lleg to z-axis [0.000000] now;
			move rleg to z-axis [0.000000] now;
			turn pelvis to x-axis <0.000000> now;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( bMoving )
		{
			move lleg to z-axis [-1.000000] now;
			move rleg to z-axis [1.000000] now;
			turn rleg to x-axis <-9.000000> now;
			sleep 100;
		}
		if( bMoving )
		{
			move lleg to z-axis [-1.000000] now;
			move rleg to y-axis [0.000000] now;
			turn pelvis to x-axis <6.000000> now;
			turn rleg to x-axis <-6.000000> now;
			sleep 60;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [1.000000] now;
			move rleg to y-axis [1.000000] now;
			turn pelvis to x-axis <5.000000> now;
			turn lleg to x-axis <1.000000> now;
			turn rleg to x-axis <-5.000000> now;
			sleep 30;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [0.000000] now;
			turn pelvis to x-axis <2.000000> now;
			turn lleg to x-axis <3.000000> now;
			turn rleg to x-axis <-2.000000> now;
			sleep 20;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [0.000000] now;
			turn pelvis to x-axis <1.000000> now;
			turn lleg to x-axis <2.000000> now;
			turn rleg to x-axis <-1.000000> now;
			sleep 10;
		}
		if( bMoving )
		{
			move lleg to y-axis [1.000000] now;
			move lleg to z-axis [-2.000000] now;
			move rleg to y-axis [1.000000] now;
			turn pelvis to x-axis <0.000000> now;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( bMoving )
		{
			move lleg to z-axis [-1.000000] now;
			move rleg to z-axis [0.000000] now;
			sleep 60;
		}
		if( bMoving )
		{
			move lleg to z-axis [0.000000] now;
			move rleg to y-axis [0.000000] now;
			move rleg to z-axis [0.000000] now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		move lleg to z-axis [1.000000] now;
		move rleg to y-axis [0.000000] now;
		move rleg to z-axis [-1.000000] now;
		turn lleg to x-axis <-10.000000> now;
		turn rleg to x-axis <0.000000> now;
		sleep 100;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = Static_Var_2;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				move pelvis to y-axis [0.000000] speed [1.000000];
				turn lleg to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				if( !aiming )
				{
					turn turret to y-axis <0.000000> speed <90.000000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}
#include "SmokeUnit.h"

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

Create()
{
	hide fire1;
	hide fire2;
	hide fire3;
	hide fire4;
	hide fire5;
	hide fire6;
	hide flak_fire;
	hide lmiss_fire;
	hide rmiss_fire;
	start-script MotionControl();
	start-script SmokeUnit();
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

RestoreAfterDelay()
{
	sleep 5000;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn rmiss to x-axis <0.000000> speed <90.000000>;
	turn lmiss to x-axis <0.000000> speed <90.000000>;
}

QueryWeapon2(piecenum)
{
	piecenum = fire1;
}

AimFromWeapon2(piecenum)
{
	piecenum = gunbase;
}

AimWeapon2(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <225.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
}

QueryWeapon3(piecenum)
{
	piecenum = fire2;
}

AimFromWeapon3(piecenum)
{
	piecenum = gunbase;
}

AimWeapon3(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn turret to y-axis heading speed <225.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon3()
{
}

QueryWeapon4(piecenum)
{
	piecenum = fire3;
}

AimFromWeapon4(piecenum)
{
	piecenum = gunbase;
}

AimWeapon4(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	turn turret to y-axis heading speed <225.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon4()
{
}

QueryWeapon5(piecenum)
{
	piecenum = fire4;
}

AimFromWeapon5(piecenum)
{
	piecenum = gunbase;
}

AimWeapon5(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	turn turret to y-axis heading speed <225.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon5()
{
}

QueryWeapon6(piecenum)
{
	piecenum = fire5;
}

AimFromWeapon6(piecenum)
{
	piecenum = gunbase;
}

AimWeapon6(heading, pitch)
{
	signal 32;
	set-signal-mask 32;
	turn turret to y-axis heading speed <225.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon6()
{
}

QueryWeapon7(piecenum)
{
	piecenum = fire6;
}

AimFromWeapon7(piecenum)
{
	piecenum = gunbase;
}

AimWeapon7(heading, pitch)
{
	signal 64;
	set-signal-mask 64;
	turn turret to y-axis heading speed <225.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon7()
{
}

QueryWeapon8(piecenum)
{
	piecenum = lmiss_fire;
}

AimFromWeapon8(piecenum)
{
	piecenum = lmiss;
}

AimWeapon8(heading, pitch)
{
	signal 128;
	set-signal-mask 128;
	turn lmiss to x-axis <0.000000> - pitch speed <225.000000>;
	wait-for-turn lmiss around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon8()
{
}

QueryWeapon9(piecenum)
{
	piecenum = rmiss_fire;
}

AimFromWeapon9(piecenum)
{
	piecenum = rmiss;
}

AimWeapon9(heading, pitch)
{
	signal 256;
	set-signal-mask 256;
	turn rmiss to x-axis <0.000000> - pitch speed <225.000000>;
	wait-for-turn lmiss around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon9()
{
}

QueryWeapon1(piecenum)
{
	piecenum = flak_fire;
}

AimFromWeapon1(piecenum)
{
	piecenum = flak;
}

AimWeapon1(heading, pitch)
{
	signal 512;
	set-signal-mask 512;
	turn turret to y-axis heading speed <225.000000>;
	turn flak to x-axis <0.000000> - pitch speed <225.000000>;
	wait-for-turn flak around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx UNIT_SFX1 from flak_fire;
	sleep 100;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type BITMAPONLY | BITMAP1;
		explode pelvis type BITMAPONLY | BITMAP2;
		explode lleg type BITMAPONLY | BITMAP3;
		explode rleg type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		explode gunbase type BITMAPONLY | BITMAP1;
		explode rmiss type BITMAPONLY | BITMAP2;
		explode lmiss type BITMAPONLY | BITMAP3;
		explode flak type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type FALL | BITMAP1;
		explode pelvis type FALL | BITMAP2;
		explode lleg type FALL | BITMAP3;
		explode rleg type FALL | BITMAP4;
		explode turret type FALL | BITMAP5;
		explode gunbase type BITMAPONLY | BITMAP1;
		explode lmiss type FALL | BITMAP2;
		explode rmiss type BITMAPONLY | BITMAP3;
		explode flak type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gunbase type BITMAPONLY | BITMAP1;
		explode rmiss type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lmiss type BITMAPONLY | BITMAP3;
		explode flak type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gunbase type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode rmiss type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lmiss type BITMAPONLY | BITMAP3;
	explode flak type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
