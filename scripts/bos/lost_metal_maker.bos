#define TA          // This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, lights, p, light, glow;

static-var  statechg_DesiredState, statechg_StateChanging, Static_Var_3, Static_Var_4, mmState, OPERATING;

HitByWeapon(Func_Var_1, Func_Var_2, newHealth)
{
    newHealth = get HEALTH;
    if( newHealth <= 60 )
    {
        if( Static_Var_3 == 0 )
        {
            Static_Var_3 = 1;
            hide p;
            explode p type FALL | SHATTER | SMOKE | BITMAP2;
        }
    }
    if( newHealth <= 50 )
    {
        if( Static_Var_4 == 0 )
        {
            Static_Var_4 = 1;
            hide p;
            explode p type FALL | SHATTER | SMOKE | BITMAP2;
        }
    }
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
    Static_Var_3 = 0;
    Static_Var_4 = 0;
    while( get BUILD_PERCENT_LEFT )
    {
        sleep 400;
    }
    while( TRUE )
    {
        healthpercent = get HEALTH;
        if( healthpercent >= 60 )
        {
            if( Static_Var_4 == 1 )
            {
                Static_Var_4 = 0;
                show p;
            }
        }
        if( healthpercent >= 75 )
        {
            if( Static_Var_3 == 1 )
            {
                Static_Var_3 = 0;
                show p;
            }
        }
        if( healthpercent < 66 )
        {
            smoketype = 256 | 2;
            if( Rand( 1, 66 ) < healthpercent )
            {
                smoketype = 256 | 1;
            }
            emit-sfx smoketype from body;
        }
        sleeptime = healthpercent * 50;
        if( sleeptime < 200 )
        {
            sleeptime = 200;
        }
        sleep sleeptime;
    }
}

activatescr()
{
    OPERATING = 1;
    if( TRUE )
    {
        move lights to y-axis [10.000000] speed [12.500000];
    }
    sleep 19;
    mmState = 1;
    set ACTIVATION to 1;
}

deactivatescr()
{
    mmState = 0;
    set ACTIVATION to 0;
    OPERATING = 0;
    if( TRUE )
    {
        move lights to y-axis [0.000000] speed [12.500000];
    }
    sleep 32;
}

Go()
{
    call-script activatescr();
    dont-cache lights;
    dont-cache light;
    set ARMORED to 0;
}

Stop()
{
    call-script deactivatescr();
    cache lights;
    cache light;
    set ARMORED to 1;
}

InitState()
{
    statechg_DesiredState = TRUE;
    statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
    if( statechg_StateChanging )
    {
        statechg_DesiredState = requestedstate;
        return (0);
    }
    statechg_StateChanging = TRUE;
    currentstate = statechg_DesiredState;
    statechg_DesiredState = requestedstate;
    while( statechg_DesiredState != currentstate )
    {
        if( statechg_DesiredState == 0 )
        {
            call-script Go();
            currentstate = 0;
        }
        if( statechg_DesiredState == 1 )
        {
            call-script Stop();
            currentstate = 1;
        }
    }
    statechg_StateChanging = FALSE;
}

Standby()
{
    while( TRUE )
    {
        if (mmState == 1)
        {
        emit-sfx 1025 from glow;
        }
        sleep 450;
    }
}


MMStatus(State)
{
    OPERATING = State;
    //get PRINT(OPERATING);
}

ImAMetalMaker()
{
    mmState = -1;
    while( TRUE )
    {
        if (OPERATING == 1)
        {
            if (mmState != 1) {
                call-script RequestState(0);
            }
        }
        else
        {
            if (mmState != 0) {
                call-script RequestState(1);
            }
        }
        sleep 1000;
    }
}


Create()
{
    dont-shade lights;
    dont-shade body;
    call-script InitState();
    start-script SmokeUnit();
    start-script Standby();
    start-script ImAMetalMaker();
}

Activate()
{
    start-script RequestState(0);
}

Deactivate()
{
    start-script RequestState(1);
}

SweetSpot(piecenum)
{
    piecenum = base;
}

Killed(severity, corpsetype)
{
    if( severity <= 25 )
    {
        corpsetype = 1;
        explode body type BITMAPONLY | BITMAP1;
        explode lights type BITMAPONLY | BITMAP3;
        return (0);
    }
    if( severity <= 50 )
    {
        corpsetype = 2;
        explode body type BITMAPONLY | BITMAP3;
        explode lights type SHATTER | BITMAP2;
        return (0);
    }
    corpsetype = 3;
    explode body type BITMAPONLY | BITMAP3;
    explode lights type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
