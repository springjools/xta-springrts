#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, arm, door1, door2, flare1, flare2, flare3;

static-var  restore_delay, Static_Var_2, gun_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache arm;
	turn door1 to x-axis <55.000000> speed <80.000000>;
	turn door2 to x-axis <-80.000000> speed <100.000000>;
	wait-for-turn door2 around x-axis;
	Static_Var_2 = 1;
}

Stop()
{
	Static_Var_2 = 0;
	turn door1 to x-axis <0.000000> speed <80.000000>;
	turn door2 to x-axis <0.000000> speed <100.000000>;
	wait-for-turn door1 around x-axis;
	cache arm;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	cache arm;
	Static_Var_2 = 0;
	gun_1 = base;
	restore_delay = 3000;
	hide flare1;
	hide flare2;
	hide flare3;
	start-script SmokeUnit();
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimFromPrimary(piecenum)
{
	piecenum = flare2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_2 )
	{
		sleep 200;
		start-script RequestState(0);
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		emit-sfx UNIT_SFX0 from flare1;
		sleep 150;
		gun_1 = 1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		emit-sfx UNIT_SFX0 from flare2;
		sleep 150;
		gun_1 = 2;
		return (0);
	}
	if( gun_1 == 2 )
	{
		emit-sfx UNIT_SFX0 from flare3;
		sleep 150;
		gun_1 = 0;
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare3;
	}
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	explode body type BITMAPONLY | BITMAP4;
	explode base type BITMAPONLY | BITMAP5;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	explode flare1 type FALL | BITMAP2;
	explode door2 type FALL | BITMAP2;
	explode arm type FALL | BITMAP2;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | BITMAP1;
	explode arm type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
}
