#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, torso, spines, neck, spikes, rtubes, ltubes, head, horns, shoulders, luparm, lloarm, lflamegun, lflame, ruparm, rloarm, rflamegun, rflame, pack, rthigh, rleg, rfoot, lthigh, lleg, lfoot, packflame1, packflame2, packflame3, packflame4;

static-var  restore_delay, Static_Var_9, bmoving, baiming, packexhaust, currentHeading, currentPitch;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM2			8

PACKON()
{
	while(1)
	{
	if ( packexhaust == 1 )
		{
		emit-sfx UNIT_SFX1 from packflame1;
		emit-sfx UNIT_SFX1 from packflame2;
		emit-sfx UNIT_SFX1 from packflame3;
		emit-sfx UNIT_SFX1 from packflame4;
		//sleep 33;
		}
		else if ( packexhaust == 0 )
		{
		emit-sfx UNIT_SFX1 from rflame;
		emit-sfx UNIT_SFX1 from lflame;
		}
	sleep 33;
	}
sleep 33;
}

walk()
{
	if( bmoving )
	{
		
		turn lleg to x-axis <15.> speed <110>; 		turn lfoot to x-axis <-15.> speed <110>;
		
		turn lthigh to x-axis <20.> speed <60>;
		turn rthigh to x-axis <-20.> speed <55>;
		turn rleg to x-axis <-15.> speed <115>;		turn rfoot to x-axis <15.> speed <115>;
		sleep 500;

		turn rleg to x-axis <15.> speed <105>;		turn rfoot to x-axis <-15.> speed <105>;
	
		sleep 200;

	}
	while( bmoving )
	{
		if( bmoving )
		{
			turn rthigh to x-axis <30.> speed <55>;
			turn lthigh to x-axis <-30.> speed <60>;
			turn lleg to x-axis <-20.> speed <110>;			turn lfoot to x-axis <20.> speed <110>;
			sleep 700;
			
			turn lleg to x-axis <20.> speed <110>;			turn lfoot to x-axis <-20.> speed <110>;
			
			sleep 400;

		}
		if( bmoving )
		{

			turn lthigh to x-axis <30.> speed <60>;
			turn rthigh to x-axis <-30.> speed <55>;
			turn rleg to x-axis <-20.> speed <115>;			turn rfoot to x-axis <20.> speed <115>;
			
			sleep 700;
			
			turn rleg to x-axis <20.> speed <105>;			turn rfoot to x-axis <-20.> speed <105>;

			sleep 400;
		}
	}
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

IdleCheck()
{
	while (1)
	{
		sleep 12000;
		if (!bMoving AND !bAiming)
		{
			turn neck to y-axis <7.5> speed <10>;
			turn head to y-axis <7.5> speed <50>;
			wait-for-turn neck around y-axis;
			wait-for-turn head around y-axis;
			turn neck to y-axis <-7.5> speed <10>;
			turn head to y-axis <-7.5> speed <50>;
			wait-for-turn neck around y-axis;
			wait-for-turn head around y-axis;
			turn neck to y-axis <0> speed <10>;
			turn head to y-axis <0> speed <10>;
			wait-for-turn neck around y-axis;
			wait-for-turn head around y-axis;
		}
		turn neck to y-axis <0> speed <10>;
		turn head to y-axis <0> speed <10>;
		wait-for-turn neck around y-axis;
		wait-for-turn head around y-axis;
		sleep 10;
	}
}

Create()
{
	bMoving = 0;
	baiming = 0;
	Static_Var_9 = 0;
	restore_delay = 2000;
	set ARMORED to TRUE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	start-script IdleCheck();
	hide packflame1;
	hide packflame2;
	hide packflame3;
	hide packflame4;
	packexhaust = 0;
	start-script PACKON();
}

StartMoving()
{
	bMoving = 1;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script walk();
}

StopMoving()
{
	bMoving = 0;
	signal SIG_MOVE;
	turn lthigh to x-axis <0.> speed <100.>;
	turn rthigh to x-axis <0.> speed <100.>;
	turn lleg to x-axis <0.> speed <200.>;
	turn rleg to x-axis <0.> speed <200.>;
	
	turn lthigh to z-axis <0.> speed <100.>;
	turn rthigh to z-axis <0.> speed <100.>;
	turn lleg to z-axis <0.> speed <200.>;
	turn rleg to z-axis <0.> speed <200.>;
	
	move pelvis to y-axis [0.] speed [40.];
	turn pelvis to z-axis <0.> now;
	
	turn rfoot to x-axis <0.> speed <200.>;
	turn lfoot to x-axis <0.> speed <200.>;	
	turn rfoot to z-axis <0.> speed <200.>;
	turn lfoot to z-axis <0.> speed <200.>;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn rflamegun to z-axis <0> speed <300>;
	turn lflamegun to z-axis <0> speed <300>;
	wait-for-turn rflamegun around z-axis;
	wait-for-turn lflamegun around z-axis;
	turn torso to y-axis <0.000000> speed <45.000000>;
	wait-for-turn torso around y-axis;
	baiming = 0;
	sleep 3000;
	packexhaust=0;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	baiming = 1;
	turn torso to y-axis heading speed <100.000000>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	packexhaust = 1;
	if( Static_Var_9 == 0 )
	{
		spin lflamegun around z-axis speed <500.000000>;
		sleep 150;
		stop-spin lflamegun around z-axis decelerate <10.000000>;
	}
	if( Static_Var_9 == 1 )
	{
		spin lflamegun around z-axis speed <500.000000>;
		sleep 150;
		stop-spin lflamegun around z-axis decelerate <10.000000>;
	}
	Static_Var_9 = !Static_Var_9;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	if( Static_Var_9 == 0 )
	{
		piecenum = lflame;
		return (0);
	}
	if( Static_Var_9 == 1 )
	{
		piecenum = lflame;
		return (0);
	}
}
//Buffer

AimWeapon2(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	baiming = 1;
	turn torso to y-axis heading speed <100.000000>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}


FireWeapon2()
{
	packexhaust = 1;
	if( Static_Var_9 == 0 )
	{
		spin rflamegun around z-axis speed <500.000000>;
		sleep 150;
		stop-spin rflamegun around z-axis decelerate <10.000000>;
	}
	if( Static_Var_9 == 1 )
	{
		spin rflamegun around z-axis speed <500.000000>;
		sleep 150;
		stop-spin rflamegun around z-axis decelerate <10.000000>;
	}
	Static_Var_9 = !Static_Var_9;
}

AimFromWeapon2(piecenum)
{
	piecenum = torso;
}

QueryWeapon2(piecenum)
{
	if( Static_Var_9 == 0 )
	{
		piecenum = rflame;
		return (0);
	}
	if( Static_Var_9 == 1 )
	{
		piecenum = rflame;
		return (0);
	}
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode head type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode lloarm type BITMAPONLY | BITMAP2;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP2;
		explode luparm type BITMAPONLY | BITMAP1;
		explode rloarm type BITMAPONLY | BITMAP2;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rthigh type BITMAPONLY | BITMAP2;
		explode ruparm type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode head type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode lloarm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;

		explode lleg type BITMAPONLY | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP2;
		explode luparm type BITMAPONLY | BITMAP1;
		explode rloarm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type BITMAPONLY | BITMAP2;
		explode ruparm type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode head type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode lloarm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP2;
		explode luparm type BITMAPONLY | BITMAP1;
		explode rloarm type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type BITMAPONLY | BITMAP2;
		explode ruparm type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode head type BITMAPONLY | BITMAP4;
	explode pelvis type BITMAPONLY | BITMAP1;
	explode lloarm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode lleg type BITMAPONLY | BITMAP1;
	explode lthigh type BITMAPONLY | BITMAP2;
	explode luparm type BITMAPONLY | BITMAP1;
	explode rloarm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type BITMAPONLY | BITMAP2;
	explode ruparm type BITMAPONLY | BITMAP1;
}



