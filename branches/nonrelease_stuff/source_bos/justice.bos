#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, Justice, sleeve1, launcher1, fire1, fire2, fire3, sleeve2,
       launcher2, fire4, fire5, fire6, sleeve3, launcher3, fire7, fire8,
       fire9, smoke1, smoke2, wake1, wake2, wake3, wake4, wake5,
       wake6;

static-var  restore_delay, gun_1, gun_2, gun_3;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8
#define SIG_AIM_3			16


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	restore_delay = 2000;
	hide fire1;
	hide fire2;
	hide fire3;
	hide fire4;
	hide fire5;
	hide fire6;
	hide fire7;
	gun_1 = base;
	gun_2 = base;
	gun_3 = base;
	start-script SmokeUnit();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
	emit-sfx 2 from wake3;
	emit-sfx 2 from wake4;
		emit-sfx 2 from wake5;
		emit-sfx 2 from wake6;
//		emit-sfx 257 from smoke1;
//		emit-sfx 257 from smoke2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn sleeve1 to y-axis <0.000000> speed <20.000000>;
	turn sleeve2 to y-axis <0.000000> speed <20.000000>;
	turn sleeve3 to y-axis <0.000000> speed <20.000000>;
	turn launcher1 to x-axis <0.000000> speed <20.000000>;
	turn launcher2 to x-axis <0.000000> speed <20.000000>;
	turn launcher3 to x-axis <0.000000> speed <20.000000>;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = fire1;
	}
	if( gun_1 == 1 )
	{
		piecenum = fire2;
	}
	if( gun_1 == 2 )
	{
		piecenum = fire3;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = launcher1;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn sleeve1 to y-axis heading speed <80.000000>;
	turn launcher1 to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn sleeve1 around y-axis;
	wait-for-turn launcher1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		sleep 25;
		emit-sfx 257 from fire1;
		sleep 150;
		gun_1 = Justice;
		return (0);
	}
	if( gun_1 == 1 )
	{
		sleep 25;
		emit-sfx 257 from fire2;
		sleep 150;
		gun_1 = sleeve1;
		return (0);
	}
	if( gun_1 == 2 )
	{
		emit-sfx 257 from fire3;
		sleep 150;
		gun_1 = base;
		return (0);
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = fire4;
	}
	if( gun_2 == 1 )
	{
		piecenum = fire5;
	}
	if( gun_2 == 2 )
	{
		piecenum = fire6;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = launcher2;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn sleeve2 to y-axis heading speed <80.000000>;
	turn launcher2 to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn sleeve2 around y-axis;
	wait-for-turn launcher2 around x-axis;
	return (1);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		emit-sfx 257 from fire4;
		sleep 150;
		gun_2 = Justice;
		return (0);
	}
	if( gun_2 == 1 )
	{
		emit-sfx 257 from fire5;
		sleep 150;
		gun_2 = sleeve1;
		return (0);
	}
	if( gun_2 == 2 )
	{
		emit-sfx 257 from fire6;
		sleep 150;
		gun_2 = base;
		return (0);
	}
}

QueryTertiary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = fire7;
	}
	if( gun_2 == 1 )
	{
		piecenum = fire8;
	}
	if( gun_2 == 2 )
	{
		piecenum = fire9;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = launcher3;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn sleeve3 to y-axis heading speed <80.000000>;
	turn launcher3 to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn sleeve3 around y-axis;
	wait-for-turn launcher3 around x-axis;
	return (1);
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		emit-sfx 257 from fire7;
		sleep 150;
		gun_3 = Justice;
		return (0);
	}
	if( gun_3 == 1 )
	{
		emit-sfx 257 from fire8;
		sleep 150;
		gun_2 = sleeve1;
		return (0);
	}
	if( gun_3 == 2 )
	{
		emit-sfx 257 from fire9;
		sleep 150;
		gun_3 = base;
		return (0);
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode Justice type BITMAPONLY | BITMAP1;
		explode sleeve1 type BITMAPONLY | BITMAP1;
		explode launcher1 type BITMAPONLY | BITMAP1;
		explode fire1 type BITMAPONLY | BITMAP1;
		explode fire2 type BITMAPONLY | BITMAP1;
		explode fire3 type BITMAPONLY | BITMAP1;
		explode sleeve2 type BITMAPONLY | BITMAP1;
		explode launcher2 type BITMAPONLY | BITMAP1;
		explode fire4 type BITMAPONLY | BITMAP1;
		explode fire5 type BITMAPONLY | BITMAP1;
		explode fire6 type BITMAPONLY | BITMAP1;
		explode sleeve3 type BITMAPONLY | BITMAP1;
		explode launcher3 type BITMAPONLY | BITMAP1;
		explode fire7 type BITMAPONLY | BITMAP1;
		explode fire8 type BITMAPONLY | BITMAP1;
		explode fire9 type BITMAPONLY | BITMAP1;
		explode smoke1 type BITMAPONLY | BITMAP1;
		explode smoke2 type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP1;
		explode wake3 type BITMAPONLY | BITMAP1;
		explode wake4 type BITMAPONLY | BITMAP1;
		explode wake5 type BITMAPONLY | BITMAP1;
		explode wake6 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode Justice type SHATTER | BITMAP4;
		explode sleeve1 type SHATTER | BITMAP4;
		explode launcher1 type SHATTER | BITMAP4;
		explode fire1 type SHATTER | BITMAP4;
		explode fire2 type SHATTER | BITMAP4;
		explode fire3 type SHATTER | BITMAP4;
		explode sleeve2 type SHATTER | BITMAP4;
		explode launcher2 type SHATTER | BITMAP4;
		explode fire4 type SHATTER | BITMAP4;
		explode fire5 type SHATTER | BITMAP4;
		explode fire6 type SHATTER | BITMAP4;
		explode sleeve3 type SHATTER | BITMAP4;
		explode launcher3 type SHATTER | BITMAP4;
		explode fire7 type SHATTER | BITMAP4;
		explode fire8 type SHATTER | BITMAP4;
		explode fire9 type SHATTER | BITMAP4;
		explode smoke1 type SHATTER | BITMAP4;
		explode smoke2 type SHATTER | BITMAP4;
		explode wake1 type SHATTER | BITMAP4;
		explode wake2 type SHATTER | BITMAP4;
		explode wake3 type SHATTER | BITMAP4;
		explode wake4 type SHATTER | BITMAP4;
		explode wake5 type SHATTER | BITMAP4;
		explode wake6 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Justice type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode launcher1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fire1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fire2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fire3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode launcher2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fire4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fire5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fire6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode launcher3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fire7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fire8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fire9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode smoke1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode smoke2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Justice type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode launcher1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fire1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fire2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fire3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode launcher2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fire4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fire5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fire6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeve3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode launcher3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fire7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fire8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fire9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode smoke1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode smoke2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
