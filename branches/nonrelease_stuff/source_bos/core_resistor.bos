#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, dummy, wedge, drawer, ground;

static-var  Static_Var_1, restore_delay, Static_Var_3, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2

SetDirection(heading)
{
	var spd;
	spd = get ABS(heading);
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
}

RockOnWaves()
{
	while(1)
	{
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [-1.8] speed [0.3];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <-1.0> speed <1.5>;
		move ground to y-axis [-2.0] speed [0.3];
		wait-for-move ground along y-axis;
		move ground to y-axis [-1.8] speed [0.3];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [-2.0] speed [0.3];
		wait-for-move ground along y-axis;
	}
}

activatescr()
{
	move wedge to x-axis [0.000000] now;
	move wedge to x-axis [2.299994] speed [2.535828];
	sleep 907;

	move drawer to y-axis [9.400000] speed [16.095892];
	sleep 584;

	move dummy to x-axis [-2.099994] speed [4.772723];
	sleep 445;
}

deactivatescr()
{
	move wedge to x-axis [2.299994] now;
	move drawer to y-axis [9.400000] now;
	move dummy to x-axis [-2.099994] now;
	move dummy to x-axis [0.000000] speed [139.999945];
	sleep 15;

	move drawer to y-axis [0.000000] speed [14.573645];
	sleep 645;

	move wedge to x-axis [0.000000] speed [1.822498];
	sleep 1268;
}

tuckscr()
{
	move wedge to x-axis [2.299994] now;
	move drawer to y-axis [9.400000] now;
	move dummy to x-axis [-2.099994] now;
	move dummy to x-axis [0.250000] speed [391.666577];
	sleep 6;

	move drawer to y-axis [0.000000] speed [16.578485];
	sleep 571;
}

reloadscr()
{
	move wedge to x-axis [2.299994] now;
	move drawer to y-axis [0.000000] now;
	move drawer to y-axis [9.400000] speed [22.014063];
	move dummy to x-axis [0.250000] now;
	move dummy to x-axis [0.350000] speed [0.234192];
	sleep 427;

	move dummy to x-axis [-2.049994] speed [7.594934];
	sleep 320;
}

#include "SmokeUnit.bos"

Go()
{
	dont-cache drawer;
	dont-cache dummy;
	dont-cache wedge;
	call-script activatescr();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
	cache drawer;
	cache dummy;
	cache wedge;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( !statechg_DesiredState )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade dummy;
	dont-shade drawer;
	dont-shade dummy;
	dont-shade wedge;
	call-script InitState();
	Static_Var_1 = 0;
	restore_delay = 2000;
	move ground to y-axis [-1.9] now;
	start-script SmokeUnit();
	start-script RockOnWaves();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	hide dummy;
	sleep 1000;
	call-script tuckscr();
	sleep 1000;
	show dummy;
	call-script reloadscr();
	sleep 1000;
}

QueryPrimary(piecenum)
{
	piecenum = dummy;
}

AimFromPrimary(piecenum)
{
	piecenum = dummy;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode drawer type BITMAPONLY | BITMAP2;
		explode dummy type BITMAPONLY | BITMAP3;
		explode wedge type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode drawer type SHATTER | BITMAP2;
		explode dummy type BITMAPONLY | BITMAP3;
		explode wedge type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode drawer type SHATTER | BITMAP2;
		explode dummy type BITMAPONLY | BITMAP3;
		explode wedge type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode drawer type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode dummy type BITMAPONLY | BITMAP3;
	explode wedge type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
