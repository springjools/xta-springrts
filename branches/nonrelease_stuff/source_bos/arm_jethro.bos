#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, rfirept, lfirept, pelvis, lleg, rleg, rthigh, lthigh,
       luparm, lloarm, rloarm, ruparm, rgun, lgun, ground, rexhaust,
       lexhaust;

static-var  bMoving, bAiming, readyToOpen, rackClosed,
            gun_1, moveSpeed, currentSpeed;

// Signal definitions
#define SIG_AIM				4
#define SIG_RESTORE			8

walk()
{
	if( bMoving )
	{
		move pelvis to y-axis [-0.400000] now;
		move rfirept to z-axis [0.000000] now;
		move lfirept to z-axis [0.000000] now;
		move lleg to y-axis [0.000000] now;
		move rleg to y-axis [0.000000] now;
		turn rthigh to x-axis <35.868132> now;
		turn lthigh to x-axis <-35.159341> now;
		turn lleg to x-axis <34.813187> now;
		turn rleg to x-axis <26.368132> now;
		sleep 500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.300000] now;
		move torso to y-axis [0.000000] now;
		move rleg to y-axis [0.400000] now;
		turn rthigh to x-axis <20.038462> now;
		turn lthigh to x-axis <-30.582418> now;
		turn lleg to x-axis <29.879121> now;
		turn rleg to x-axis <26.725275> now;
		sleep 1500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.200000] now;
		move rleg to y-axis [0.700000] now;
		turn rthigh to x-axis <9.489011> now;
		turn lthigh to x-axis <-23.912088> now;
		turn lleg to x-axis <24.615385> now;
		turn rleg to x-axis <26.725275> now;
		sleep 2000 / currentSpeed;
	}
	if( bMoving )
	{
		move torso to y-axis [-0.150000] now;
		move pelvis to y-axis [-0.099994] now;
		turn rthigh to x-axis <-12.302198> now;
		turn lthigh to x-axis <-7.379121> now;
		turn lleg to x-axis <7.379121> now;
		turn rleg to x-axis <26.368132> now;
		sleep 2500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		move rleg to y-axis [0.550000] now;
		turn rthigh to x-axis <-21.093407> now;
		turn lthigh to x-axis <4.571429> now;
		turn lleg to x-axis <16.879121> now;
		turn rleg to x-axis <26.368132> now;
		sleep 2000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.100000] now;
		turn rthigh to x-axis <-28.835165> now;
		turn lthigh to x-axis <15.824176> now;
		sleep 2500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.200000] now;
		turn rthigh to x-axis <-43.604396> now;
		turn lthigh to x-axis <18.637363> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.300000] now;
		turn rthigh to x-axis <-54.148352> now;
		turn lthigh to x-axis <25.670330> now;
		sleep 3500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.400000] now;
		move rleg to y-axis [0.000000] now;
		turn rthigh to x-axis <-35.868132> now;
		turn lthigh to x-axis <28.126374> now;
		turn lleg to x-axis <16.170330> now;
		turn rleg to x-axis <35.868132> now;
		sleep 2500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.300000] now;
		move torso to y-axis [0.000000] now;
		move lleg to y-axis [0.700000] now;
		turn rthigh to x-axis <-27.769231> now;
		turn lthigh to x-axis <21.445055> now;
		turn lleg to x-axis <21.802198> now;
		turn rleg to x-axis <28.126374> now;
		sleep 1500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.200000] now;
		turn rthigh to x-axis <-21.802198> now;
		turn lthigh to x-axis <8.434066> now;
		turn lleg to x-axis <24.258242> now;
		turn rleg to x-axis <22.148352> now;
		sleep 2000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.100000] now;
		turn rthigh to x-axis <-16.170330> now;
		turn lthigh to x-axis <-6.670330> now;
		turn rleg to x-axis <16.879121> now;
		sleep 2500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		move lleg to y-axis [0.800000] now;
		turn rthigh to x-axis <-6.670330> now;
		turn lthigh to x-axis <-15.467033> now;
		turn lleg to x-axis <20.390110> now;
		turn rleg to x-axis <25.313187> now;
		sleep 2000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.100000] now;
		move torso to y-axis [-0.150000] now;
		turn rthigh to x-axis <2.813187> now;
		turn lthigh to x-axis <-26.016484> now;
		sleep 2500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.200000] now;
		turn rthigh to x-axis <10.192308> now;
		turn lthigh to x-axis <-35.159341> now;
		sleep 3000 / currentSpeed;
	}
	move pelvis to y-axis [-0.300000] now;
	turn rthigh to x-axis <21.445055> now;
	turn lthigh to x-axis <-55.560440> now;
	sleep 3500 / currentSpeed;
}

walklegs()
{
	if( bMoving )
	{
		move pelvis to y-axis [-0.400000] now;
		move rfirept to z-axis [0.000000] now;
		move lfirept to z-axis [0.000000] now;
		move lleg to y-axis [0.000000] now;
		move rleg to y-axis [0.000000] now;
		turn rthigh to x-axis <35.868132> now;
		turn lthigh to x-axis <-35.159341> now;
		turn lleg to x-axis <34.813187> now;
		turn rleg to x-axis <26.368132> now;
		sleep 1900 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.300000] now;
		move rleg to y-axis [0.400000] now;
		turn rthigh to x-axis <20.038462> now;
		turn lthigh to x-axis <-30.582418> now;
		turn lleg to x-axis <29.879121> now;
		turn rleg to x-axis <26.725275> now;
		sleep 1500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.200000] now;
		move rleg to y-axis [0.700000] now;
		turn rthigh to x-axis <9.489011> now;
		turn lthigh to x-axis <-23.912088> now;
		turn lleg to x-axis <24.615385> now;
		turn rleg to x-axis <26.725275> now;
		sleep 2000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.099994] now;
		turn rthigh to x-axis <-12.302198> now;
		turn lthigh to x-axis <-7.379121> now;
		turn lleg to x-axis <7.379121> now;
		turn rleg to x-axis <26.368132> now;
		sleep 2500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		move rleg to y-axis [0.550000] now;
		turn rthigh to x-axis <-21.093407> now;
		turn lthigh to x-axis <4.571429> now;
		turn lleg to x-axis <16.879121> now;
		turn rleg to x-axis <26.368132> now;
		sleep 2000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.100000] now;
		turn rthigh to x-axis <-28.835165> now;
		turn lthigh to x-axis <15.824176> now;
		sleep 2500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.200000] now;
		turn rthigh to x-axis <-43.604396> now;
		turn lthigh to x-axis <18.637363> now;
		sleep 3000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.300000] now;
		turn rthigh to x-axis <-54.148352> now;
		turn lthigh to x-axis <25.670330> now;
		sleep 3500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.400000] now;
		move rleg to y-axis [0.000000] now;
		turn rthigh to x-axis <-35.868132> now;
		turn lthigh to x-axis <28.126374> now;
		turn lleg to x-axis <16.170330> now;
		turn rleg to x-axis <35.868132> now;
		sleep 1900 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.300000] now;
		move lleg to y-axis [0.700000] now;
		turn rthigh to x-axis <-27.769231> now;
		turn lthigh to x-axis <21.445055> now;
		turn lleg to x-axis <21.802198> now;
		turn rleg to x-axis <28.126374> now;
		sleep 1500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.200000] now;
		turn rthigh to x-axis <-21.802198> now;
		turn lthigh to x-axis <8.434066> now;
		turn lleg to x-axis <24.258242> now;
		turn rleg to x-axis <22.148352> now;
		sleep 2000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.100000] now;
		turn rthigh to x-axis <-16.170330> now;
		turn lthigh to x-axis <-6.670330> now;
		turn rleg to x-axis <16.879121> now;
		sleep 2500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		move lleg to y-axis [0.800000] now;
		turn rthigh to x-axis <-6.670330> now;
		turn lthigh to x-axis <-15.467033> now;
		turn lleg to x-axis <20.390110> now;
		turn rleg to x-axis <25.313187> now;
		sleep 2000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.100000] now;
		turn rthigh to x-axis <2.813187> now;
		turn lthigh to x-axis <-26.016484> now;
		sleep 2500 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.200000] now;
		turn rthigh to x-axis <10.192308> now;
		turn lthigh to x-axis <-35.159341> now;
		sleep 3000 / currentSpeed;
	}
	move pelvis to y-axis [-0.300000] now;
	turn rthigh to x-axis <21.445055> now;
	turn lthigh to x-axis <-55.560440> now;
	sleep 3500 / currentSpeed;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				call-script walklegs();
			}
			else
			{
				call-script walk();
			}
			justmoved = TRUE;
		}
		else
		{
			if( justmoved )
			{
				move pelvis to y-axis [0.000000] speed [1.000000];
				turn rthigh to x-axis <0.000000> speed <200.038462>;
				turn rleg to x-axis <0.000000> speed <200.038462>;
				turn lthigh to x-axis <0.000000> speed <200.038462>;
				turn lleg to x-axis <0.000000> speed <200.038462>;
				/*if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <90.016484>;
				}*/
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*100/moveSpeed;
		if (currentSpeed<20) currentSpeed=20;
		sleep 142;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script UnitSpeed();
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide rfirept;
	hide lfirept;
	hide lexhaust;
	hide rexhaust;
	bMoving = FALSE;
	bAiming = FALSE;
	readyToOpen = 1;
	rackClosed = 1;
	gun_1 = 0;
	moveSpeed = get MAX_SPEED;
	currentSpeed = 100;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

open()
{
	set-signal-mask 0;
	readyToOpen=0;
	turn luparm to z-axis <-60.0> speed <120.0>;
	turn lloarm to z-axis <40.0> speed <80.0>;
	turn rloarm to z-axis <-40.0> speed <80.0>;
	turn ruparm to z-axis <60.0> speed <120.0>;
	wait-for-turn luparm around z-axis;
	rackClosed=0;
	readyToOpen=1;
}

RestoreAfterDelay()
{
	sleep 6000;
	rackClosed=1;
	bAiming = FALSE;
	turn torso to y-axis <0.0> speed <120.0>;
	turn luparm to z-axis <0.000000> speed <60.0>;
	turn lloarm to z-axis <0.000000> speed <40.0>;
	turn rloarm to z-axis <0.000000> speed <40.0>;
	turn ruparm to z-axis <0.000000> speed <60.0>;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	if( rackClosed AND readyToOpen )
	{
		start-script open();
	}
	while( rackClosed )
	{
		sleep 100;
	}
	turn torso to y-axis heading speed <275.060440>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromTertiary(piecenum)
{
	piecenum = torso;
}

QueryTertiary(piecenum)
{
	if( gun_1 )
	{
		piecenum = rfirept;
	}
	else
	{
		piecenum = lfirept;
	}
}

FireTertiary()
{
	if( gun_1 )
	{
		emit-sfx UNIT_SFX1 from rexhaust;
		move rgun to z-axis [-1.500000] speed [25.000000];
		wait-for-move rgun along z-axis;
		move rgun to z-axis [0.000000] speed [0.750000];
	}
	else
	{
		emit-sfx UNIT_SFX1 from lexhaust;
		move lgun to z-axis [-1.500000] speed [25.000000];
		wait-for-move lgun along z-axis;
		move lgun to z-axis [0.000000] speed [0.750000];
	}
	gun_1 = !gun_1;
}

Killed(severity, corpsetype)
{
	hide rfirept;
	hide lfirept;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type FALL | BITMAP1;
		explode lgun type FALL | BITMAP3;
		explode lleg type FALL | BITMAP4;
		explode lloarm type FALL | BITMAP5;
		explode lthigh type FALL | BITMAP1;
		explode luparm type FALL | BITMAP2;
		explode pelvis type FALL | BITMAP3;
		explode rgun type FALL | BITMAP5;
		explode rleg type FALL | BITMAP1;
		explode rloarm type FALL | BITMAP2;
		explode rthigh type FALL | BITMAP3;
		explode ruparm type FALL | BITMAP4;
		explode torso type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type FALL | BITMAP1;
		explode lgun type FALL | BITMAP3;
		explode lleg type FALL | BITMAP4;
		explode lloarm type FALL | BITMAP5;
		explode lthigh type FALL | BITMAP1;
		explode luparm type FALL | BITMAP2;
		explode pelvis type FALL | BITMAP3;
		explode rgun type FALL | BITMAP5;
		explode rleg type FALL | BITMAP1;
		explode rloarm type FALL | BITMAP2;
		explode rthigh type FALL | BITMAP3;
		explode ruparm type FALL | BITMAP4;
		explode torso type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode torso type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
