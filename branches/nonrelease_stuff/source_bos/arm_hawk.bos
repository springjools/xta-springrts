#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, wing1, wing2, rearthrust;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, Static_Var_4,MissilesOn;

lua_UnitLanded()
{ 
 	return 0; 
}
 
lua_UnitLeftLand() 
{ 
	return 0; 
}

/*
Crashing(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = get HEALTH;
		if( Func_Var_1 < 5 )
		{
			Static_Var_4 = 0;
		}
		sleep 1;
	}
}
*/

activatescr()
{
	move wing1 to x-axis [0.000000] now;
	move wing1 to x-axis [1.999994] speed [2.004004];
	move wing1 to z-axis [0.000000] now;
	move wing1 to z-axis [-0.549994] speed [0.551099];
	move wing2 to x-axis [0.000000] now;
	move wing2 to x-axis [-2.249994] speed [2.254492];
	move wing2 to z-axis [0.000000] now;
	move wing2 to z-axis [-0.599994] speed [0.601184];
	//Static_Var_4 = 1;
	sleep 998;
	//emit-sfx 1024 from rearthrust;
}

/*
Flamers()
{
	while( TRUE )
	{
		if( Static_Var_4 == 1 )
		{
			emit-sfx 1024 from rearthrust;
		emit-sfx 1024 from base;
		emit-sfx 1024 from wing1;
		emit-sfx 1024 from wing2;
		}
		sleep 1;
	}
	if( Static_Var_4 == 2 )
	{
		emit-sfx 1024 from rearthrust;
	}
	sleep 1;
}
*/

deactivatescr()
{
	move wing1 to x-axis [1.999994] now;
	move wing1 to x-axis [0.000000] speed [2.004004];
	move wing1 to z-axis [-0.549994] now;
	move wing1 to z-axis [0.000000] speed [0.551099];
	move wing2 to x-axis [-2.249994] now;
	move wing2 to x-axis [0.000000] speed [2.254492];
	//Static_Var_4 = 0;
	move wing2 to z-axis [-0.599994] now;
	move wing2 to z-axis [0.000000] speed [0.601184];
	sleep 998;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 AND ( !Static_Var_1 ) )
	{
		Static_Var_1 = 1;
		turn base to z-axis <240.049451> speed <120.027473>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.027473> speed <180.038462>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.027473>;
		Static_Var_1 = 0;
	}
}

Create()
{
	Static_Var_1 = 0;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	//start-script Flamers();
	//start-script Crashing();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	MissilesOn = 1;
	call-script lua_UnitLeftLand();
}

StopMoving()
{
	MissilesOn = 0;
	call-script lua_UnitLanded();
}

AimFromPrimary(piecenum)
{
	piecenum = flare1;
}

AimPrimary(piecenum)
{
	if (MissilesOn) {return 1;   }
	return 0;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

AimFromSecondary(piecenum)
{
	piecenum = flare1;
}

AimSecondary(piecenum)
{
	if (MissilesOn) {return 1;   }
	return 0;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	//start-script Crashing();
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP2;
		explode flare2 type BITMAPONLY | BITMAP3;
		explode rearthrust type BITMAPONLY | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | BITMAP2;
		explode flare2 type FALL | BITMAP3;
		explode rearthrust type FALL | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rearthrust type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rearthrust type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wing1 type BITMAPONLY | BITMAP5;
	explode wing2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
