#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wing1, wing2, flare1, flare2, thrusta1, thrusta2, thrustb;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;

lua_UnitStoppedMoving()
{ 
 	return 0; 
}
 
lua_UnitStartedMoving() 
{ 
	return 0; 
}


activatescr()
{
	if( TRUE )
	{
		turn wing1 to z-axis <0.000000> now;
		turn wing1 to z-axis <-90.021978> speed <60.697802>;
		turn wing2 to z-axis <0.000000> now;
		turn wing2 to z-axis <90.021978> speed <60.697802>;
		sleep 1483;
	}
	sleep 20;
}

deactivatescr()
{
	if( TRUE )
	{
		turn wing1 to z-axis <-90.021978> now;
		turn wing1 to z-axis <0.000000> speed <60.131868>;
		turn wing2 to z-axis <90.021978> now;
		turn wing2 to z-axis <0.000000> speed <60.131868>;
		sleep 1497;
	}
	sleep 12;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	Static_Var_4 = 1;
	Static_Var_5 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_5 )
	{
		Static_Var_4 = requestedstate;
		return (0);
	}
	Static_Var_5 = 1;
	currentstate = Static_Var_4;
	Static_Var_4 = requestedstate;
	while( Static_Var_4 != currentstate )
	{
		if( Static_Var_4 == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( Static_Var_4 == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	Static_Var_5 = 0;
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	call-script lua_UnitStartedMoving();
}

StopMoving()
{
	call-script lua_UnitStoppedMoving();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP2;
		explode flare2 type BITMAPONLY | BITMAP3;
		explode thrusta1 type BITMAPONLY | BITMAP4;
		explode thrusta2 type BITMAPONLY | BITMAP5;
		explode thrustb type BITMAPONLY | BITMAP1;
		explode wing1 type BITMAPONLY | BITMAP2;
		explode wing2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | BITMAP2;
		explode flare2 type FALL | BITMAP3;
		explode thrusta1 type FALL | BITMAP4;
		explode thrusta2 type FALL | BITMAP5;
		explode thrustb type FALL | BITMAP1;
		explode wing1 type FALL | BITMAP2;
		explode wing2 type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode thrustb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wing1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wing2 type SHATTER | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode thrustb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wing1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wing2 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
