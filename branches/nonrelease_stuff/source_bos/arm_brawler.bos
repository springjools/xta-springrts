#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1b, flare2b, flare1a, flare2a, flare1c, flare2c, base, wing1,
       wing2;

static-var  gun_1, gun_2, statechg_DesiredState, statechg_StateChanging;

lua_UnitStoppedMoving()
{ 
 	return 0; 
}
 
lua_UnitStartedMoving() 
{ 
	return 0; 
}

activatescr()
{
	move wing1 to x-axis [2.900000] speed [2.000000];
	move wing2 to x-axis [-2.900000] speed [2.000000];
	wait-for-move wing1 along x-axis;
}

deactivatescr()
{
	move wing1 to x-axis [0.000000] speed [2.000000];
	move wing2 to x-axis [0.000000] speed [2.000000];
	wait-for-move wing1 along x-axis;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = 1;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			currentstate = 0;
		}
	}
	statechg_StateChanging = 0;
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	statechg_DesiredState = 1;
	statechg_StateChanging = 0;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	call-script lua_UnitStartedMoving();
}

StopMoving()
{
	call-script lua_UnitStoppedMoving();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Shot1()
{
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimPrimary()
{
	return (1);
}

FireSecondary()
{
	gun_2 = !gun_2;
}

QuerySecondary(piecenum)
{
	piecenum = 4 + gun_2;
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

AimSecondary()
{
	return (1);
}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare2a;
	hide flare1b;
	hide flare2b;
	hide flare1c;
	hide flare2c;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type BITMAPONLY | BITMAP2;
		explode flare2a type BITMAPONLY | BITMAP3;
		explode flare1b type BITMAPONLY | BITMAP4;
		explode flare2b type BITMAPONLY | BITMAP5;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | BITMAP2;
		explode flare2a type FALL | BITMAP3;
		explode flare1b type FALL | BITMAP4;
		explode flare2b type FALL | BITMAP5;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode wing1 type BITMAPONLY | BITMAP5;
	explode wing2 type BITMAPONLY | BITMAP1;
}
