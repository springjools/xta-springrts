#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, bombdrop, gun, wing1, wing2, thrust;

static-var  Static_Var_1, gun_2, statechg_DesiredState, statechg_StateChanging, Static_Var_5;

lua_UnitStoppedMoving()
{ 
 	return 0; 
}
 
lua_UnitStartedMoving() 
{ 
	return 0; 
}

activatescr()
{
	move wing1 to x-axis [0.000000] now;
	move wing1 to x-axis [6.750000] speed [6.763513];
	move wing1 to z-axis [0.000000] now;
	move wing1 to z-axis [-1.750000] speed [1.753491];
	move wing2 to x-axis [0.000000] now;
	move wing2 to x-axis [-6.950000] speed [6.963916];
	move wing2 to z-axis [0.000000] now;
	move wing2 to z-axis [-1.850000] speed [1.853699];
	sleep 998;
}

deactivatescr()
{
	move wing1 to x-axis [6.750000] now;
	move wing1 to x-axis [0.000000] speed [6.763513];
	move wing1 to z-axis [-1.750000] now;
	move wing1 to z-axis [0.000000] speed [1.753491];
	move wing2 to x-axis [-6.950000] now;
	move wing2 to x-axis [0.000000] speed [6.963916];
	move wing2 to z-axis [-1.850000] now;
	move wing2 to z-axis [0.000000] speed [1.853699];
	sleep 998;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = 1;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			currentstate = 0;
		}
	}
	statechg_StateChanging = 0;
}

Create()
{
	hide flare1;
	hide flare2;
	gun_2 = 0;
	Static_Var_1 = 3000;
	statechg_DesiredState = 1;
	statechg_StateChanging = 0;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	call-script lua_UnitStartedMoving();
}

StopMoving()
{
	call-script lua_UnitStoppedMoving();
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn gun to y-axis <0.000000> speed <90.016484>;
	turn gun to x-axis <0.000000> speed <50.005495>;
}

QueryPrimary(piecenum)
{
	piecenum = bombdrop;
}

QuerySecondary(piecenum)
{
	piecenum = gun_2;
}

AimSecondary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn gun to y-axis heading speed <390.093407>;
	turn gun to x-axis <0.000000> - pitch speed <350.082418>;
	wait-for-turn gun around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	gun_2 = !gun_2;
	if( gun_2 )
	{
		show flare2;
		sleep 150;
		hide flare2;
	}
	else
	{
		show flare1;
		sleep 150;
		hide flare1;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = gun;
}

QueryWeapon3(Func_Var_1)
{
	Func_Var_1 = 3;
}

AimWeapon3(Func_Var_1, Func_Var_2)
{
	signal 4;
	set-signal-mask 4;
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode bombdrop type FALL | BITMAP2;
		explode flare1 type FALL | BITMAP3;
		explode flare2 type FALL | BITMAP4;
		explode gun type FALL | BITMAP5;
		explode thrust type FALL | BITMAP1;
		explode wing1 type SHATTER | BITMAP2;
		explode wing2 type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode bombdrop type FALL | BITMAP2;
		explode flare1 type FALL | BITMAP3;
		explode flare2 type FALL | BITMAP4;
		explode gun type FALL | BITMAP5;
		explode thrust type FALL | BITMAP1;
		explode wing1 type SHATTER | BITMAP2;
		explode wing2 type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode bombdrop type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode thrust type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wing1 type SHATTER | BITMAP2;
		explode wing2 type SHATTER | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode bombdrop type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode thrust type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode wing2 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
