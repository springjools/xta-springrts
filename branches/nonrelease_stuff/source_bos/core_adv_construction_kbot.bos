#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD		4	

piece  rnanospray, lnanospray, torso, lforeleg, rforeleg, rcasedoor, lcasedoor, rhindleg,
       lhindleg, lnanocase, rnanocase, rgunjoint, lgunjoint, ground, lnanogun, pelvis,
       rnanogun;

static-var  bMoving, spray, statechg_DesiredState, statechg_StateChanging,
			moveSpeed, currentSpeed, notBuilding;


Build()
{
	set-signal-mask SIG_BUILD;
	while( TRUE )
	{
		emit-sfx UNIT_SFX1 from lnanospray;
		emit-sfx UNIT_SFX1 from rnanospray;
		sleep 100;
	}
}

walk()
{
	if( bMoving )
	{
		move lforeleg to z-axis [4.375000] now;
		move rforeleg to z-axis [-4.250000] now;
		move torso to y-axis [0.000000] now;
		move rcasedoor to x-axis [0.000000] now;
		move lcasedoor to x-axis [0.000000] now;
		sleep 6000/currentSpeed;
	}
	if( bMoving )
	{
		move lforeleg to z-axis [2.125000] now;
		move rforeleg to y-axis [1.125000] now;
		move rforeleg to z-axis [-4.250000] now;
		move torso to y-axis [0.000000] now;
		move rhindleg to z-axis [3.750000] now;
		turn torso to x-axis <-8.082418> now;
		sleep 5200/currentSpeed;
	}
	if( bMoving )
	{
		move lforeleg to z-axis [0.000000] now;
		move rforeleg to y-axis [2.375000] now;
		move rforeleg to z-axis [-4.125000] now;
		move torso to y-axis [0.000000] now;
		move rhindleg to z-axis [7.875000] now;
		turn torso to x-axis <-11.956044> now;
		sleep 4400/currentSpeed;
	}
	if( bMoving )
	{
		move lforeleg to z-axis [-1.999985] now;
		move rforeleg to y-axis [1.125000] now;
		move rforeleg to z-axis [0.000000] now;
		move torso to y-axis [0.000000] now;
		move rhindleg to z-axis [3.750000] now;
		turn torso to x-axis <-8.082418> now;
		sleep 5200/currentSpeed;
	}
	if( bMoving )
	{
		move lforeleg to z-axis [-4.250000] now;
		move rforeleg to y-axis [0.000000] now;
		move rforeleg to z-axis [4.000000] now;
		move torso to y-axis [0.000000] now;
		move rhindleg to z-axis [0.000000] now;
		turn torso to x-axis <0.000000> now;
		sleep 6000/currentSpeed;
	}
	if( bMoving )
	{
		move lforeleg to y-axis [1.125000] now;
		move rforeleg to z-axis [2.000000] now;
		move torso to y-axis [0.000000] now;
		move lhindleg to z-axis [3.750000] now;
		turn torso to x-axis <-8.082418> now;
		sleep 5200/currentSpeed;
	}
	if( bMoving )
	{
		move lforeleg to y-axis [2.375000] now;
		move rforeleg to z-axis [0.000000] now;
		move torso to y-axis [0.000000] now;
		move lhindleg to z-axis [7.750000] now;
		turn torso to x-axis <-11.956044> now;
		sleep 4400/currentSpeed;
	}
	move lforeleg to y-axis [1.125000] now;
	move lforeleg to z-axis [0.000000] now;
	move rforeleg to z-axis [-2.124985] now;
	move torso to y-axis [0.000000] now;
	move lhindleg to z-axis [3.750000] now;
	turn torso to x-axis <-8.082418> now;
	sleep 5200/currentSpeed;
}

walklegs()
{
	if( bMoving )
	{
		move lforeleg to z-axis [4.375000] now;
		move rforeleg to z-axis [-4.250000] now;
		move rcasedoor to x-axis [0.000000] now;
		move lcasedoor to x-axis [0.000000] now;
		sleep 6000/currentSpeed;
	}
	if( bMoving )
	{
		move lforeleg to z-axis [2.125000] now;
		move rforeleg to y-axis [1.125000] now;
		move rforeleg to z-axis [-4.250000] now;
		move rhindleg to z-axis [3.750000] now;
		sleep 5200/currentSpeed;
	}
	if( bMoving )
	{
		move lforeleg to z-axis [0.000000] now;
		move rforeleg to y-axis [2.375000] now;
		move rforeleg to z-axis [-4.125000] now;
		move rhindleg to z-axis [7.875000] now;
		sleep 4400/currentSpeed;
	}
	if( bMoving )
	{
		move lforeleg to z-axis [-1.999985] now;
		move rforeleg to y-axis [1.125000] now;
		move rforeleg to z-axis [0.000000] now;
		move rhindleg to z-axis [3.750000] now;
		sleep 5200/currentSpeed;
	}
	if( bMoving )
	{
		move lforeleg to z-axis [-4.250000] now;
		move rforeleg to y-axis [0.000000] now;
		move rforeleg to z-axis [4.000000] now;
		move rhindleg to z-axis [0.000000] now;
		sleep 6000/currentSpeed;
	}
	if( bMoving )
	{
		move lforeleg to y-axis [1.125000] now;
		move rforeleg to z-axis [2.000000] now;
		move lhindleg to z-axis [3.750000] now;
		sleep 5200/currentSpeed;
	}
	if( bMoving )
	{
		move lforeleg to y-axis [2.375000] now;
		move rforeleg to z-axis [0.000000] now;
		move lhindleg to z-axis [7.750000] now;
		sleep 4400/currentSpeed;
	}
	move lforeleg to y-axis [1.125000] now;
	move lforeleg to z-axis [0.000000] now;
	move rforeleg to z-axis [-2.124985] now;
	move lhindleg to z-axis [3.750000] now;
	sleep 5200/currentSpeed;
}

stand()
{
	move rcasedoor to x-axis [0.000000] now;
	move lcasedoor to x-axis [0.000000] now;
	move lnanospray to x-axis [0.000000] now;
	sleep 200;
}

open()
{
	move lnanocase to x-axis [0.000000] now;
	move lnanocase to x-axis [-7.249985] speed [40.000000];
	move rnanocase to x-axis [0.000000] now;
	move rnanocase to x-axis [7.000000] speed [40.000000];
	move rcasedoor to x-axis [0.000000] now;
	move lcasedoor to x-axis [0.000000] now;
	sleep 170;

	turn lnanocase to y-axis <-90.016484> speed <510.000000>;
	turn rnanocase to y-axis <90.016484> speed <510.000000>;
	turn rcasedoor to z-axis <-90.016484> speed <510.000000>;
	turn lcasedoor to z-axis <90.016484> speed <510.000000>;
	sleep 170;

	move rgunjoint to x-axis [11.875000] speed [75.000000];
	move lgunjoint to x-axis [-11.874985] speed [75.000000];
	sleep 182;
	
	set INBUILDSTANCE to 1;
}

close()
{
	set INBUILDSTANCE to 0;

	move lnanocase to x-axis [-7.249985] now;
	move rnanocase to x-axis [7.000000] now;
	move rgunjoint to x-axis [11.875000] now;
	move rgunjoint to x-axis [0.000000] speed [52.500000];
	move rcasedoor to x-axis [0.000000] now;
	move lgunjoint to x-axis [-11.874985] now;
	move lgunjoint to x-axis [0.000000] speed [52.500000];
	move lcasedoor to x-axis [0.000000] now;
	turn lnanocase to y-axis <-90.016484> now;
	turn rnanocase to y-axis <90.016484> now;
	turn rcasedoor to z-axis <-90.016484> now;
	turn lcasedoor to z-axis <90.016484> now;
	turn torso to y-axis <0.000000> speed <250.000000>;
	sleep 225;

	turn lnanocase to y-axis <0.000000> speed <390.000000>;
	turn rnanocase to y-axis <0.000000> speed <390.000000>;
	turn rcasedoor to z-axis <0.346154> speed <390.000000>;
	turn lcasedoor to z-axis <0.000000> speed <390.000000>;
	sleep 230;

	move lnanocase to x-axis [0.000000] speed [32.500000];
	move rnanocase to x-axis [0.000000] speed [32.500000];
	sleep 240;
}

MotionControl(Func_Var_1, Func_Var_2)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		Func_Var_2 = notBuilding;
		if( Func_Var_1 )
		{
			if( Func_Var_2 )
			{
				call-script walklegs();
			}
			else
			{
				call-script walk();
			}
		}
		else
		{
			call-script stand();
		}
	}
}

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*100/moveSpeed;
		if (currentSpeed<20) currentSpeed=20;
		sleep 142;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script UnitSpeed();
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*
Go()
{
	Static_Var_3 = 1;
	call-script open();
	turn torso to y-axis Static_Var_1 speed <160.038462>;
	wait-for-turn torso around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn torso to y-axis <0.000000> speed <160.038462>;
	wait-for-turn torso around y-axis;
	call-script close();
	Static_Var_3 = 0;
}
*/

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script close();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script open();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	bMoving = FALSE;
	spray = rnanospray;
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	moveSpeed = get MAX_SPEED;
	currentSpeed = 100;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn torso to y-axis heading speed <250.000000>;
	wait-for-turn torso around y-axis;
	start-script Build();
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

QueryNanoPiece(piecenum)
{
	piecenum = spray;
	spray = !spray;
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lcasedoor type FALL | BITMAP2;
		explode lforeleg type FALL | BITMAP3;
		explode lgunjoint type FALL | BITMAP4;
		explode lhindleg type FALL | BITMAP5;
		explode lnanocase type BITMAPONLY | BITMAP1;
		explode lnanogun type FALL | BITMAP2;
		explode lnanospray type FALL | BITMAP3;
		explode pelvis type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type FALL | BITMAP1;
		explode lcasedoor type FALL | BITMAP2;
		explode lforeleg type FALL | BITMAP3;
		explode lgunjoint type FALL | BITMAP4;
		explode lhindleg type FALL | BITMAP5;
		explode lnanocase type BITMAPONLY | BITMAP1;
		explode lnanogun type FALL | BITMAP2;
		explode lnanospray type FALL | BITMAP3;
		explode pelvis type FALL | BITMAP4;
		explode rcasedoor type FALL | BITMAP5;
		explode rforeleg type FALL | BITMAP1;
		explode rgunjoint type FALL | BITMAP2;
		explode rhindleg type FALL | BITMAP3;
		explode rnanocase type BITMAPONLY | BITMAP4;
		explode rnanogun type FALL | BITMAP5;
		explode rnanospray type FALL | BITMAP1;
		explode torso type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lcasedoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lforeleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lgunjoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lhindleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lnanocase type BITMAPONLY | BITMAP1;
		explode lnanogun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lnanospray type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rcasedoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rforeleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rgunjoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rhindleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rnanocase type BITMAPONLY | BITMAP4;
		explode rnanogun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rnanospray type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode torso type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lcasedoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lforeleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lgunjoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lhindleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lnanocase type BITMAPONLY | BITMAP1;
	explode lnanogun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lnanospray type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rcasedoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rforeleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rgunjoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rhindleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rnanocase type BITMAPONLY | BITMAP4;
	explode rnanogun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rnanospray type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}
