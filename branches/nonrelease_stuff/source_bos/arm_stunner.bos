#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, launch, door1, door2, frame1, frame2, frame3, frame4,
       cover2, cover1, dummy;

static-var  Static_Var_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
		move door1 to x-axis [0.000000] now;
		move door1 to x-axis [7.500000] speed [7.500000];
		move door2 to x-axis [0.000000] now;
		move door2 to x-axis [-7.500000] speed [7.500000];
		sleep 1033;
		set ARMORED to 0;

		move frame1 to x-axis [2.500000] speed [2.500000];
		move frame2 to x-axis [2.500000] speed [2.500000];
		move frame3 to x-axis [-2.500000] speed [2.500000];
		move frame4 to x-axis [-2.500000] speed [2.500000];
		sleep 1036;

		move frame1 to x-axis [12.500000] speed [7.500000];
		move frame2 to x-axis [12.500000] speed [7.500000];
		move frame3 to x-axis [-12.500000] speed [7.500000];
		move frame4 to x-axis [-12.500000] speed [7.500000];
		move cover2 to x-axis [-5.000000] speed [2.500000];
		move cover1 to x-axis [5.000000] speed [2.500000];
		turn cover2 to z-axis <-75.000000> speed <72.000000>;
		turn cover1 to z-axis <75.000000> speed <72.000000>;
		sleep 1034;

		move frame1 to x-axis [15.000000] speed [2.500000];
		move frame2 to x-axis [15.000000] speed [2.500000];
		move frame3 to x-axis [-15.000000] speed [2.500000];
		move frame4 to x-axis [-15.000000] speed [2.500000];
		move cover2 to x-axis [-7.500000] speed [2.500000];
		move cover1 to x-axis [7.500000] speed [2.500000];
		turn cover2 to z-axis <-90.000000> speed <14.000000>;
		turn cover1 to z-axis <90.000000> speed <14.000000>;
		sleep 1036;
}

deactivatescr()
{
		move door1 to x-axis [7.500000] now;
		move door2 to x-axis [-7.500000] now;
		move frame1 to x-axis [15.000000] now;
		move frame1 to x-axis [12.500000] speed [5.000000];
		move frame2 to x-axis [15.000000] now;
		move frame2 to x-axis [10.000000] speed [5.000000];
		move frame3 to x-axis [-15.000000] now;
		move frame3 to x-axis [-12.500000] speed [5.000000];
		move frame4 to x-axis [-15.000000] now;
		move frame4 to x-axis [-12.500000] speed [5.000000];
		move cover2 to x-axis [-7.500000] now;
		move cover2 to x-axis [-5.000000] speed [5.000000];
		move cover1 to x-axis [7.500000] now;
		move cover1 to x-axis [5.000000] speed [5.000000];
		turn cover2 to z-axis <-90.000000> now;
		turn cover2 to z-axis <-75.000000> speed <24.000000>;
		turn cover1 to z-axis <90.000000> now;
		turn cover1 to z-axis <75.000000> speed <24.000000>;
		sleep 607;

		move frame1 to x-axis [2.500000] speed [12.500000];
		move frame2 to x-axis [2.500000] speed [12.500000];
		move frame3 to x-axis [-2.500000] speed [12.500000];
		move frame4 to x-axis [-2.500000] speed [12.500000];
		move cover2 to x-axis [0.000000] speed [5.000000];
		move cover1 to x-axis [0.000000] speed [5.000000];
		turn cover2 to z-axis <0.000000> speed <122.000000>;
		turn cover1 to z-axis <0.000000> speed <122.000000>;
		sleep 614;

		move frame1 to x-axis [0.000000] speed [5.000000];
		move frame2 to x-axis [0.000000] speed [5.000000];
		move frame3 to x-axis [0.000000] speed [5.000000];
		move frame4 to x-axis [0.000000] speed [5.000000];
		sleep 610;

		set ARMORED to 1;
		move door1 to x-axis [0.000000] speed [10.000000];
		move door2 to x-axis [0.000000] speed [10.000000];
		sleep 612;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

go()
{
	call-script activatescr();
	Static_Var_1 = 1;
}

stop()
{
	Static_Var_1 = 0;
	sleep 4000;
	call-script deactivatescr();
	show dummy;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script stop();
			currentstate = 1;
		}
		else
		{
			call-script go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script RequestState(1);
}

Create()
{
	Static_Var_1 = 0;
	dont-shade door1;
	dont-shade door2;
	dont-shade dummy;
	dont-shade frame1;
	dont-shade frame2;
	dont-shade frame3;
	dont-shade frame4;
	dont-shade cover1;
	dont-shade cover2;
	dont-cache door1;
	dont-cache door2;
	dont-cache dummy;
	dont-cache frame1;
	dont-cache frame2;
	dont-cache frame3;
	dont-cache frame4;
	dont-cache cover1;
	dont-cache cover2;
	restore_delay = 3000;
	set ARMORED to 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
	start-script RestoreAfterDelay();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 4;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	hide dummy;
}

QueryPrimary(piecenum)
{
	piecenum = launch;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		explode frame1 type BITMAPONLY | BITMAP5;
		explode frame2 type BITMAPONLY | BITMAP1;
		explode frame3 type BITMAPONLY | BITMAP2;
		explode frame4 type BITMAPONLY | BITMAP3;
		explode cover1 type BITMAPONLY | BITMAP4;
		explode cover2 type BITMAPONLY | BITMAP5;
		explode launch type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		explode frame1 type BITMAPONLY | BITMAP5;
		explode frame2 type BITMAPONLY | BITMAP1;
		explode frame3 type BITMAPONLY | BITMAP2;
		explode frame4 type SHATTER | BITMAP3;
		explode cover1 type FALL | BITMAP4;
		explode cover2 type FALL | BITMAP5;
		explode launch type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		explode frame1 type BITMAPONLY | BITMAP5;
		explode frame2 type BITMAPONLY | BITMAP1;
		explode frame3 type BITMAPONLY | BITMAP2;
		explode frame4 type SHATTER | BITMAP3;
		explode cover1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode cover2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode door1 type BITMAPONLY | BITMAP2;
	explode door2 type BITMAPONLY | BITMAP3;
	explode dummy type BITMAPONLY | BITMAP4;
	explode frame1 type BITMAPONLY | BITMAP5;
	explode frame2 type BITMAPONLY | BITMAP1;
	explode frame3 type BITMAPONLY | BITMAP2;
	explode frame4 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode cover1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode cover2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode launch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
