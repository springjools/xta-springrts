#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beama, beamb, section1, section2, guna, gunb,
       dish;

static-var  spray, unitviewer, Static_Var_3, statechg_DesiredState, statechg_StateChanging,
            Static_Var_6;

// Signal definitions
#define SIG_ACTIVATE			2


Build()
{
	if( Static_Var_6 == 1 )
	{
		emit-sfx 1024 + 0 from beama;
		emit-sfx 1024 + 0 from beamb;
		sleep 60;
	}
	sleep 40;
	start-script Build();
}

activatescr()
{
	if( TRUE )
	{
		move section1 to x-axis [0.000000] now;
		move section1 to x-axis [6.000000] speed [13.000000];
		sleep 464;
	}
	if( TRUE )
	{
		sleep 266;
	}
	if( TRUE )
	{
		move section2 to x-axis [5.000000] speed [7.000000];
		move section2 to z-axis [2.000000] speed [3.000000];
		sleep 650;
	}
	if( TRUE )
	{
		sleep 274;
	}
	if( TRUE )
	{
		move guna to x-axis [7.000000] speed [11.000000];
		move gunb to x-axis [5.000000] speed [7.000000];
		move gunb to z-axis [2.000000] speed [3.000000];
		sleep 657;
	}
	if( TRUE )
	{
		sleep 134;
	}
	if( TRUE )
	{
		move guna to z-axis [3.000000] speed [5.000000];
		move gunb to x-axis [4.000000] speed [2.000000];
		move gunb to z-axis [4.000000] speed [4.000000];
		turn gunb to y-axis <10.000000> speed <20.000000>;
		sleep 481;
	}
	sleep 56;
}

deactivatescr()
{
	if( TRUE )
	{
		move section1 to x-axis [6.000000] now;
		move section2 to x-axis [5.000000] now;
		move section2 to z-axis [2.000000] now;
		move guna to x-axis [7.000000] now;
		move guna to z-axis [3.000000] now;
		move guna to z-axis [0.000000] speed [6.000000];
		move gunb to x-axis [4.000000] now;
		move gunb to x-axis [5.000000] speed [3.000000];
		move gunb to z-axis [4.000000] now;
		move gunb to z-axis [2.000000] speed [5.000000];
		turn gunb to y-axis <10.000000> now;
		turn gunb to y-axis <0.000000> speed <23.000000>;
		sleep 424;
	}
	if( TRUE )
	{
		sleep 428;
	}
	if( TRUE )
	{
		move guna to x-axis [0.000000] speed [13.000000];
		move gunb to x-axis [0.000000] speed [9.000000];
		move gunb to z-axis [0.000000] speed [4.000000];
		sleep 548;
	}
	if( TRUE )
	{
		sleep 152;
	}
	if( TRUE )
	{
		move section2 to x-axis [0.000000] speed [8.000000];
		move section2 to z-axis [0.000000] speed [4.000000];
		sleep 551;
	}
	if( TRUE )
	{
		sleep 149;
	}
	if( TRUE )
	{
		move section1 to x-axis [0.000000] speed [13.000000];
		sleep 455;
	}
	sleep 90;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

go()
{
	dont-cache beama;
	dont-cache beamb;
	dont-cache guna;
	dont-cache gunb;
	dont-cache pad;
	dont-cache section1;
	dont-cache section2;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beama;
	cache beamb;
	cache guna;
	cache gunb;
	cache pad;
	cache section1;
	cache section2;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-cache dish;
	dont-shade dish;
	dont-shade beama;
	dont-shade beamb;
	dont-shade guna;
	dont-shade gunb;
	dont-shade pad;
	dont-shade section1;
	dont-shade section2;
	unitviewer = FALSE;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
	start-script Build();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	Static_Var_3 = 1;
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beama;
	}
	if( spray != 0 )
	{
		piecenum = beamb;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	if( Static_Var_3 )
	{
		set ACTIVATION to 1;
		Static_Var_3 = 0;
	}
	spin dish around y-axis speed <150.000000>;
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	stop-spin dish around y-axis;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.000000>;
	Static_Var_6 = 1;
}

StopBuilding()
{
	stop-spin pad around y-axis;
	Static_Var_6 = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beama type BITMAPONLY | BITMAP2;
		explode beamb type BITMAPONLY | BITMAP3;
		explode dish type BITMAPONLY | BITMAP4;
		explode guna type BITMAPONLY | BITMAP5;
		explode gunb type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode section1 type BITMAPONLY | BITMAP3;
		explode section2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beama type FALL | BITMAP2;
		explode beamb type FALL | BITMAP3;
		explode dish type FALL | BITMAP4;
		explode guna type FALL | BITMAP5;
		explode gunb type FALL | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode section1 type BITMAPONLY | BITMAP3;
		explode section2 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beama type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beamb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode guna type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gunb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode section1 type BITMAPONLY | BITMAP3;
		explode section2 type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beama type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beamb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode guna type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gunb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode pad type BITMAPONLY | BITMAP2;
	explode section1 type BITMAPONLY | BITMAP3;
	explode section2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
