#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  emitter1, emitter2, base, wake1, wake2, wing1, wing2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


activatescr()
{
	turn wing1 to z-axis <0.000000> now;
	turn wing1 to z-axis <-113.000000> speed <220.000000>;
	turn wing2 to z-axis <0.000000> now;
	turn wing2 to z-axis <113.000000> speed <220.000000>;
	sleep 513;
}

deactivatescr()
{
	turn wing1 to z-axis <-113.000000> now;
	turn wing1 to z-axis <0.000000> speed <219.000000>;
	turn wing2 to z-axis <113.000000> now;
	turn wing2 to z-axis <0.000000> speed <219.000000>;
	sleep 514;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_5 )
	{
		Static_Var_4 = requestedstate;
		return (0);
	}
	Static_Var_5 = 1;
	currentstate = Static_Var_4;
	Static_Var_4 = requestedstate;
	while( Static_Var_4 != currentstate )
	{
		if( Static_Var_4 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			currentstate = 0;
		}
	}
	Static_Var_5 = 0;
}

moverate2()
{
	if( Rand( 1, 10 ) == 1 AND ( !Static_Var_2 ) )
	{
		Static_Var_2 = 1;
		turn base to z-axis <240.000000> speed <120.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.000000> speed <180.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.000000>;
		Static_Var_2 = 0;
	}
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_4 = 1;
	Static_Var_5 = 0;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		if( Static_Var_3 == 3 )
		{
			emit-sfx 259 from wake1;
			emit-sfx 259 from wake2;
			emit-sfx 259 from emitter1;
			emit-sfx 259 from emitter2;
			emit-sfx 259 from wing1;
			emit-sfx 259 from wing2;
			emit-sfx 259 from base;
		}
		sleep 150;
	}
}

StopMoving()
{
	signal 2;
}

FirePrimary()
{
	Static_Var_1 = !Static_Var_1;
}

QueryPrimary(piecenum)
{
	if( Static_Var_1 )
	{
		piecenum = emitter2;
	}
	else
	{
		piecenum = emitter1;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode emitter1 type BITMAPONLY | BITMAP3;
		explode emitter2 type BITMAPONLY | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP2;
		explode wake2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode emitter1 type FALL | BITMAP3;
		explode emitter2 type FALL | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		explode wake1 type FALL | BITMAP2;
		explode wake2 type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode emitter1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode emitter2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode wake2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode emitter1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode emitter2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode wing1 type BITMAPONLY | BITMAP5;
	explode wing2 type BITMAPONLY | BITMAP1;
	explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode wake2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
}

setsfxoccupy(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
}
