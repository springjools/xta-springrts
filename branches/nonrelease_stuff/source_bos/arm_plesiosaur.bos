#define TA			// This is a TA script
// set linear constant to 163840 before compiling


#include "sfxtype.h"
#include "exptype.h"

piece	base, base2, body, tur1, tur3, sleeve1, sleeve3, wake1, wake2,
		barrel1a, barrel1b, flare1a, flare1b, flare3a, flare3b, flare3c,
		wheel1, wheel2, wheel3, wheel4, wheel5, wheel6, wheel7, wheel8;

static-var  Static_Var_1, bMoving, Floating, restore_delay, MaxSpeed, oldHeading,
            gun_1, gun_3, CannonDirection, Static_Var_7, Static_Var_8,
            windDirection, windSteady;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_3			8
#define SIG_RECOIL			16
#define SIG_ROCK			32
#define SIG_WALK			64
#define ROCK_AMPLITUDE		<1.4>
#define ROCK_SPEED			<1.5>
#define ROCK_PIECE base
#define SHALLOWS			[-6.5]
#define SHALLOWS_POS		[6.5]

SetDirection(heading)
{
	windDirection = heading;
	windSteady = 0;	
}

RockOnWaves(x,z,xs,zs)
{
	signal SIG_ROCK;
	set-signal-mask SIG_ROCK;
	while(Floating){
		x= ROCK_AMPLITUDE * get KCOS(windDirection) / 1024;
		z= ROCK_AMPLITUDE * get KSIN(windDirection) / 1024;
		xs= get ABS(x) * ROCK_SPEED / <1.0>;
		zs= get ABS(z) * ROCK_SPEED / <1.0>;
		windSteady=1;
		while(windSteady)
		{
			if(windSteady)
			{
				turn ROCK_PIECE to z-axis z speed zs;
				turn ROCK_PIECE to x-axis x speed xs;
				wait-for-turn ROCK_PIECE around x-axis;
				wait-for-turn ROCK_PIECE around z-axis;
				turn ROCK_PIECE to z-axis 0 speed zs;
				turn ROCK_PIECE to x-axis 0 speed xs;
				wait-for-turn ROCK_PIECE around x-axis;
				wait-for-turn ROCK_PIECE around z-axis;
			}
			if(windSteady)
			{
				turn ROCK_PIECE to z-axis 0-z speed zs;
				turn ROCK_PIECE to x-axis 0-x speed xs;
				wait-for-turn ROCK_PIECE around x-axis;
				wait-for-turn ROCK_PIECE around z-axis;
				turn ROCK_PIECE to z-axis 0 speed zs;
				turn ROCK_PIECE to x-axis 0 speed xs;
				wait-for-turn ROCK_PIECE around x-axis;
				wait-for-turn ROCK_PIECE around z-axis;
			}
		}
	}
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal SIG_RECOIL;
	set-signal-mask SIG_RECOIL;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	Static_Var_7 = get ABS(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn body to z-axis Static_Var_8 speed Static_Var_7 * <0.016484>;
		wait-for-turn body around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		Static_Var_7 = get ABS(Static_Var_8);
	}
	turn body to z-axis <0.000000> speed <1.5>;
}

walk()
{
	signal SIG_WALK;
	set-signal-mask SIG_WALK;	
	var spin_speed, movespeed, headingDelta, spinL, spinR;
	while (1)
	{
		headingDelta = (get HEADING) - oldHeading;
		if (get ABS(headingDelta) > 16384) 
			headingDelta=0;
		else
			headingDelta = headingDelta*24;
		oldHeading = get HEADING;
		spin_speed = (get CURRENT_SPEED) * 100 / MaxSpeed * <1.800>;
		spinL = spin_speed - headingDelta;
		if(spinL > <190>) spinL = <190>;
		spinR = spin_speed + headingDelta;		
		if(spinR > <190>) spinR = <190>;
		spin wheel1 around x-axis speed spinL;
		spin wheel3 around x-axis speed spinL;
		spin wheel5 around x-axis speed spinL;
		spin wheel7 around x-axis speed spinL;
		spin wheel2 around x-axis speed spinR;
		spin wheel4 around x-axis speed spinR;
		spin wheel6 around x-axis speed spinR;
		spin wheel8 around x-axis speed spinR;
		sleep 66;
	}
}

endwalk()
{
	signal SIG_WALK;
	var decel;
	decel= (get CURRENT_SPEED) / 60;
	if(decel < <0.3>) decel = <0.3>;
	stop-spin wheel1 around x-axis decelerate decel;
	stop-spin wheel2 around x-axis decelerate decel;
	stop-spin wheel3 around x-axis decelerate decel;
	stop-spin wheel4 around x-axis decelerate decel;
	stop-spin wheel5 around x-axis decelerate decel;
	stop-spin wheel6 around x-axis decelerate decel;
	stop-spin wheel7 around x-axis decelerate decel;
	stop-spin wheel8 around x-axis decelerate decel;
}

//transform to ship
transform()
{
	call-script endwalk();
	turn wheel1 to x-axis <0.000000> now;
	turn wheel2 to x-axis <0.000000> now;
	turn wheel3 to x-axis <0.000000> now;
	turn wheel4 to x-axis <0.000000> now;
	turn wheel5 to x-axis <0.000000> now;
	turn wheel6 to x-axis <0.000000> now;
	turn wheel7 to x-axis <0.000000> now;
	turn wheel8 to x-axis <0.000000> now;
	
	turn wheel1 to z-axis <90.000000> speed <120.000000>;
	turn wheel2 to z-axis <-90.000000> speed <120.000000>;
	turn wheel3 to z-axis <90.000000> speed <120.000000>;
	turn wheel4 to z-axis <-90.000000> speed <120.000000>;
	turn wheel5 to z-axis <90.000000> speed <120.000000>;
	turn wheel6 to z-axis <-90.000000> speed <120.000000>;
	turn wheel7 to z-axis <90.000000> speed <120.000000>;
	turn wheel8 to z-axis <-90.000000> speed <120.000000>;
	wait-for-turn wheel1 around z-axis;

	turn wheel1 to z-axis <180.000000> speed <120.000000>;
	turn wheel2 to z-axis <-180.000000> speed <120.000000>;
	turn wheel3 to z-axis <180.000000> speed <120.000000>;
	turn wheel4 to z-axis <-180.000000> speed <120.000000>;
	turn wheel5 to z-axis <180.000000> speed <120.000000>;
	turn wheel6 to z-axis <-180.000000> speed <120.000000>;
	turn wheel7 to z-axis <180.000000> speed <120.000000>;
	turn wheel8 to z-axis <-180.000000> speed <120.000000>;
	wait-for-turn wheel1 around z-axis;

	start-script RockOnWaves();
	set MAX_SPEED to MaxSpeed;
	move wheel1 to y-axis [3.2] speed [3.2];
	move wheel1 to x-axis [0.6] speed [0.6];
	move wheel2 to y-axis [3.2] speed [3.2];
	move wheel2 to x-axis [-0.6] speed [0.6];
	move wheel3 to y-axis [3.2] speed [3.2];
	move wheel4 to y-axis [3.2] speed [3.2];
	move wheel5 to y-axis [3.2] speed [3.2];
	move wheel6 to y-axis [3.2] speed [3.2];
	move wheel7 to y-axis [3.2] speed [3.2];
	move wheel8 to y-axis [3.2] speed [3.2];
	wait-for-move wheel1 along y-axis;
}

//transform to tank
reform()
{
	set MAX_SPEED to MaxSpeed * 2 / 3;
	move wheel1 to y-axis [0.0] speed [3.2];
	move wheel1 to x-axis [0.0] speed [0.6];
	move wheel2 to y-axis [0.0] speed [3.2];
	move wheel2 to x-axis [0.0] speed [0.6];
	move wheel3 to y-axis [0.0] speed [3.2];
	move wheel4 to y-axis [0.0] speed [3.2];
	move wheel5 to y-axis [0.0] speed [3.2];
	move wheel6 to y-axis [0.0] speed [3.2];
	move wheel7 to y-axis [0.0] speed [3.2];
	move wheel8 to y-axis [0.0] speed [3.2];
	wait-for-move wheel1 along y-axis;

	turn wheel1 to z-axis <90.000000> speed <120.000000>;
	turn wheel2 to z-axis <-90.000000> speed <120.000000>;
	turn wheel3 to z-axis <90.000000> speed <120.000000>;
	turn wheel4 to z-axis <-90.000000> speed <120.000000>;
	turn wheel5 to z-axis <90.000000> speed <120.000000>;
	turn wheel6 to z-axis <-90.000000> speed <120.000000>;
	turn wheel7 to z-axis <90.000000> speed <120.000000>;
	turn wheel8 to z-axis <-90.000000> speed <120.000000>;
	wait-for-turn wheel1 around z-axis;

	turn wheel1 to z-axis <0.000000> speed <120.000000>;
	turn wheel2 to z-axis <0.000000> speed <120.000000>;
	turn wheel3 to z-axis <0.000000> speed <120.000000>;
	turn wheel4 to z-axis <0.000000> speed <120.000000>;
	turn wheel5 to z-axis <0.000000> speed <120.000000>;
	turn wheel6 to z-axis <0.000000> speed <120.000000>;
	turn wheel7 to z-axis <0.000000> speed <120.000000>;
	turn wheel8 to z-axis <0.000000> speed <120.000000>;
	wait-for-turn wheel1 around z-axis;
}

swim()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	while( Floating )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if (waketime < 50) waketime = 50;
		sleep 20000/waketime;
	}
}

MotionControl()
{
	var waterdepth;
	while( TRUE )
	{
		waterdepth = get GROUND_WATER_HEIGHT(get UNIT_XZ);
		if( waterdepth < SHALLOWS ) {
			if( !Floating )
			{
				set UPRIGHT to 1;
				//move body to y-axis [0.0] now;
				Floating = 1;
				call-script transform();
				if (bMoving) start-script swim();
			}
		}
		else
		{
			/*
			if( waterdepth < 0)
				move body to y-axis (SHALLOWS_POS+waterdepth) now;
			else
				move body to y-axis [0.0] now;	
			*/	
			if( Floating )
			{
				set UPRIGHT to 0;
				call-script reform();
				Floating = 0;
				signal SIG_ROCK;
				turn base to x-axis <0.0> now;
				turn base to z-axis <0.0> now;
				if (bMoving) start-script walk();
			}
		}
		sleep 65;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	MaxSpeed = get MAX_SPEED;
	//set MAX_SPEED to MaxSpeed;
	//move base2 to z-axis [-2.0] now;
	bMoving = FALSE;
	oldHeading = get HEADING;
	Floating = 0;
	gun_1 = 0;
	gun_3 = 0;
	hide flare1a;
	hide flare1b;
	hide flare3a;
	hide flare3b;
	hide flare3c;
	restore_delay = 3000;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
	if( Floating )
	{
		start-script swim();
	}
	else
	{
		start-script walk();
	}
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	if( !Floating )
	{
		call-script endwalk();
	}
}

/*
Reload()
{
	sleep 2250;
	Static_Var_1 = 1;
}
*/

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay1()
{
	sleep restore_delay;
	turn tur1 to y-axis <0.000000> speed <8.000000>;
	turn sleeve1 to x-axis <0.000000> speed <8.000000>;
}

RestoreAfterDelay3()
{
	sleep restore_delay;
	turn tur3 to y-axis <0.000000> speed <150.000000>;
	turn sleeve3 to x-axis <0.000000> speed <150.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn tur1 to y-axis heading speed <50.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn tur1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	CannonDirection = heading;
	start-script RestoreAfterDelay1();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn tur3 to y-axis heading speed <150.000000>;
	turn sleeve3 to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn tur3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FirePrimary()
{
	if( Floating ) 
		start-script RockZ(-5,CannonDirection);
	else
		start-script RockZ(-25,CannonDirection);
	if( gun_1 )
	{
		emit-sfx UNIT_SFX1 from flare1b;
		move barrel1b to z-axis [-2.000000] speed [500.000000];
		sleep 150;
		move barrel1b to z-axis [0.000000] speed [0.500000];
	}
	else
	{
		emit-sfx UNIT_SFX1 from flare1a;
		move barrel1a to z-axis [-2.000000] speed [500.000000];
		sleep 150;
		move barrel1a to z-axis [0.000000] speed [0.500000];
	}
	gun_1 = !gun_1;
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		show flare3a;
		sleep 150;
		hide flare3a;
	}
	else if( gun_3 == 1 )
	{
		show flare3b;
		sleep 150;
		hide flare3b;
	}
	else if( gun_3 == 2 )
	{
		show flare3c;
		sleep 150;
		hide flare3c;
		//Static_Var_1 = 0;
		//call-script Reload();
	}
	++gun_3;
	if (gun_3 > 2) gun_3 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = tur1;
}

AimFromTertiary(piecenum)
{
	piecenum = tur3;
}

QueryPrimary(piecenum)
{
	piecenum = flare1a + gun_1;

}

QueryTertiary(piecenum)
{
	piecenum = flare3a + gun_3;
}

SweetSpot(piecenum)
{
	piecenum = tur1;
}

Killed(severity, corpsetype)
{
	explode barrel1a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP5;
	explode tur1 type BITMAPONLY | BITMAP4;
	explode tur3 type BITMAPONLY | BITMAP3;
	explode wake1 type BITMAPONLY | BITMAP3;
	explode wake2 type BITMAPONLY | BITMAP3;
	explode flare1a type BITMAPONLY | BITMAP3;
	explode flare3b type BITMAPONLY | BITMAP3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	explode tur1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode tur3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1a type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
