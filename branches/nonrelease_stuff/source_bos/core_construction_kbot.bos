#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD		4	

piece  torso, nanospray2, pelvis, lthigh, rthigh, rleg, lleg, gunclamp,
       rfoot, lfoot, guncover, nanogun, nozzle, ground;

static-var  Static_Var_1, bMoving, Static_Var_3, statechg_DesiredState,
            statechg_StateChanging, moveSpeed, currentSpeed, notBuilding;


Build()
{
	set-signal-mask SIG_BUILD;
	while( TRUE )
	{
		emit-sfx UNIT_SFX1 from nanospray2;
		sleep 100;
	}
}

walk()
{
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] now;
		move lthigh to y-axis [0.000000] now;
		move rthigh to y-axis [0.000000] now;
		move rleg to y-axis [0.000000] now;
		move lleg to y-axis [0.000000] now;
		move gunclamp to y-axis [0.000000] now;
		turn lthigh to x-axis <-44.302198> now;
		turn rthigh to x-axis <12.302198> now;
		turn rleg to x-axis <17.582418> now;
		turn rfoot to x-axis <-24.967033> now;
		turn lleg to x-axis <36.214286> now;
		turn lfoot to x-axis <2.456044> now;
		sleep 3200/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.625000] now;
		turn lthigh to x-axis <-46.769231> now;
		turn rthigh to x-axis <20.390110> now;
		turn rfoot to x-axis <-31.291209> now;
		turn lleg to x-axis <20.390110> now;
		turn lfoot to x-axis <14.412088> now;
		sleep 3200/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.000000] now;
		turn lthigh to x-axis <-46.758242> now;
		turn rthigh to x-axis <30.582418> now;
		turn rleg to x-axis <22.148352> now;
		turn rfoot to x-axis <-34.456044> now;
		turn lleg to x-axis <3.516484> now;
		turn lfoot to x-axis <9.489011> now;
		sleep 3200/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.250000] now;
		turn lthigh to x-axis <-44.302198> now;
		turn rthigh to x-axis <43.247253> now;
		turn rleg to x-axis <20.038462> now;
		turn rfoot to x-axis <-42.538462> now;
		turn lleg to x-axis <44.302198> now;
		turn lfoot to x-axis <0.000000> now;
		sleep 5500/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.000000] now;
		turn lthigh to x-axis <-36.571429> now;
		turn rthigh to x-axis <24.956044> now;
		turn rleg to x-axis <49.225275> now;
		turn rfoot to x-axis <-54.148352> now;
		turn lleg to x-axis <44.302198> now;
		turn lfoot to x-axis <-8.780220> now;
		sleep 3600/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.625000] now;
		turn lthigh to x-axis <-27.071429> now;
		turn rthigh to x-axis <9.137363> now;
		turn rleg to x-axis <60.478022> now;
		turn rfoot to x-axis <-56.258242> now;
		turn lleg to x-axis <44.302198> now;
		turn lfoot to x-axis <-17.934066> now;
		sleep 3200/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.249985] now;
		turn lthigh to x-axis <-16.527473> now;
		turn rthigh to x-axis <0.000000> now;
		turn rleg to x-axis <60.126374> now;
		turn rfoot to x-axis <-47.467033> now;
		turn lleg to x-axis <33.049451> now;
		turn lfoot to x-axis <-16.527473> now;
		sleep 3200/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		turn lthigh to x-axis <-4.923077> now;
		turn rthigh to x-axis <-19.692308> now;
		turn rleg to x-axis <60.824176> now;
		turn rfoot to x-axis <-36.571429> now;
		turn lleg to x-axis <22.505495> now;
		turn lfoot to x-axis <-17.582418> now;
		sleep 3200/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] now;
		turn lthigh to x-axis <4.923077> now;
		turn rthigh to x-axis <-46.412088> now;
		turn rfoot to x-axis <-19.692308> now;
		turn lleg to x-axis <23.203297> now;
		turn lfoot to x-axis <-25.313187> now;
		sleep 3200/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.625000] now;
		turn lthigh to x-axis <16.170330> now;
		turn rthigh to x-axis <-46.060440> now;
		turn rleg to x-axis <18.626374> now;
		turn rfoot to x-axis <13.005495> now;
		turn lleg to x-axis <22.505495> now;
		turn lfoot to x-axis <-34.456044> now;
		sleep 3200/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.000000] now;
		turn lthigh to x-axis <20.390110> now;
		turn rthigh to x-axis <-46.412088> now;
		turn rleg to x-axis <-8.434066> now;
		turn rfoot to x-axis <26.368132> now;
		turn lfoot to x-axis <-35.159341> now;
		sleep 3200/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.250000] now;
		turn lthigh to x-axis <23.203297> now;
		turn rthigh to x-axis <-45.005495> now;
		turn rleg to x-axis <46.060440> now;
		turn rfoot to x-axis <-1.401099> now;
		turn lleg to x-axis <37.626374> now;
		turn lfoot to x-axis <-43.604396> now;
		sleep 5500/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.000000] now;
		turn lthigh to x-axis <15.467033> now;
		turn rthigh to x-axis <-39.736264> now;
		turn rfoot to x-axis <-6.324176> now;
		turn lleg to x-axis <63.291209> now;
		turn lfoot to x-axis <-52.747253> now;
		sleep 3600/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.625000] now;
		turn lthigh to x-axis <6.681319> now;
		turn rthigh to x-axis <-30.593407> now;
		turn rfoot to x-axis <-15.467033> now;
		turn lleg to x-axis <66.456044> now;
		turn lfoot to x-axis <-51.335165> now;
		sleep 3200/currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] now;
		turn lthigh to x-axis <-2.456044> now;
		turn rthigh to x-axis <-20.038462> now;
		turn rleg to x-axis <41.835165> now;
		turn rfoot to x-axis <-21.802198> now;
		turn lleg to x-axis <66.813187> now;
		turn lfoot to x-axis <-55.912088> now;
		sleep 3200/currentSpeed;
	}
	move pelvis to y-axis [0.000000] now;
	turn lthigh to x-axis <-18.637363> now;
	turn rthigh to x-axis <2.813187> now;
	turn rleg to x-axis <17.582418> now;
	turn rfoot to x-axis <-20.747253> now;
	turn lleg to x-axis <54.148352> now;
	turn lfoot to x-axis <-36.571429> now;
	sleep 3200/currentSpeed;
}

open()
{
	move lthigh to y-axis [0.000000] now;
	move rthigh to y-axis [0.000000] now;
	move rleg to y-axis [0.000000] now;
	move lleg to y-axis [0.000000] now;
	move gunclamp to y-axis [0.000000] now;
	move guncover to x-axis [0.000000] now;
	move guncover to x-axis [-2.374985] speed [17.500000];
	sleep 140;

	turn nanogun to z-axis <-90.016484> speed <630.000000>;
	sleep 140;

	turn gunclamp to y-axis <90.016484> speed <630.000000>;
	sleep 140;

	turn gunclamp to x-axis <0.000000> speed <0.000000>;
	turn nanogun to z-axis <-180.038462> speed <630.000000>;
	sleep 140;

	move nozzle to x-axis [-9.625000] speed [45.000000];
	turn gunclamp to x-axis <0.000000> speed <0.000000>;
	turn nanogun to z-axis <-180.038462> speed <0.000000>;
	sleep 291;

	set INBUILDSTANCE to 1;
}

close()
{
	set INBUILDSTANCE to 0;

	move lthigh to y-axis [0.000000] now;
	move rthigh to y-axis [0.000000] now;
	move rleg to y-axis [0.000000] now;
	move lleg to y-axis [0.000000] now;
	move gunclamp to y-axis [0.000000] now;
	move guncover to x-axis [-2.374985] now;
	move nozzle to x-axis [-9.625000] now;
	move nozzle to x-axis [0.000000] speed [42.500000];
	turn gunclamp to x-axis <0.000000> now;
	turn gunclamp to x-axis <0.000000> speed <0.000000>;
	turn gunclamp to y-axis <90.016484> now;
	turn nanogun to z-axis <-180.038462> now;
	turn torso to y-axis <0.000000> speed <480.000000>;
	sleep 156;

	turn gunclamp to x-axis <0.000000> speed <0.000000>;
	turn nanogun to z-axis <-90.016484> speed <570.000000>;
	sleep 160;

	turn gunclamp to y-axis <0.000000> speed <575.000000>;
	sleep 155;

	turn nanogun to z-axis <0.000000> speed <570.000000>;
	sleep 156;

	move guncover to x-axis [0.000000] speed [15.000000];
	sleep 626;
}

MotionControl(Func_Var_1, Func_Var_2)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		Func_Var_2 = notBuilding;
		if( Func_Var_1 )
		{
			if( Func_Var_2 )
			{
				call-script walk();
			}
			else
			{
				call-script walk();
			}
		}
		else
		{
			sleep 200;
		}
	}
}

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*100/moveSpeed;
		if (currentSpeed<20) currentSpeed=20;
		sleep 142;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script UnitSpeed();
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*
Go()
{
	Static_Var_3 = 1;
	call-script open();
	turn torso to y-axis Static_Var_1 speed <160.038462>;
	wait-for-turn torso around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn torso to y-axis <0.000000> speed <160.038462>;
	wait-for-turn torso around y-axis;
	call-script close();
	Static_Var_3 = 0;
	return (0);
}
*/


RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script close(); //Stop();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script open(); //Go();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	bMoving = FALSE;
	notBuilding=1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	moveSpeed = get MAX_SPEED;
	currentSpeed = 100;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn torso to y-axis heading speed <480.000000>;
	wait-for-turn torso around y-axis;
	start-script Build();
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

QueryNanoPiece(piecenum)
{
	piecenum = nanospray2;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type BITMAPONLY | BITMAP1;
		explode gunclamp type BITMAPONLY | BITMAP2;
		explode guncover type BITMAPONLY | BITMAP3;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode lleg type BITMAPONLY | BITMAP5;
		explode lthigh type BITMAPONLY | BITMAP1;
		explode nanogun type BITMAPONLY | BITMAP2;
		explode nanospray2 type BITMAPONLY | BITMAP3;
		explode nozzle type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode rleg type BITMAPONLY | BITMAP2;
		explode rthigh type BITMAPONLY | BITMAP3;
		explode torso type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type FALL | BITMAP1;
		explode gunclamp type FALL | BITMAP2;
		explode guncover type FALL | BITMAP3;
		explode lfoot type FALL | BITMAP4;
		explode lleg type FALL | BITMAP5;
		explode lthigh type FALL | BITMAP1;
		explode nanogun type FALL | BITMAP2;
		explode nanospray2 type FALL | BITMAP3;
		explode nozzle type FALL | BITMAP4;
		explode pelvis type SHATTER | BITMAP5;
		explode rfoot type FALL | BITMAP1;
		explode rleg type FALL | BITMAP2;
		explode rthigh type FALL | BITMAP3;
		explode torso type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gunclamp type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode guncover type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode nanogun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nanospray2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode nozzle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode pelvis type SHATTER | BITMAP5;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode torso type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gunclamp type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode guncover type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode nanogun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode nanospray2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode nozzle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode pelvis type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode torso type BITMAPONLY | BITMAP4;
	return (0);
}
