#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, arm1, arm2, arm3, link, door1, door2, wake1, wake2, magnet,
	   arm4, arm5, arm6, arm7, ignite1, ignite2, ignite3, ignite4, ignite5, ground;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;

// Signal definitions
#define SIG_MOVE			2

SetDirection(heading)
{
	var spd;
	spd = get ABS(heading);
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
}

MorphPassenger(oldPassenger,newPassenger)
{
	drop-unit oldPassenger;
	attach-unit newPassenger to 0 - 1;
}

RockOnWaves()
{
	while(1)
	{
		turn ground to x-axis <1.0> speed <1.0>;
		move ground to y-axis [0.2] speed [0.2];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <-1.0> speed <1.0>;
		move ground to y-axis [0.0] speed [0.2];
		wait-for-move ground along y-axis;
		move ground to y-axis [0.2] speed [0.2];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <1.0> speed <1.0>;
		move ground to y-axis [0.0] speed [0.2];
		wait-for-move ground along y-axis;
	}
}

FlameControl(_health)
{
	while( TRUE )
	{
		_health = get HEALTH;
		if( _health <= 80 )
		{
			emit-sfx UNIT_SFX1 from ignite1;
			if( _health <= 60 ){
				emit-sfx UNIT_SFX1 from ignite2;
				if( _health <= 45 ){
					emit-sfx UNIT_SFX1 from ignite3;
					if( _health <= 25 ){
						emit-sfx UNIT_SFX1 from ignite4;
						if( _health <= 10 )	emit-sfx UNIT_SFX1 from ignite5;
					}
				}
			}
			sleep 66;
		}
		else
		{
			sleep 333;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script FlameControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide ignite1;
	hide ignite2;
	hide ignite3;
	hide ignite4;
	hide ignite5;
	start-script SmokeUnit();
	start-script RockOnWaves();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if (waketime < 50) waketime = 50;
		sleep 15000/waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartDoorOpen()
{
	signal 4;
	set-signal-mask 4;
	turn door1 to z-axis <-90.000000> speed <50.000000>;
	turn door2 to z-axis <90.000000> speed <50.000000>;
	sleep 5000;
	turn door1 to z-axis <0.000000> speed <20.000000>;
	turn door2 to z-axis <0.000000> speed <20.000000>;
}

BoomCalc(posxz, posy)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(turret) - posxz;
	Func_Var_4 = posy - get PIECE_Y(turret) - 3276800;
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	Static_Var_1 = get HYPOT(Func_Var_5,Func_Var_4) - 3276800;
	Static_Var_2 = get XZ_ATAN(Func_Var_3);
	Static_Var_3 = get ATAN(Func_Var_4,Func_Var_5);
	Static_Var_4 = Static_Var_1 < 20643840;
}

BoomExtend()
{
	start-script StartDoorOpen();
	turn turret to y-axis Static_Var_2 speed <180.000000>;
	turn magnet to x-axis Static_Var_3 speed <80.000000>;
	turn arm1 to x-axis <0.000000> - Static_Var_3 speed <80.000000>;
	wait-for-turn arm1 around x-axis;
	wait-for-turn turret around y-axis;
	move arm2 to z-axis Static_Var_1 / [0.000092] speed [125.000000];
	move arm3 to z-axis Static_Var_1 / [0.000092] speed [125.000000];
	move arm4 to z-axis Static_Var_1 / [0.000092] speed [125.000000];
	move arm5 to z-axis Static_Var_1 / [0.000092] speed [125.000000];
	move arm6 to z-axis Static_Var_1 / [0.000092] speed [125.000000];
	move arm7 to z-axis Static_Var_1 / [0.000092] speed [125.000000];
	wait-for-move arm2 along z-axis;
	wait-for-move arm3 along z-axis;
	wait-for-move arm4 along z-axis;
	wait-for-move arm5 along z-axis;
	wait-for-move arm6 along z-axis;
	wait-for-move arm7 along z-axis;
}

BoomReset()
{
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn magnet to x-axis <0.000000> speed <60.000000>;
	turn arm1 to x-axis <0.000000> speed <60.000000>;
	move arm2 to z-axis [0.000000] speed [125.000000];
	move arm3 to z-axis [0.000000] speed [125.000000];
	move arm4 to z-axis [0.000000] speed [125.000000];
	move arm5 to z-axis [0.000000] speed [125.000000];
	move arm6 to z-axis [0.000000] speed [125.000000];
	move arm7 to z-axis [0.000000] speed [125.000000];
}

BoomToPad()
{
	start-script StartDoorOpen();
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn magnet to x-axis <0.000000> speed <60.000000>;
	turn arm1 to x-axis <0.000000> speed <60.000000>;
	move arm2 to z-axis [0.000000] speed [150.000000];
	move arm3 to z-axis [0.000000] speed [150.000000];
	move arm4 to z-axis [0.000000] speed [150.000000];
	move arm5 to z-axis [0.000000] speed [150.000000];
	move arm6 to z-axis [0.000000] speed [150.000000];
	move arm7 to z-axis [0.000000] speed [150.000000];
	wait-for-turn turret around y-axis;
	wait-for-turn arm1 around x-axis;
	wait-for-move arm2 along z-axis;
	wait-for-move arm3 along z-axis;
	wait-for-move arm4 along z-axis;
	wait-for-move arm5 along z-axis;
	wait-for-move arm6 along z-axis;
	wait-for-move arm7 along z-axis;
	turn magnet to x-axis <-30.000000> speed <60.000000>;
	turn arm1 to x-axis <30.000000> speed <60.000000>;
	wait-for-turn arm1 around x-axis;
}

TransportPickup(unitid)
{
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + get UNIT_HEIGHT(unitid));
	if( Static_Var_4 )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomToPad();
		attach-unit unitid to 0 - 1;
		call-script BoomReset();
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	call-script BoomCalc(position,get GROUND_HEIGHT(position) + get UNIT_HEIGHT(unitid));
	if( Static_Var_4 )
	{
		set BUSY to 1;
		call-script BoomToPad();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomExtend();
		drop-unit unitid;
		call-script BoomReset();
		set BUSY to 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP2;
		explode arm3 type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode link type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type SHATTER | BITMAP2;
		explode arm3 type SHATTER | BITMAP4;
		explode base type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode link type FALL | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | BITMAP3;
		explode wake2 type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type SHATTER | BITMAP2;
		explode arm3 type SHATTER | BITMAP4;
		explode base type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode link type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode arm1 type BITMAPONLY | BITMAP1;
	explode arm2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode arm3 type SHATTER | BITMAP4;
	explode base type BITMAPONLY | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode link type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
