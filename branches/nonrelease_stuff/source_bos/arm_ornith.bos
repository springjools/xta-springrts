#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, arm1, arm2, arm3, jet1, jet2, jet3,
       jet4, flare1, flare2, gun, arm4;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;

lua_UnitStoppedMoving()
{ 
 	return 0; 
}
 
lua_UnitStartedMoving() 
{ 
	return 0; 
}

ProcessFlames()
{
	while( TRUE )
	{
		if( Static_Var_1 == 1 OR Static_Var_1 == 2 )
		{
			emit-sfx 1024 + 0 from jet1;
			emit-sfx 1024 + 0 from jet2;
			emit-sfx 1024 + 0 from jet3;
			emit-sfx 1024 + 0 from jet4;
		}
		sleep 10;
	}
}

activatescr()
{
	if( TRUE )
	{
		move arm1 to x-axis [3.000000] speed [15.000000];
		move arm2 to x-axis [-3.000000] speed [15.000000];
		move arm3 to x-axis [2.000000] speed [10.000000];
		move arm4 to x-axis [-2.000000] speed [10.000000];
		sleep 998;
	}
	sleep 44;
}

deactivatescr()
{
	if( TRUE )
	{
		move arm1 to x-axis [0.000000] speed [3.000000];
		move arm2 to x-axis [0.000000] speed [3.000000];
		move arm3 to x-axis [0.000000] speed [2.000000];
		move arm4 to x-axis [0.000000] speed [2.000000];
		sleep 998;
	}
	sleep 44;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RestoreAfterDelay()
{
	sleep 3000;
	turn gun to y-axis <0.000000> speed <90.000000>;
	turn gun to x-axis <0.000000> speed <50.000000>;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_5 = 0;
	call-script InitState();
	start-script SmokeUnit();
	hide flare1;
	hide flare2;
}

QueryPrimary(piecenum)
{
	if( Static_Var_5 == 0 )
	{
		piecenum = flare1;
	}
	if( Static_Var_5 == 1 )
	{
		piecenum = flare2;
	}
}

FirePrimary()
{
	Static_Var_5 = !Static_Var_5;
	if( Static_Var_5 == 0 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		return (0);
		Static_Var_5 = 0;
	}
	if( Static_Var_5 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		return (0);
		Static_Var_5 = 1;
	}
}

AimPrimary(heading, pitch)
{
	turn gun to y-axis heading speed <390.098901>;
	wait-for-turn gun around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

Demo()
{
	Static_Var_2 = 1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = 1;
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
}

EndTransport()
{
	start-script RequestState(1);
}

StopMoving()
{
	signal 2;
	Static_Var_1 = 0;
	call-script lua_UnitStoppedMoving();
}

MoveRate1()
{
	signal 2;
	set-signal-mask 2;
	start-script ProcessFlames();
	Static_Var_1 = 1;
	call-script lua_UnitStartedMoving();
}

MoveRate2()
{
	signal 2;
	set-signal-mask 2;
	start-script ProcessFlames();
	Static_Var_1 = 2;
}

MoveRate3()
{
	signal 2;
	set-signal-mask 2;
	start-script ProcessFlames();
	Static_Var_1 = 3;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP2;
		explode arm3 type BITMAPONLY | BITMAP3;
		explode base type BITMAPONLY | BITMAP4;
		explode jet1 type BITMAPONLY | BITMAP5;
		explode jet2 type BITMAPONLY | BITMAP1;
		explode jet3 type BITMAPONLY | BITMAP2;
		explode link type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP2;
		explode arm3 type SHATTER | BITMAP3;
		explode base type BITMAPONLY | BITMAP4;
		explode jet1 type FALL | BITMAP5;
		explode jet2 type FALL | BITMAP1;
		explode jet3 type FALL | BITMAP2;
		explode link type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP2;
		explode arm3 type SHATTER | BITMAP3;
		explode base type BITMAPONLY | BITMAP4;
		explode jet1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode jet2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode jet3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode link type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode arm1 type BITMAPONLY | BITMAP1;
	explode arm2 type BITMAPONLY | BITMAP2;
	explode arm3 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode base type BITMAPONLY | BITMAP4;
	explode jet1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode jet2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode jet3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode link type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
