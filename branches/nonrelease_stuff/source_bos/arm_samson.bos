#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, launcher, turret, exhaust;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2
#define SIG_RESTORE			8

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide exhaust;
	gun_1 = flare1;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 5000;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn launcher to x-axis <0.000000> speed <50.000000>;
}

AimFromPrimary(piecenum)
{
	piecenum = launcher;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimPrimary(heading, pitch)
{
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = launcher;
}

QueryTertiary(piecenum)
{
	piecenum = gun_1;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <250.093407>;
	turn launcher to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( gun_1 )
	{
		emit-sfx UNIT_SFX1 from exhaust;
		show flare2;
		sleep 150;
		hide flare2;
	}
	else
	{
		emit-sfx UNIT_SFX1 from exhaust;
		show flare1;
		sleep 150;
		hide flare1;
	}
	gun_1 = !gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
