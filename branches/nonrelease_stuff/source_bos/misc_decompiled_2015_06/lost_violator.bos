#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, sleeve, barrel1, barrel2, flare1, flare2,
       flare3, wake1, wake2, wake3;

static-var  gun_1, restore_delay;

// Signal definitions
#define SIG_MOVE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	gun_1 = body;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <35.000000>;
	turn sleeve to x-axis <0.000000> speed <15.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 200;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	turn turret to y-axis heading speed <145.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <95.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		move barrel1 to z-axis [-3.750000] speed [1250.000000];
		show flare1;
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [7.500000];
		sleep 150;
		hide flare1;
		gun_1 = turret;
		return (0);
	}
	move barrel2 to z-axis [-3.750000] speed [1250.000000];
	show flare2;
	wait-for-move barrel2 along z-axis;
	move barrel2 to z-axis [0.000000] speed [7.500000];
	sleep 150;
	hide flare2;
	gun_1 = body;
}

FireSecondary()
{
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare2;
	if( gun_1 == 1 )
	{
		piecenum = flare1;
	}
}

QuerySecondary(piecenum)
{
	piecenum = flare3;
}

AimTertiary(heading, pitch)
{
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

QueryTertiary(piecenum)
{
	piecenum = flare2;
	if( gun_1 == 1 )
	{
		piecenum = flare1;
	}
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	explode base type BITMAPONLY | BITMAP3;
	explode body type BITMAPONLY | BITMAP4;
	if( severity < 25 )
	{
		corpsetype = 1;
		return (0);
	}
	explode barrel1 type FALL | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1 type FALL | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | EXPLODE_ON_HIT | BITMAP2;
	explode turret type SHATTER | BITMAP1;
	if( severity < 50 )
	{
		corpsetype = 2;
		return (0);
	}
	explode sleeve type FALL | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode flare1 type BITMAPONLY | BITMAP4;
	explode sleeve type BITMAPONLY | BITMAP5;
	corpsetype = 3;
}
