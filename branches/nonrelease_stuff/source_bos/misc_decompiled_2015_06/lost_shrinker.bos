#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret1, sleeve1, turret2, sleeve2, barrela, barrelb,
       flare1, flare2, wake1, wake2, wake3;

static-var  Static_Var_1, restore_delay;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret1;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <35.000000>;
	turn sleeve1 to x-axis <0.000000> speed <15.000000>;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn turret2 to y-axis <0.000000> speed <35.000000>;
	turn sleeve2 to x-axis <0.000000> speed <15.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 200;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	turn turret1 to y-axis heading speed <145.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <95.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <145.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <95.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FirePrimary()
{
	show flare1;
	sleep 150;
	hide flare1;
}

FireSecondary()
{
	move barrelb to z-axis [-3.000000] speed [1250.000000];
	move barrela to z-axis [-1.250000] speed [500.000000];
	show flare2;
	sleep 150;
	move barrela to z-axis [0.000000] speed [7.500000];
	move barrelb to z-axis [0.000000] speed [7.500000];
	hide flare2;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

AimTertiary(heading, pitch)
{
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = turret2;
}

QueryTertiary(piecenum)
{
	piecenum = flare2;
}


SweetSpot(piecenum)
{
	piecenum = turret1;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	explode base type BITMAPONLY | BITMAP3;
	explode body type BITMAPONLY | BITMAP4;
	if( severity < 25 )
	{
		corpsetype = 1;
		return (0);
	}
	explode barrela type FALL | EXPLODE_ON_HIT | BITMAP1;
	explode barrelb type FALL | EXPLODE_ON_HIT | BITMAP1;
	explode turret1 type FALL | EXPLODE_ON_HIT | BITMAP2;
	explode turret2 type SHATTER | BITMAP1;
	if( severity < 50 )
	{
		corpsetype = 2;
		return (0);
	}
	explode sleeve1 type FALL | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode flare1 type BITMAPONLY | BITMAP4;
	explode sleeve1 type BITMAPONLY | BITMAP5;
	corpsetype = 3;
}
