#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, head, legs, leg1, leg2, leg3, leg4,
       leg5, leg6, leg7, leg8, lowqueue, upqueue, gun, larm,
       rarm, rpince, lpince, rcache, lcache, flare1, flare2, flare3;

static-var  Static_Var_1, restore_delay, _currentgun;


walk()
{
	while( Static_Var_1 )
	{
		if( Static_Var_1 )
		{
			turn leg1 to y-axis <0.000000> speed <60.000000>;
			turn leg1 to z-axis <0.000000> speed <60.000000>;
			turn leg2 to z-axis <30.000000> speed <60.000000>;
			turn leg7 to z-axis <30.000000> speed <60.000000>;
			turn leg3 to y-axis <33.000000> speed <60.000000>;
			turn leg3 to z-axis <0.000000> speed <60.000000>;
			turn leg4 to y-axis <-39.000000> speed <60.000000>;
			turn leg4 to z-axis <0.000000> speed <60.000000>;
			turn leg5 to y-axis <0.000000> speed <60.000000>;
			turn leg5 to z-axis <0.000000> speed <60.000000>;
			turn leg8 to y-axis <0.000000> speed <60.000000>;
			turn leg8 to z-axis <0.000000> speed <60.000000>;
			turn leg6 to y-axis <-29.000000> speed <60.000000>;
			turn leg6 to z-axis <-45.000000> speed <60.000000>;
			turn body to x-axis <5.000000> speed <10.000000>;
			move body to y-axis [1.250000] speed [2.500000];
			sleep 160;
		}
		if( Static_Var_1 )
		{
			turn leg2 to y-axis <33.000000> speed <60.000000>;
			turn leg2 to z-axis <30.000000> speed <60.000000>;
			turn leg7 to y-axis <33.000000> speed <60.000000>;
			turn leg7 to z-axis <30.000000> speed <60.000000>;
			turn leg4 to y-axis <0.000000> speed <60.000000>;
			turn leg5 to z-axis <-30.000000> speed <60.000000>;
			turn leg8 to z-axis <-30.000000> speed <60.000000>;
			turn leg6 to z-axis <2.000000> speed <60.000000>;
			turn leg1 to z-axis <30.000000> speed <60.000000>;
			turn leg3 to y-axis <0.000000> speed <60.000000>;
			turn leg3 to z-axis <0.000000> speed <60.000000>;
			move body to y-axis [0.000000] speed [2.500000];
			turn body to x-axis <-1.000000> speed <5.000000>;
			sleep 160;
		}
		if( Static_Var_1 )
		{
			turn leg5 to y-axis <-30.000000> speed <60.000000>;
			turn leg5 to z-axis <-30.000000> speed <60.000000>;
			turn leg8 to y-axis <-30.000000> speed <60.000000>;
			turn leg8 to z-axis <-30.000000> speed <60.000000>;
			turn leg6 to y-axis <3.000000> speed <60.000000>;
			turn leg2 to y-axis <33.000000> speed <60.000000>;
			turn leg2 to z-axis <0.000000> speed <60.000000>;
			turn leg7 to y-axis <33.000000> speed <60.000000>;
			turn leg7 to z-axis <0.000000> speed <60.000000>;
			turn leg3 to z-axis <30.000000> speed <60.000000>;
			turn leg1 to y-axis <54.000000> speed <60.000000>;
			turn leg1 to z-axis <30.000000> speed <60.000000>;
			turn leg4 to y-axis <0.000000> speed <60.000000>;
			turn leg4 to z-axis <-30.000000> speed <60.000000>;
			turn body to x-axis <5.000000> speed <10.000000>;
			move body to y-axis [1.250000] speed [2.500000];
			sleep 160;
		}
		turn leg5 to y-axis <-36.000000> speed <60.000000>;
		turn leg5 to z-axis <0.000000> speed <60.000000>;
		turn leg8 to y-axis <-36.000000> speed <60.000000>;
		turn leg8 to z-axis <0.000000> speed <60.000000>;
		turn leg6 to y-axis <0.000000> speed <60.000000>;
		turn leg6 to z-axis <-45.000000> speed <60.000000>;
		turn leg2 to y-axis <0.000000> speed <60.000000>;
		turn leg2 to z-axis <0.000000> speed <60.000000>;
		turn leg7 to y-axis <0.000000> speed <60.000000>;
		turn leg7 to z-axis <0.000000> speed <60.000000>;
		turn leg3 to y-axis <33.000000> speed <60.000000>;
		turn leg1 to y-axis <42.000000> speed <60.000000>;
		turn leg1 to z-axis <0.000000> speed <60.000000>;
		turn leg3 to z-axis <30.000000> speed <60.000000>;
		turn leg4 to y-axis <-39.000000> speed <60.000000>;
		turn leg4 to z-axis <-30.000000> speed <60.000000>;
		turn body to x-axis <-1.000000> speed <5.000000>;
		move body to y-axis [0.000000] speed [2.500000];
		sleep 160;
	}
}

stand()
{
	turn leg1 to y-axis <0.000000> speed <74.000000>;
	turn leg1 to z-axis <0.000000> speed <74.000000>;
	turn leg2 to y-axis <0.000000> speed <74.000000>;
	turn leg2 to z-axis <0.000000> speed <74.000000>;
	turn leg3 to y-axis <0.000000> speed <74.000000>;
	turn leg3 to z-axis <0.000000> speed <74.000000>;
	turn leg4 to y-axis <0.000000> speed <74.000000>;
	turn leg4 to z-axis <0.000000> speed <74.000000>;
	turn leg5 to y-axis <0.000000> speed <74.000000>;
	turn leg5 to z-axis <0.000000> speed <74.000000>;
	turn leg6 to y-axis <0.000000> speed <74.000000>;
	turn leg6 to z-axis <0.000000> speed <74.000000>;
	turn body to x-axis <0.000000> speed <74.000000>;
	move body to y-axis [0.000000] speed [25.000000];
}

MotionControl()
{
	var Func_Var_1;
	while( TRUE )
	{
		Func_Var_1 = Static_Var_1;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			call-script stand();
			sleep 100;
		}
	}
}

StartMoving()
{
	Static_Var_1 = 1;
}

StopMoving()
{
	Static_Var_1 = 0;
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	_currentgun = 1;
	dont-cache head;
	turn rarm to y-axis <20.000000> now;
	turn larm to y-axis <-20.000000> now;
	Static_Var_1 = 0;
	restore_delay = 3000;
	start-script MotionControl();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	cache gun;
	turn gun to y-axis <0.000000> speed <35.000000>;
	turn lowqueue to x-axis <0.000000> speed <90.000000>;
	turn upqueue to x-axis <0.000000> speed <90.000000>;
	turn gun to x-axis <0.000000> speed <90.000000>;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn lpince to y-axis <0.000000> speed <35.000000>;
	turn lcache to y-axis <0.000000> speed <80.000000>;
	turn larm to y-axis <-20.000000> speed <40.000000>;
	turn rpince to y-axis <0.000000> speed <35.000000>;
	turn rcache to y-axis <0.000000> speed <80.000000>;
	turn rarm to y-axis <20.000000> speed <40.000000>;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	dont-cache gun;
	turn lowqueue to y-axis heading speed <180.000000>;
	turn gun to x-axis <-40.000000> speed <300.000000>;
	wait-for-turn lowqueue around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	turn lowqueue to x-axis <12.000000> speed <500.000000>;
	turn upqueue to x-axis <12.000000> speed <500.000000>;
	turn gun to x-axis <-20.000000> speed <500.000000>;
	show flare3;
	sleep 150;
	turn lowqueue to x-axis <20.000000> speed <5.000000>;
	turn upqueue to x-axis <20.000000> speed <5.000000>;
	turn gun to x-axis <-40.000000> speed <20.000000>;
	hide flare3;
}

QueryPrimary(piecenum)
{
	piecenum = 23;
}

AimFromPrimary(piecenum)
{
	piecenum = 14;
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	while( heading > 16380 AND heading < 49140 )
	{
		sleep 15;
	}
	turn larm to y-axis <0.000000> speed <600.000000>;
	turn lcache to y-axis <20.000000> speed <360.000000>;
	turn lpince to y-axis heading speed <180.000000>;
	turn rarm to y-axis <0.000000> speed <600.000000>;
	turn rcache to y-axis <-20.000000> speed <360.000000>;
	turn rpince to y-axis heading speed <1890.000000>;
	wait-for-turn rpince around y-axis;
	wait-for-turn lpince around y-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FireSecondary()
{
	if( _currentgun == 1 )
	{
		turn lpince to x-axis <-10.000000> speed <500.000000>;
		show flare1;
		sleep 150;
		turn lpince to x-axis <0.000000> speed <20.000000>;
		hide flare1;
	}
	if( _currentgun == 2 )
	{
		turn rpince to x-axis <-10.000000> speed <500.000000>;
		show flare2;
		sleep 150;
		turn rpince to x-axis <0.000000> speed <20.000000>;
		hide flare2;
	}
	++_currentgun;
	if( _currentgun >= 3 )
	{
		_currentgun = 1;
	}
}

QuerySecondary(piecenum)
{
	if( _currentgun == 1 )
	{
		piecenum = 21;
	}
	else
	{
		piecenum = 22;
	}
}

AimFromSecondary(piecenum)
{
	if( _currentgun == 1 )
	{
		piecenum = 18;
	}
	else
	{
		piecenum = 17;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(time)
{
	restore_delay = time * 2;
}

Killed(Func_Var_1, Func_Var_2)
{
	if( Func_Var_1 <= 25 )
	{
		Func_Var_2 = 1;
		explode base type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode body type 1 | 2 | EXPTYPE_LARGEEXPLOSION;
		explode rarm type FALL | 2 | EXPTYPE_LARGEEXPLOSION;
		explode gun type 1 | EXPTYPE_XLARGEEXPLOSION;
		explode rpince type 1 | EXPTYPE_BLOODEXPLOSION;
		explode leg1 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
		explode leg2 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode leg3 type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
		explode leg4 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode leg5 type FALL | 2 | EXPTYPE_LARGEEXPLOSION;
		explode leg6 type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
		return (0);
	}
	if( Func_Var_1 <= 50 )
	{
		Func_Var_2 = 2;
		explode base type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode body type 1 | 8 | 2 | EXPTYPE_LARGEEXPLOSION;
		explode gun type FALL | 2 | EXPTYPE_LARGEEXPLOSION;
		explode upqueue type 1 | EXPTYPE_XLARGEEXPLOSION;
		explode leg1 type 1 | EXPTYPE_XLARGEEXPLOSION;
		explode leg2 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode leg3 type 1 | EXPTYPE_BLOODEXPLOSION;
		explode leg4 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode leg5 type FALL | 2 | EXPTYPE_LARGEEXPLOSION;
		explode leg6 type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
		return (0);
	}
	if( Func_Var_1 <= 99 )
	{
		Func_Var_2 = 3;
		explode base type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode body type 1 | 2 | EXPTYPE_LARGEEXPLOSION;
		explode upqueue type FALL | 2 | EXPTYPE_LARGEEXPLOSION;
		explode gun type 1 | EXPTYPE_XLARGEEXPLOSION;
		explode leg1 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
		explode leg2 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode leg3 type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
		explode leg4 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode leg5 type FALL | 2 | EXPTYPE_LARGEEXPLOSION;
		explode leg6 type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
		return (0);
	}
	Func_Var_2 = 3;
	explode base type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
	explode body type 1 | 2 | EXPTYPE_LARGEEXPLOSION;
	explode gun type FALL | 2 | EXPTYPE_LARGEEXPLOSION;
	explode upqueue type 1 | EXPTYPE_XLARGEEXPLOSION;
	explode leg1 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
	explode leg2 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
	explode leg3 type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
	explode leg4 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
	explode leg5 type FALL | 2 | EXPTYPE_LARGEEXPLOSION;
	explode leg6 type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
}
