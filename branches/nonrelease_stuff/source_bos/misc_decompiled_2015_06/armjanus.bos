#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  hole1, hole2, turret, launcher, base, muzzler, muzzlel, muzzleb1,
       muzzleb2;

static-var  restore_delay, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


Abs(Func_Var_1)
{
	if( Func_Var_1 >= 0 )
	{
		Static_Var_4 = Func_Var_1;
	}
	else
	{
		Static_Var_4 = 0 - Func_Var_1;
	}
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_4 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_4 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_4 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_4 = Func_Var_1;
	}
	else
	{
		Static_Var_4 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

ProjZPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -27300 OR Func_Var_2 > 27300 )
	{
		Static_Var_4 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 5460 )
	{
		Static_Var_4 = Func_Var_1 * ( 16380 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -5460 )
	{
		Static_Var_4 = Func_Var_1 * ( Func_Var_2 + 16380 ) / 10920;
	}
	else
	{
		Static_Var_4 = Func_Var_1;
	}
}

TiltZ(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4)
{
	signal 8;
	set-signal-mask 8;
	call-script ProjXPW(-1820,Func_Var_1);
	Func_Var_2 = Static_Var_4;
	call-script Abs(Func_Var_2 * 4);
	Func_Var_4 = Static_Var_4;
	call-script Abs(819200 * 4 / 163 * 256 * Func_Var_2);
	Func_Var_3 = Static_Var_4;
	turn base to z-axis Func_Var_2 speed Func_Var_4;
	move base to y-axis Func_Var_3 speed Func_Var_3 * [0.000061];
	wait-for-turn base around z-axis;
	wait-for-move base along y-axis;
	turn base to z-axis <0.000000> speed Func_Var_4;
	move base to y-axis [0.000000] speed Func_Var_3 * [0.000061];
}

RockXInit()
{
	Static_Var_5 = 0;
}

RockX(Func_Var_1, Func_Var_2)
{
	signal 4;
	set-signal-mask 4;
	call-script ProjZPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_5 = Static_Var_5 + Static_Var_4;
	call-script Abs(Static_Var_5);
	while( Static_Var_4 > 91 )
	{
		turn base to x-axis Static_Var_5 speed Static_Var_4 * <0.021978>;
		wait-for-turn base around x-axis;
		Static_Var_5 = Static_Var_5 * -1 / 2;
		call-script Abs(Static_Var_5);
	}
	turn base to x-axis <0.000000> speed <0.500000> * <0.021978>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	hide hole1;
	hide hole2;
	hide muzzler;
	hide muzzlel;
	hide muzzleb1;
	hide muzzleb2;
	Static_Var_2 = 1;
	restore_delay = 6000;
	call-script RockXInit();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn launcher to x-axis <0.000000> speed <50.000000>;
}

AimWeapon1(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <120.000000>;
	turn launcher to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	Static_Var_3 = heading;
	return (1);
}

FireWeapon1()
{
	start-script RockX(-8,Static_Var_3);
	start-script TiltZ(Static_Var_3);
}

Shot1()
{
	Static_Var_2 = !Static_Var_2;
	if( Static_Var_2 )
	{
		emit-sfx 1024 from muzzler;
		emit-sfx 1025 from muzzleb1;
	}
	else
	{
		emit-sfx 1024 from muzzlel;
		emit-sfx 1025 from muzzleb2;
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = 2;
}

QueryWeapon1(piecenum)
{
	if( Static_Var_2 )
	{
		piecenum = 0;
	}
	else
	{
		piecenum = 1;
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = 2;
}

QueryWeapon2(piecenum)
{
	if( Static_Var_2 )
	{
		piecenum = 0;
	}
	else
	{
		piecenum = 1;
	}
}

AimWeapon2(heading, pitch)
{
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide hole1;
	hide hole2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode hole1 type BITMAPONLY | BITMAP3;
		explode hole2 type BITMAPONLY | BITMAP3;
		explode launcher type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode hole1 type FALL | BITMAP3;
		explode hole2 type FALL | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode hole1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode hole2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode hole1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode hole2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
