#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, rengine, lengine, rwing, lwing, jet1, jet2,
       jet3, body, jet4, jet5, l1;

static-var  Moverate, unitviewer, Active, statechg_DesiredState, statechg_StateChanging;

lua_UnitStoppedMoving()
{ 
 	return 0; 
}
 
lua_UnitStartedMoving() 
{ 
	return 0; 
}

activatescr()
{
	if( TRUE )
	{
		Active = 1;
		turn l1 to x-axis <75.000000> speed <50.000000>;
		turn rwing to z-axis <-140.000000> speed <50.000000>;
		sleep 1100;
		turn lwing to z-axis <140.000000> speed <80.000000>;
	}
	sleep 44;
}

deactivatescr()
{
	if( TRUE )
	{
		Active = 0;
		turn l1 to x-axis <0.000000> speed <50.000000>;
		turn lwing to z-axis <0.000000> speed <50.000000>;
		sleep 1200;
		turn rwing to z-axis <0.000000> speed <80.000000>;
	}
	sleep 44;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	unitviewer = FALSE;
	Moverate = 0;
	Active = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Demo()
{
	unitviewer = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = 1;
}

Activate()
{
	if( unitviewer )
	{
		start-script RequestState(0);
	}
}

BeginTransport(Func_Var_1)
{
	move link to z-axis [0.000000] + Func_Var_1 now;
	start-script RequestState(0);
}

Deactivate()
{
	if( unitviewer )
	{
		start-script RequestState(1);
	}
}

EndTransport()
{
	start-script RequestState(1);
}

ProcessFlames()
{
	while( TRUE )
	{
		if( Moverate == 1 OR Moverate == 2 )
		{
			emit-sfx 1024 + 0 from jet1;
			emit-sfx 1024 + 0 from jet2;
			emit-sfx 1024 + 0 from jet3;
			if( Active )
			{
				emit-sfx 1024 + 0 from jet4;
				emit-sfx 1024 + 0 from jet5;
			}
		}
		sleep 34;
	}
}

StartMoving()
{
	move rengine to x-axis [0.000000] now;
	move rengine to x-axis [6.250000] speed [7.500000];
	move lengine to x-axis [0.000000] now;
	move lengine to x-axis [-6.250000] speed [7.500000];
	call-script lua_UnitStartedMoving();
	sleep 1000;
}

StopMoving()
{
	signal 2;
	Moverate = 0;
	move rengine to x-axis [6.250000] now;
	move rengine to x-axis [0.000000] speed [7.500000];
	move lengine to x-axis [-6.250000] now;
	move lengine to x-axis [0.000000] speed [7.500000];
	call-script lua_UnitStoppedMoving();
	sleep 1000;
}

MoveRate1()
{
	signal 2;
	set-signal-mask 2;
	start-script ProcessFlames();
	Moverate = 1;
}

MoveRate2()
{
	signal 2;
	set-signal-mask 2;
	start-script ProcessFlames();
	Moverate = 2;
}

MoveRate3()
{
	signal 2;
	set-signal-mask 2;
	start-script ProcessFlames();
	Moverate = 3;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lengine type BITMAPONLY | BITMAP1;
		explode rengine type BITMAPONLY | BITMAP2;
		explode rwing type BITMAPONLY | BITMAP3;
		explode base type BITMAPONLY | BITMAP4;
		explode jet1 type BITMAPONLY | BITMAP5;
		explode jet2 type BITMAPONLY | BITMAP1;
		explode jet3 type BITMAPONLY | BITMAP2;
		explode lwing type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode rengine type BITMAPONLY | BITMAP1;
		explode lengine type BITMAPONLY | BITMAP2;
		explode body type SHATTER | BITMAP3;
		explode base type BITMAPONLY | BITMAP4;
		explode jet1 type FALL | BITMAP5;
		explode jet2 type FALL | BITMAP1;
		explode jet3 type FALL | BITMAP2;
		explode lwing type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode rengine type BITMAPONLY | BITMAP1;
		explode lengine type BITMAPONLY | BITMAP2;
		explode body type SHATTER | BITMAP3;
		explode lwing type BITMAPONLY | BITMAP4;
		explode jet1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode jet2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode jet3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rwing type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode rengine type BITMAPONLY | BITMAP1;
	explode lengine type BITMAPONLY | BITMAP2;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode rwing type BITMAPONLY | BITMAP4;
	explode jet1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode jet2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode jet3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lwing type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
