#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, lwing, rwing, rengine, lengine, torpbay;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

lua_UnitStoppedMoving()
{ 
 	return 0; 
}
 
lua_UnitStartedMoving() 
{ 
	return 0; 
}

activatescr()
{
	if( TRUE )
	{
		turn lwing to z-axis <55.000000> speed <45.000000>;
		turn lengine to z-axis <-55.000000> speed <45.000000>;
		turn rwing to z-axis <-55.000000> speed <45.000000>;
		turn rengine to z-axis <55.000000> speed <45.000000>;
	}
	sleep 10;
}

deactivatescr()
{
	if( TRUE )
	{
		turn lwing to z-axis <0.000000> speed <25.000000>;
		turn lengine to z-axis <0.000000> speed <25.000000>;
		turn rwing to z-axis <0.000000> speed <25.000000>;
		turn rengine to z-axis <0.000000> speed <25.000000>;
	}
	sleep 10;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

MoveRate2()
{
	if( Rand( 1, 3 ) == 1 AND ( !Static_Var_1 ) )
	{
		Static_Var_1 = 1;
		turn base to z-axis <240.098901> speed <120.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.000000> speed <180.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.000000>;
		Static_Var_1 = 0;
	}
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	call-script lua_UnitStartedMoving();
}

StopMoving()
{
	call-script lua_UnitStoppedMoving();
}


QueryPrimary(piecenum)
{
	piecenum = torpbay;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
		explode rengine type BITMAPONLY | BITMAP2;
		explode lengine type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode lwing type FALL | BITMAP3;
		explode rwing type FALL | BITMAP4;
		explode rengine type FALL | BITMAP2;
		explode lengine type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode rwing type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode lwing type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode rengine type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lengine type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode rwing type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lwing type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode rengine type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode lengine type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
}
