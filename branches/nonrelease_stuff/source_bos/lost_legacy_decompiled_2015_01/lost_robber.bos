#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, rengine, lengine, rwing1, lwing1, rwing2, lwing2,
       jet1, jet2, jet3, body, jet4, jet5, jet6, jet7,
       jet8, rearengine, lpiv, rpiv, flare1, flare2, flare, turret,
       barrel, barrel2;

static-var  _Moverate, gun_1, unitviewer, _Active, statechg_DesiredState,
            statechg_StateChanging;

lua_UnitStoppedMoving()
{ 
 	return 0; 
}
 
lua_UnitStartedMoving() 
{ 
	return 0; 
}
			
activatescr()
{
	if( TRUE )
	{
		_Active = 1;
		turn rwing1 to z-axis <-85.000000> speed <57.000000>;
		turn rwing2 to z-axis <150.000000> speed <100.000000>;
		turn rpiv to z-axis <-65.000000> speed <50.000000>;
		turn lwing1 to z-axis <85.000000> speed <57.000000>;
		turn lwing2 to z-axis <-150.000000> speed <100.000000>;
		turn lpiv to z-axis <65.000000> speed <50.000000>;
		sleep 1100;
	}
	sleep 44;
}

deactivatescr()
{
	if( TRUE )
	{
		_Active = 0;
		turn rwing1 to z-axis <0.000000> speed <57.000000>;
		turn rwing2 to z-axis <0.000000> speed <100.000000>;
		turn rpiv to z-axis <0.000000> speed <50.000000>;
		turn lwing1 to z-axis <0.000000> speed <57.000000>;
		turn lwing2 to z-axis <0.000000> speed <100.000000>;
		turn lpiv to z-axis <0.000000> speed <50.000000>;
	}
	sleep 44;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	unitviewer = FALSE;
	_Moverate = 0;
	_Active = 0;
	gun_1 = base;
	hide flare;
	call-script InitState();
	start-script SmokeUnit();
}

Demo()
{
	unitviewer = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = 1;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

FirePrimary()
{
	gun_1 = !gun_1;
	if( gun_1 == 0 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		return (0);
		gun_1 = link;
	}
	if( gun_1 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		return (0);
		gun_1 = base;
	}
}

AimPrimary(heading, pitch)
{
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = body;
}

AimFromWeapon2(piecenum)
{
	piecenum = 23;
}

QueryWeapon2(piecenum)
{
	piecenum = 22;
}

AimWeapon2(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn turret to y-axis heading speed <900.000000>;
	turn barrel to x-axis <0.000000> - pitch speed <450.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel around x-axis;
	return (1);
}

FireWeapon2()
{
	emit-sfx 1024 + 1 from flare;
	move barrel2 to z-axis [-12.500000] now;
	move barrel2 to z-axis [0.000000] speed [12.500000];
	wait-for-move barrel2 along z-axis;
}

Activate()
{
	if( unitviewer )
	{
		start-script RequestState(0);
	}
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
}

Deactivate()
{
	if( unitviewer )
	{
		start-script RequestState(1);
	}
}

EndTransport()
{
	start-script RequestState(1);
}

ProcessFlames()
{
	while( TRUE )
	{
		if( _Moverate == 1 OR _Moverate == 2 OR _Moverate == 3 )
		{
			emit-sfx 1024 + 0 from jet1;
			emit-sfx 1024 + 0 from jet2;
			emit-sfx 1024 + 0 from jet5;
			emit-sfx 1024 + 0 from jet6;
			if( _Active )
			{
				emit-sfx 1024 + 0 from jet3;
				emit-sfx 1024 + 0 from jet4;
				emit-sfx 1024 + 0 from jet7;
				emit-sfx 1024 + 0 from jet8;
			}
		}
		sleep 10;
	}
}

StartMoving()
{
	turn rengine to x-axis <30.000000> speed <30.000000>;
	turn lengine to x-axis <30.000000> speed <30.000000>;
	turn rearengine to x-axis <70.000000> speed <30.000000>;
	call-script lua_UnitStartedMoving();
	sleep 1000;
}

StopMoving()
{
	signal 2;
	_Moverate = 0;
	turn rengine to x-axis <0.000000> speed <100.000000>;
	turn lengine to x-axis <0.000000> speed <100.000000>;
	turn rearengine to x-axis <0.000000> speed <100.000000>;
	call-script lua_UnitStoppedMoving();
	sleep 1000;
}

MoveRate1()
{
	signal 2;
	set-signal-mask 2;
	turn rengine to x-axis <30.000000> speed <30.000000>;
	turn lengine to x-axis <30.000000> speed <30.000000>;
	start-script ProcessFlames();
	_Moverate = 1;
}

MoveRate2()
{
	signal 2;
	set-signal-mask 2;
	turn rengine to x-axis <60.000000> speed <30.000000>;
	turn lengine to x-axis <60.000000> speed <30.000000>;
	start-script ProcessFlames();
	_Moverate = 2;
}

MoveRate3()
{
	signal 2;
	set-signal-mask 2;
	turn rengine to x-axis <80.000000> speed <30.000000>;
	turn lengine to x-axis <80.000000> speed <30.000000>;
	start-script ProcessFlames();
	_Moverate = 3;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lengine type BITMAPONLY | BITMAP1;
		explode rengine type BITMAPONLY | BITMAP2;
		explode rwing1 type BITMAPONLY | BITMAP3;
		explode base type BITMAPONLY | BITMAP4;
		explode jet1 type BITMAPONLY | BITMAP5;
		explode jet2 type BITMAPONLY | BITMAP1;
		explode jet3 type BITMAPONLY | BITMAP2;
		explode lwing2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode rengine type BITMAPONLY | BITMAP1;
		explode lengine type BITMAPONLY | BITMAP2;
		explode body type SHATTER | BITMAP3;
		explode base type BITMAPONLY | BITMAP4;
		explode jet1 type FALL | BITMAP5;
		explode jet2 type FALL | BITMAP1;
		explode jet3 type FALL | BITMAP2;
		explode lwing1 type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode rengine type BITMAPONLY | BITMAP1;
		explode lengine type BITMAPONLY | BITMAP2;
		explode body type SHATTER | BITMAP3;
		explode lwing1 type BITMAPONLY | BITMAP4;
		explode jet1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode jet2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode jet3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rwing2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode rengine type BITMAPONLY | BITMAP1;
	explode lengine type BITMAPONLY | BITMAP2;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode rwing1 type BITMAPONLY | BITMAP4;
	explode jet1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode jet2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode jet3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lwing2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
