#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, flare, barrel, gun, sleeve, s2, pistons, turret, tower, tige, radar, lights, door1, door2, door3;

static-var  Static_Var_1, restore_delay, statechg_DesiredState, statechg_StateChanging,bAiming,openState;

// Signal definitions
#define SIG_AIM			2
#define SIG_OPEN		16

activatescr()
{
	if( TRUE )
	{
		move door3 to x-axis [0.000000] speed [5.000000];
		sleep 300;
		move door2 to x-axis [0.000000] speed [5.000000];
		sleep 300;
		move door1 to x-axis [0.000000] speed [5.000000];
		sleep 814;
	}
	if( TRUE )
	{
		move tower to y-axis [0.000000] speed [10.000000];
		wait-for-move tower along y-axis;
		move tige to z-axis [0.000000] speed [20.000000];
		wait-for-move tige along z-axis;
		spin radar around y-axis speed <100.000000>;
	}
	if( TRUE )
	{
		move turret to z-axis [-12.500000] speed [10.000000];
		turn pistons to x-axis <0.000000> speed <30.000000>;
		turn s2 to x-axis <0.000000> speed <30.000000>;
		move sleeve to z-axis [0.000000] speed [10.000000];
		sleep 2500;
	}
	if( TRUE )
	{
		move barrel to z-axis [0.000000] speed [25.000000];
		move gun to z-axis [0.000000] speed [12.500000];
		sleep 400;
	}
	sleep 169;
}

deactivatescr()
{
	if( TRUE )
	{
		move barrel to z-axis [-25.000000] speed [25.000000];
		move gun to z-axis [-7.500000] speed [12.500000];
		sleep 400;
	}
	if( TRUE )
	{
		stop-spin radar around y-axis;
		turn radar to y-axis <0.000000> speed <150.000000>;
		wait-for-turn radar around y-axis;
		move tige to z-axis [-10.000000] speed [25.000000];
		wait-for-move tige along z-axis;
		move tower to y-axis [-6.250000] speed [10.000000];
	}
	if( TRUE )
	{
		move turret to z-axis [0.000000] speed [10.000000];
		turn pistons to x-axis <-75.000000> speed <30.000000>;
		turn s2 to x-axis <75.000000> speed <30.000000>;
		move sleeve to z-axis [12.500000] speed [10.000000];
		sleep 2500;
	}
	if( TRUE )
	{
		move door1 to x-axis [-8.500000] speed [7.500000];
		sleep 300;
		move door2 to x-axis [-8.500000] speed [7.500000];
		sleep 300;
		move door3 to x-axis [-8.500000] speed [7.500000];
		sleep 300;
	}
	sleep 160;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
	cache sleeve;
	cache barrel;
	cache gun;
	cache door1;
	cache door2;
	cache door3;
	cache lights;
	cache flare;
	cache radar;
	cache turret;
	cache pistons;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	call-script deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

OpenClose(state)
{
	signal SIG_OPEN;
	set-signal-mask SIG_OPEN;
	openState = state;
	if (state != Static_var_1)
	{
		if (state)
		{
			if (!bAiming) start-script RequestState(0);
		}
		else
		{
			if (bAiming) return;
			while(statechg_StateChanging) sleep 250;
			turn turret to y-axis <0.000000> speed <50.000000>;
			turn gun to x-axis <0.000000> speed <50.000000>;
			wait-for-turn turret around y-axis;
			wait-for-turn gun around x-axis;
			start-script RequestState(1);
		}
	}
}

Create()
{
	dont-cache flare;
	hide flare;
	Static_Var_1 = 0;
	bAiming = 0;
	move turret to z-axis [-12.500000] now;
	call-script InitState();
	start-script SmokeUnit();
	restore_delay = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin radar around y-axis speed <100.000000>;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	
	sleep restore_delay;
	bAiming = 0;
	if (!openState){
		turn turret to y-axis <0.000000> speed <25.000000>;
		turn sleeve to x-axis <0.000000> speed <50.000000>;
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
		if (openState) return;
		set-signal-mask 0;
		start-script RequestState(1);
	}
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = 1;
	turn turret to y-axis heading speed <15.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	move barrel to z-axis [-10.000000] speed [875.000000];
	move gun to z-axis [-3.250000] speed [375.000000];
	sleep 210;
	move barrel to z-axis [0.000000] speed [12.500000];
	move gun to z-axis [0.000000] speed [7.500000];
	hide flare;
	wait-for-move barrel along z-axis;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode door3 type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP5;
		explode gun type BITMAPONLY | BITMAP1;
		explode radar type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode barrel type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode door1 type FALL | BITMAP2;
		explode door2 type FALL | BITMAP3;
		explode door3 type FALL | BITMAP3;
		explode flare type FALL | BITMAP5;
		explode gun type SHATTER | BITMAP1;
		explode radar type FALL | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode gun type BITMAPONLY | BITMAP1;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lights type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun type SHATTER | BITMAP5;
		explode body type SHATTER | BITMAP5;
		explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lights type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type BITMAPONLY | BITMAP4;
}
