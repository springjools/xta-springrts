#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, case5, case6, case1, case2, case4, case3,
       plate1, arm, container1, container2, door1, barrel, energy, door2,
       plate2, radar, gun, turret;

static-var  Static_Var_1, openState, bAiming, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM			2
#define SIG_OPEN		16

activatescr()
{
	move case5 to y-axis [0.000000] now;
	move case5 to y-axis [-17.500000] speed [35.000000];
	move case6 to y-axis [0.000000] now;
	move case6 to y-axis [-17.500000] speed [35.000000];
	sleep 514;

	turn case1 to z-axis <89.000000> speed <173.000000>;
	sleep 518;

	turn case2 to z-axis <-90.000000> speed <173.000000>;
	sleep 519;

	turn case4 to z-axis <89.000000> speed <172.000000>;
	sleep 519;

	turn case3 to z-axis <-90.000000> speed <173.000000>;
	sleep 521;

	move plate1 to y-axis [15.000000] speed [30.000000];
	sleep 516;

	move arm to y-axis [15.000000] speed [25.000000];
	sleep 518;

	turn container1 to z-axis <91.000000> speed <175.000000>;
	sleep 519;

	turn container2 to z-axis <-90.000000> speed <174.000000>;
	sleep 518;

	move container1 to x-axis [5.000000] speed [7.500000];
	move container2 to x-axis [-5.000000] speed [7.500000];
	sleep 522;

	turn door1 to x-axis <88.000000> speed <169.000000>;
	sleep 518;

	move door1 to z-axis [-5.000000] speed [7.500000];
	sleep 519;

	move barrel to z-axis [25.000000] speed [45.000000];
	move energy to z-axis [7.500000] speed [15.000000];
	sleep 518;

	turn door2 to z-axis <92.000000> speed <178.000000>;
	sleep 516;

	move door2 to x-axis [5.000000] speed [7.500000];
	sleep 523;

	move plate2 to x-axis [-5.000000] speed [10.000000];
	sleep 517;

	turn radar to x-axis <93.000000> speed <180.000000>;
	sleep 519;
}

deactivatescr()
{
	move plate1 to y-axis [15.000000] now;
	move case5 to y-axis [-17.500000] now;
	move case6 to y-axis [-17.500000] now;
	move arm to y-axis [15.000000] now;
	move barrel to z-axis [25.000000] now;
	move container1 to x-axis [5.000000] now;
	move container2 to x-axis [-5.000000] now;
	move plate2 to x-axis [-5.000000] now;
	move door2 to x-axis [5.000000] now;
	move door1 to z-axis [-5.000000] now;
	move energy to z-axis [7.500000] now;
	turn case1 to z-axis <89.000000> now;
	turn case2 to z-axis <-90.000000> now;
	turn case3 to z-axis <-90.000000> now;
	turn case4 to z-axis <89.000000> now;
	turn container1 to z-axis <91.000000> now;
	turn container2 to z-axis <-90.000000> now;
	turn door2 to z-axis <92.000000> now;
	turn radar to x-axis <93.000000> now;
	turn radar to x-axis <0.000000> speed <182.000000>;
	turn door1 to x-axis <88.000000> now;
	sleep 511;

	move plate2 to x-axis [0.000000] speed [10.000000];
	sleep 518;

	move door2 to x-axis [0.000000] speed [7.500000];
	sleep 519;

	turn door2 to z-axis <0.000000> speed <177.000000>;
	sleep 519;

	move barrel to z-axis [0.000000] speed [45.000000];
	move energy to z-axis [0.000000] speed [15.000000];
	sleep 522;

	move door1 to z-axis [0.000000] speed [7.500000];
	sleep 514;

	turn door1 to x-axis <0.000000> speed <169.000000>;
	sleep 518;

	move container1 to x-axis [0.000000] speed [7.500000];
	move container2 to x-axis [0.000000] speed [7.500000];
	sleep 519;

	turn container2 to z-axis <0.000000> speed <173.000000>;
	sleep 519;

	turn container1 to z-axis <0.000000> speed <174.000000>;
	sleep 521;

	move arm to y-axis [0.000000] speed [25.000000];
	sleep 519;

	move plate1 to y-axis [0.000000] speed [30.000000];
	sleep 519;

	turn case3 to z-axis <0.000000> speed <174.000000>;
	sleep 517;

	turn case4 to z-axis <0.000000> speed <173.000000>;
	sleep 517;

	turn case2 to z-axis <0.000000> speed <172.000000>;
	sleep 523;

	turn case1 to z-axis <0.000000> speed <173.000000>;
	sleep 516;

	move case5 to y-axis [0.000000] speed [35.000000];
	move case6 to y-axis [0.000000] speed [35.000000];
	sleep 519;
}

go()
{
	call-script activatescr();
	spin radar around x-axis speed <100.000000>;
	Static_Var_1 = 1;
	set ARMORED to 0;
	set ACTIVATION to 1;
}

stop()
{
	set ARMORED to 1;
	set ACTIVATION to 0;
	Static_Var_1 = 0;
	stop-spin radar around x-axis;
	turn radar to x-axis <0.000000> speed <100.000000>;
	wait-for-turn radar around x-axis;
	call-script deactivatescr();
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	set ARMORED to 1;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	set-signal-mask 0;
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script stop();
			currentstate = 1;
		}
		else
		{
			call-script go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

OpenClose(state)
{
	signal SIG_OPEN;
	set-signal-mask SIG_OPEN;
	openState = state;
	if (state != Static_var_1)
	{
		if (state)
		{
			if (!bAiming) start-script RequestState(0);
		}
		else
		{
			if (bAiming) return;
			while(statechg_StateChanging) sleep 250;
			turn turret to y-axis <0.000000> speed <50.000000>;
			turn gun to x-axis <0.000000> speed <50.000000>;
			wait-for-turn turret around y-axis;
			wait-for-turn gun around x-axis;
			start-script RequestState(1);
		}
	}
}

Create()
{
	hide flare;
	Static_Var_1 = 0;
	bAiming = 0;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep 14000;
	bAiming = 0;
	if (!openState){
		turn turret to y-axis <0.000000> speed <50.000000>;
		turn gun to x-axis <0.000000> speed <50.000000>;
		wait-for-turn turret around y-axis;
		wait-for-turn gun around x-axis;
		if (openState) return;		
		set-signal-mask 0;
		start-script RequestState(1);
	}
}

AimFromPrimary(piecenum)
{
	piecenum=base;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	bAiming = 1;
	turn turret to y-axis heading speed <50.000000>;
	turn gun to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode case1 type BITMAPONLY | BITMAP4;
		explode case2 type BITMAPONLY | BITMAP5;
		explode case3 type BITMAPONLY | BITMAP1;
		explode case4 type BITMAPONLY | BITMAP2;
		explode case5 type BITMAPONLY | BITMAP3;
		explode case6 type BITMAPONLY | BITMAP4;
		explode container1 type BITMAPONLY | BITMAP5;
		explode container2 type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode energy type BITMAPONLY | BITMAP4;
		explode flare type BITMAPONLY | BITMAP5;
		explode gun type BITMAPONLY | BITMAP1;
		explode plate1 type BITMAPONLY | BITMAP2;
		explode plate2 type BITMAPONLY | BITMAP3;
		explode radar type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm type BITMAPONLY | BITMAP1;
		explode barrel type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode case1 type BITMAPONLY | BITMAP4;
		explode case2 type BITMAPONLY | BITMAP5;
		explode case3 type BITMAPONLY | BITMAP1;
		explode case4 type BITMAPONLY | BITMAP2;
		explode case5 type BITMAPONLY | BITMAP3;
		explode case6 type BITMAPONLY | BITMAP4;
		explode container1 type BITMAPONLY | BITMAP5;
		explode container2 type BITMAPONLY | BITMAP1;
		explode door1 type FALL | BITMAP2;
		explode door2 type FALL | BITMAP3;
		explode energy type FALL | BITMAP4;
		explode flare type FALL | BITMAP5;
		explode gun type SHATTER | BITMAP1;
		explode plate1 type BITMAPONLY | BITMAP2;
		explode plate2 type BITMAPONLY | BITMAP3;
		explode radar type FALL | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm type BITMAPONLY | BITMAP1;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode case1 type BITMAPONLY | BITMAP4;
		explode case2 type BITMAPONLY | BITMAP5;
		explode case3 type BITMAPONLY | BITMAP1;
		explode case4 type BITMAPONLY | BITMAP2;
		explode case5 type BITMAPONLY | BITMAP3;
		explode case6 type BITMAPONLY | BITMAP3;
		explode container1 type BITMAPONLY | BITMAP4;
		explode container2 type BITMAPONLY | BITMAP5;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode energy type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun type SHATTER | BITMAP5;
		explode plate1 type BITMAPONLY | BITMAP1;
		explode plate2 type BITMAPONLY | BITMAP2;
		explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode arm type BITMAPONLY | BITMAP1;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode case1 type BITMAPONLY | BITMAP4;
	explode case2 type BITMAPONLY | BITMAP5;
	explode case3 type BITMAPONLY | BITMAP1;
	explode case4 type BITMAPONLY | BITMAP2;
	explode case5 type BITMAPONLY | BITMAP3;
	explode case6 type BITMAPONLY | BITMAP3;
	explode container1 type BITMAPONLY | BITMAP4;
	explode container2 type BITMAPONLY | BITMAP5;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode energy type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode plate1 type BITMAPONLY | BITMAP1;
	explode plate2 type BITMAPONLY | BITMAP2;
	explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type BITMAPONLY | BITMAP4;
}
